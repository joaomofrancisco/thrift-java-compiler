/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.maestro;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-22")
public class OdsKeyEntityMapperResult implements org.apache.thrift.TBase<OdsKeyEntityMapperResult, OdsKeyEntityMapperResult._Fields>, java.io.Serializable, Cloneable, Comparable<OdsKeyEntityMapperResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OdsKeyEntityMapperResult");

  private static final org.apache.thrift.protocol.TField TOTAL_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_results", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("objects", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OdsKeyEntityMapperResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OdsKeyEntityMapperResultTupleSchemeFactory());
  }

  public int total_results; // required
  public List<String> objects; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_RESULTS((short)1, "total_results"),
    OBJECTS((short)2, "objects");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_RESULTS
          return TOTAL_RESULTS;
        case 2: // OBJECTS
          return OBJECTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_RESULTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("total_results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("objects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OdsKeyEntityMapperResult.class, metaDataMap);
  }

  public OdsKeyEntityMapperResult() {
  }

  public OdsKeyEntityMapperResult(
    int total_results,
    List<String> objects)
  {
    this();
    this.total_results = total_results;
    setTotal_resultsIsSet(true);
    this.objects = objects;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OdsKeyEntityMapperResult(OdsKeyEntityMapperResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.total_results = other.total_results;
    if (other.isSetObjects()) {
      List<String> __this__objects = new ArrayList<String>(other.objects);
      this.objects = __this__objects;
    }
  }

  public OdsKeyEntityMapperResult deepCopy() {
    return new OdsKeyEntityMapperResult(this);
  }

  @Override
  public void clear() {
    setTotal_resultsIsSet(false);
    this.total_results = 0;
    this.objects = null;
  }

  public int getTotal_results() {
    return this.total_results;
  }

  public OdsKeyEntityMapperResult setTotal_results(int total_results) {
    this.total_results = total_results;
    setTotal_resultsIsSet(true);
    return this;
  }

  public void unsetTotal_results() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_RESULTS_ISSET_ID);
  }

  /** Returns true if field total_results is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_results() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_RESULTS_ISSET_ID);
  }

  public void setTotal_resultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_RESULTS_ISSET_ID, value);
  }

  public int getObjectsSize() {
    return (this.objects == null) ? 0 : this.objects.size();
  }

  public java.util.Iterator<String> getObjectsIterator() {
    return (this.objects == null) ? null : this.objects.iterator();
  }

  public void addToObjects(String elem) {
    if (this.objects == null) {
      this.objects = new ArrayList<String>();
    }
    this.objects.add(elem);
  }

  public List<String> getObjects() {
    return this.objects;
  }

  public OdsKeyEntityMapperResult setObjects(List<String> objects) {
    this.objects = objects;
    return this;
  }

  public void unsetObjects() {
    this.objects = null;
  }

  /** Returns true if field objects is set (has been assigned a value) and false otherwise */
  public boolean isSetObjects() {
    return this.objects != null;
  }

  public void setObjectsIsSet(boolean value) {
    if (!value) {
      this.objects = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_RESULTS:
      if (value == null) {
        unsetTotal_results();
      } else {
        setTotal_results((Integer)value);
      }
      break;

    case OBJECTS:
      if (value == null) {
        unsetObjects();
      } else {
        setObjects((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_RESULTS:
      return Integer.valueOf(getTotal_results());

    case OBJECTS:
      return getObjects();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_RESULTS:
      return isSetTotal_results();
    case OBJECTS:
      return isSetObjects();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OdsKeyEntityMapperResult)
      return this.equals((OdsKeyEntityMapperResult)that);
    return false;
  }

  public boolean equals(OdsKeyEntityMapperResult that) {
    if (that == null)
      return false;

    boolean this_present_total_results = true;
    boolean that_present_total_results = true;
    if (this_present_total_results || that_present_total_results) {
      if (!(this_present_total_results && that_present_total_results))
        return false;
      if (this.total_results != that.total_results)
        return false;
    }

    boolean this_present_objects = true && this.isSetObjects();
    boolean that_present_objects = true && that.isSetObjects();
    if (this_present_objects || that_present_objects) {
      if (!(this_present_objects && that_present_objects))
        return false;
      if (!this.objects.equals(that.objects))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_total_results = true;
    list.add(present_total_results);
    if (present_total_results)
      list.add(total_results);

    boolean present_objects = true && (isSetObjects());
    list.add(present_objects);
    if (present_objects)
      list.add(objects);

    return list.hashCode();
  }

  @Override
  public int compareTo(OdsKeyEntityMapperResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotal_results()).compareTo(other.isSetTotal_results());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_results()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_results, other.total_results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjects()).compareTo(other.isSetObjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objects, other.objects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OdsKeyEntityMapperResult(");
    boolean first = true;

    sb.append("total_results:");
    sb.append(this.total_results);
    first = false;
    if (!first) sb.append(", ");
    sb.append("objects:");
    if (this.objects == null) {
      sb.append("null");
    } else {
      sb.append(this.objects);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OdsKeyEntityMapperResultStandardSchemeFactory implements SchemeFactory {
    public OdsKeyEntityMapperResultStandardScheme getScheme() {
      return new OdsKeyEntityMapperResultStandardScheme();
    }
  }

  private static class OdsKeyEntityMapperResultStandardScheme extends StandardScheme<OdsKeyEntityMapperResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OdsKeyEntityMapperResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total_results = iprot.readI32();
              struct.setTotal_resultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.objects = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.objects.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setObjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OdsKeyEntityMapperResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_RESULTS_FIELD_DESC);
      oprot.writeI32(struct.total_results);
      oprot.writeFieldEnd();
      if (struct.objects != null) {
        oprot.writeFieldBegin(OBJECTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.objects.size()));
          for (String _iter11 : struct.objects)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OdsKeyEntityMapperResultTupleSchemeFactory implements SchemeFactory {
    public OdsKeyEntityMapperResultTupleScheme getScheme() {
      return new OdsKeyEntityMapperResultTupleScheme();
    }
  }

  private static class OdsKeyEntityMapperResultTupleScheme extends TupleScheme<OdsKeyEntityMapperResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OdsKeyEntityMapperResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotal_results()) {
        optionals.set(0);
      }
      if (struct.isSetObjects()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTotal_results()) {
        oprot.writeI32(struct.total_results);
      }
      if (struct.isSetObjects()) {
        {
          oprot.writeI32(struct.objects.size());
          for (String _iter12 : struct.objects)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OdsKeyEntityMapperResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.total_results = iprot.readI32();
        struct.setTotal_resultsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.objects = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.objects.add(_elem14);
          }
        }
        struct.setObjectsIsSet(true);
      }
    }
  }

}

