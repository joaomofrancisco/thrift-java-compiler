/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.maestro;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Wrapper around a map of a map that our results are commonly expressed as:
 * map<string,      map<string, list<TimeValue>>>
 *       |               |         |
 *       V               V         V
 * map<entity_name, map<key,    list of unixTimes and values>
 * Introduced for easier thrift serialization and better cross-language
 * support and use, especially for verbose languages like Java.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-22")
public class OdsGetResult implements org.apache.thrift.TBase<OdsGetResult, OdsGetResult._Fields>, java.io.Serializable, Cloneable, Comparable<OdsGetResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OdsGetResult");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OdsGetResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OdsGetResultTupleSchemeFactory());
  }

  public Map<String,Map<String,List<TimeValue>>> result; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeValue.class))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OdsGetResult.class, metaDataMap);
  }

  public OdsGetResult() {
  }

  public OdsGetResult(
    Map<String,Map<String,List<TimeValue>>> result)
  {
    this();
    this.result = result;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OdsGetResult(OdsGetResult other) {
    if (other.isSetResult()) {
      Map<String,Map<String,List<TimeValue>>> __this__result = new HashMap<String,Map<String,List<TimeValue>>>(other.result.size());
      for (Map.Entry<String, Map<String,List<TimeValue>>> other_element : other.result.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,List<TimeValue>> other_element_value = other_element.getValue();

        String __this__result_copy_key = other_element_key;

        Map<String,List<TimeValue>> __this__result_copy_value = new HashMap<String,List<TimeValue>>(other_element_value.size());
        for (Map.Entry<String, List<TimeValue>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          List<TimeValue> other_element_value_element_value = other_element_value_element.getValue();

          String __this__result_copy_value_copy_key = other_element_value_element_key;

          List<TimeValue> __this__result_copy_value_copy_value = new ArrayList<TimeValue>(other_element_value_element_value.size());
          for (TimeValue other_element_value_element_value_element : other_element_value_element_value) {
            __this__result_copy_value_copy_value.add(new TimeValue(other_element_value_element_value_element));
          }

          __this__result_copy_value.put(__this__result_copy_value_copy_key, __this__result_copy_value_copy_value);
        }

        __this__result.put(__this__result_copy_key, __this__result_copy_value);
      }
      this.result = __this__result;
    }
  }

  public OdsGetResult deepCopy() {
    return new OdsGetResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
  }

  public int getResultSize() {
    return (this.result == null) ? 0 : this.result.size();
  }

  public void putToResult(String key, Map<String,List<TimeValue>> val) {
    if (this.result == null) {
      this.result = new HashMap<String,Map<String,List<TimeValue>>>();
    }
    this.result.put(key, val);
  }

  public Map<String,Map<String,List<TimeValue>>> getResult() {
    return this.result;
  }

  public OdsGetResult setResult(Map<String,Map<String,List<TimeValue>>> result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Map<String,Map<String,List<TimeValue>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OdsGetResult)
      return this.equals((OdsGetResult)that);
    return false;
  }

  public boolean equals(OdsGetResult that) {
    if (that == null)
      return false;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    return list.hashCode();
  }

  @Override
  public int compareTo(OdsGetResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OdsGetResult(");
    boolean first = true;

    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OdsGetResultStandardSchemeFactory implements SchemeFactory {
    public OdsGetResultStandardScheme getScheme() {
      return new OdsGetResultStandardScheme();
    }
  }

  private static class OdsGetResultStandardScheme extends StandardScheme<OdsGetResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OdsGetResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin();
                struct.result = new HashMap<String,Map<String,List<TimeValue>>>(2*_map118.size);
                String _key119;
                Map<String,List<TimeValue>> _val120;
                for (int _i121 = 0; _i121 < _map118.size; ++_i121)
                {
                  _key119 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map122 = iprot.readMapBegin();
                    _val120 = new HashMap<String,List<TimeValue>>(2*_map122.size);
                    String _key123;
                    List<TimeValue> _val124;
                    for (int _i125 = 0; _i125 < _map122.size; ++_i125)
                    {
                      _key123 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                        _val124 = new ArrayList<TimeValue>(_list126.size);
                        TimeValue _elem127;
                        for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                        {
                          _elem127 = new TimeValue();
                          _elem127.read(iprot);
                          _val124.add(_elem127);
                        }
                        iprot.readListEnd();
                      }
                      _val120.put(_key123, _val124);
                    }
                    iprot.readMapEnd();
                  }
                  struct.result.put(_key119, _val120);
                }
                iprot.readMapEnd();
              }
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OdsGetResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.result.size()));
          for (Map.Entry<String, Map<String,List<TimeValue>>> _iter129 : struct.result.entrySet())
          {
            oprot.writeString(_iter129.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter129.getValue().size()));
              for (Map.Entry<String, List<TimeValue>> _iter130 : _iter129.getValue().entrySet())
              {
                oprot.writeString(_iter130.getKey());
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter130.getValue().size()));
                  for (TimeValue _iter131 : _iter130.getValue())
                  {
                    _iter131.write(oprot);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OdsGetResultTupleSchemeFactory implements SchemeFactory {
    public OdsGetResultTupleScheme getScheme() {
      return new OdsGetResultTupleScheme();
    }
  }

  private static class OdsGetResultTupleScheme extends TupleScheme<OdsGetResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OdsGetResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResult()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResult()) {
        {
          oprot.writeI32(struct.result.size());
          for (Map.Entry<String, Map<String,List<TimeValue>>> _iter132 : struct.result.entrySet())
          {
            oprot.writeString(_iter132.getKey());
            {
              oprot.writeI32(_iter132.getValue().size());
              for (Map.Entry<String, List<TimeValue>> _iter133 : _iter132.getValue().entrySet())
              {
                oprot.writeString(_iter133.getKey());
                {
                  oprot.writeI32(_iter133.getValue().size());
                  for (TimeValue _iter134 : _iter133.getValue())
                  {
                    _iter134.write(oprot);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OdsGetResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map135 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.result = new HashMap<String,Map<String,List<TimeValue>>>(2*_map135.size);
          String _key136;
          Map<String,List<TimeValue>> _val137;
          for (int _i138 = 0; _i138 < _map135.size; ++_i138)
          {
            _key136 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map139 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _val137 = new HashMap<String,List<TimeValue>>(2*_map139.size);
              String _key140;
              List<TimeValue> _val141;
              for (int _i142 = 0; _i142 < _map139.size; ++_i142)
              {
                _key140 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                  _val141 = new ArrayList<TimeValue>(_list143.size);
                  TimeValue _elem144;
                  for (int _i145 = 0; _i145 < _list143.size; ++_i145)
                  {
                    _elem144 = new TimeValue();
                    _elem144.read(iprot);
                    _val141.add(_elem144);
                  }
                }
                _val137.put(_key140, _val141);
              }
            }
            struct.result.put(_key136, _val137);
          }
        }
        struct.setResultIsSet(true);
      }
    }
  }

}

