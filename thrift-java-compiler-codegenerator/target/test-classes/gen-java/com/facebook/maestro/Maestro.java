/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.maestro;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-22")
public class Maestro {

  public interface Iface extends com.facebook.fb303.FacebookService.Iface {

    public void setOdsValues(List<ODSAppValue> data) throws OdsException, org.apache.thrift.TException;

    /**
     * For ODS router called by aggregation Service used only,
     * to set aggregated values back to ODS aggregation table
     * @param data            list of aggregated values
     * 
     * @param data
     */
    public void setOdsAggValues(List<OdsAggValue> data) throws OdsException, org.apache.thrift.TException;

    public void setOdsRollupValues(List<ODSAppValue> data) throws OdsException, org.apache.thrift.TException;

    public void setOdsRateOfChangeValues(List<ODSRateOfChangeValue> data) throws OdsException, org.apache.thrift.TException;

    public void setOdsValuesWithHostRollup(List<ODSValue> data, boolean doHostRollup) throws OdsException, org.apache.thrift.TException;

    public List<TimeValue> getOdsValues(String entity, String key, long start, long end_, OdsDataTable table, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public void setOdsHistoricalData(List<ODSAppValue> data) throws OdsException, org.apache.thrift.TException;

    public void deleteOdsHistoricalData(List<ODSHistoricalPurgeDefn> data) throws OdsException, org.apache.thrift.TException;

    public Map<String,List<ODSSnapshotValue>> getSnapshotWithFilters(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex) throws org.apache.thrift.TException;

    /**
     * Retrieve snapshot data, return given result in a compressed zlib
     * string format.
     * @param entities    list of entities to query
     * @param keys        list of keys to query
     * @param timestamp   time to look for data; data will be search from this
     *                    time to the past for values.  Use current time to view
     *                    the current snapshot.
     * @param filter      For filtering data by regex in entities or by value
     *                    criteria
     * @param findMissingValue
     *                    If true, the query look for any entities matched
     *                    but did not retrieve a value, then treat them as host
     *                    name and query system.cpu-idle to see if they are
     *                    alive.  If they are, the alive flag will be set.
     *                    (see result for details)
     * @param periodOverride
     *                    A snapshot value is retrieving the latest value
     *                    given from the specified time to some default range
     *                    of value depending on the table we need to query
     *                    If the data you queried as submitting data less
     *                    frquent than per 4 min, you might need to change
     *                    this override time to query for longer period.
     *                    Please note that the longer you query, the slower
     *                    the query will be, so use only what you need.
     * @param entitYIsRegex
     *                    true if the entities specified is in regex
     * @param keyIsRegex  true if the keys specified is in regex
     * 
     * @return  a map of key name to compressed strings.  The string values
     * are compressed by Zlib and when uncompressed, are in the following
     * format:
     * <entity>|<value>|<valid>|<alive>#@#<entity>|<value>|<valid><alive>...
     * where
     * entity is the entity name, value is the numerical or string values,
     * valid is true if data is retrieved for this entity when findMissingValue
     * is turned on, and alive is true if data is missing but the entity has
     * data for system.cpu-idle at that time period.
     * 
     * @param entities
     * @param keys
     * @param timeStamp
     * @param filter
     * @param findMissingValue
     * @param periodOverride
     * @param entityIsRegex
     * @param keyIsRegex
     */
    public Map<String,String> getSnapshotCompressed(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex) throws org.apache.thrift.TException;

    public Map<String,Map<String,List<TimeValue>>> getEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public GetTimeSeriesResults getTimeSeries(GetTimeSeriesParams query) throws OdsException, org.apache.thrift.TException;

    public Map<String,Map<String,String>> getEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public Map<String,Map<String,List<TimeValue>>> getRegexEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public Map<String,Map<String,String>> getRegexEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public AggEntityValue getEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public AggEntityValue getRegexEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType) throws OdsException, org.apache.thrift.TException;

    public String getAggSources(boolean rgex, List<String> entities, List<String> keys, long start, long end_, int window) throws org.apache.thrift.TException;

    /**
     * API that allows much tweaks in calculating and retrieving ODS
     * time series.  ODS chart page uses this.
     * 
     * @param regex      true if the entities is specified in regular expression
     * @param entities   list of entity names
     * @param keys       list of key names
     * @param start      start unix time in seconds
     * @param end        end unix time in seconds
     * @param table      table to query
     * @param type       adhoc aggregation type (bitmap)
     * @param window     the bucket window for adhoc aggregation
     * @param transformConfig       a json config string to tell the types of transformation needed
     * @param aggregationTypeBitMap roll up aggregation type (bitmap)
     * @param bestFitDegree         best fit degree.  If 0, no best fit curve is calculated.  If > 0,
     * this will be the mth degree for calculating best-fit curve by
     * least squares.
     * @param transformDataSources   if specified, this is the list of data sources
     * @param topNOpts   top n option
     * 
     * @return a map of OdsAggregationType to TransformResult. TransformResult is a complex
     * data type as follow:
     * struct TransformResult {
     *   1: map<string, map<string, string>> values;
     *   2: set<string> entities;
     * }
     * 
     * Note that the member values is again a map of map. The meanings are shown below:
     * 
     * map<string,      map<string, string>>
     *       |               |         |
     *       V               V         V
     * map<entity_name, map<key, data_json>
     * 
     * @param regex
     * @param entities
     * @param keys
     * @param start
     * @param end_
     * @param table
     * @param type
     * @param window
     * @param transformConfig
     * @param aggregationTypeBitMap
     * @param bestFitDegree
     * @param transformDataSources
     * @param topNOpts
     */
    public Map<OdsAggregationType,TransformResult> getOdsTimeSeriesByAggregationType(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts) throws org.apache.thrift.TException;

    /**
     * API that allows much tweaks in calculating and retrieving ODS
     * time series in a zlib string format.  ODS chart page uses this.
     * 
     * @param regex      true if the entities is specified in regular expression
     * @param entities   list of entity names
     * @param keys       list of key names
     * @param start      start unix time in seconds
     * @param end        end unix time in seconds
     * @param table      table to query
     * @param type       adhoc aggregation type (bitmap)
     * @param window     the bucket window for adhoc aggregation
     * @param transformConfig       a json config string to tell the types of transformation needed
     * @param aggregationTypeBitMap roll up aggregation type (bitmap)
     * @param bestFitDegree         best fit degree.  If 0, no best fit curve is calculated.  If > 0,
     * this will be the mth degree for calculating best-fit curve by
     * least squares.
     * @param transformDataSources   if specified, this is the list of data sources
     * @param topNOpts   top n option
     * 
     * @return a map of OdsAggregationType to TransformResult. TransformResult is a complex
     * data type as follow:
     * struct TransformResult {
     *   1: map<string, map<string, string>> values;
     *   2: set<string> entities;
     * }
     * 
     * Note that the member values is again a map of map. The meanings are shown below:
     * 
     * map<string,      map<string, string>>
     *       |               |         |
     *       V               V         V
     * map<entity_name, map<key, data_json>
     * 
     * This function will compress data_json string with zlib.
     * 
     * @param regex
     * @param entities
     * @param keys
     * @param start
     * @param end_
     * @param table
     * @param type
     * @param window
     * @param transformConfig
     * @param aggregationTypeBitMap
     * @param bestFitDegree
     * @param transformDataSources
     * @param topNOpts
     */
    public Map<OdsAggregationType,TransformResult> getOdsTimeSeriesByAggregationTypeCompressed(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts) throws org.apache.thrift.TException;

    /**
     * API that allows gets timeseries per aggregation type using a bitmap
     * of aggregation types. See OdsAggregationType for the values that
     * can be used to build up the bitmap.
     * 
     * @param entities                list of entity names
     * @param keys                    list of key names
     * @param start                   start unix time in seconds
     * @param end                     end unix time in seconds
     * @param table                   table to query
     * @param window                  the bucket window for adhoc aggregation
     * @param aggregationTypeBitMap   roll up aggregation type (bitmap)
     * 
     * @return a map of OdsAggregationType to OdsGetResults
     * 
     * @param entities
     * @param keys
     * @param start
     * @param end_
     * @param table
     * @param window
     * @param aggregationTypeBitMap
     */
    public Map<OdsAggregationType,OdsGetResult> getOdsTimeSeriesSimple(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap) throws org.apache.thrift.TException;

    /**
     * API that allows gets timeseries per aggregation type using a bitmap
     * of aggregation types. See OdsAggregationType for the values that
     * can be used to build up the bitmap.
     * This version allows tracing.
     * 
     * @param query                   structure that holds all parameters
     * 
     * @return results holder structure
     * 
     * @param query
     */
    public GetTimeSeriesByAggTypeResults getTimeSeriesByAggType(GetTimeSeriesByAggTypeParams query) throws org.apache.thrift.TException;

    /**
     * Similar to above API, except the data per aggregation type is in
     * the form of zlib compressed, thrift serialized strings of OdsGetResults.
     * The charts and dashboards will use this API.
     * 
     * @param entities                list of entity names
     * @param keys                    list of key names
     * @param start                   start unix time in seconds
     * @param end                     end unix time in seconds
     * @param table                   table to query
     * @param window                  the bucket window for adhoc aggregation
     * @param aggregationTypeBitMap   roll up aggregation type (bitmap)
     * 
     * @return a map of OdsAggregationType to zlib compressed string
     *  representing a serialized, compressed OdsGetResult
     * 
     * @param entities
     * @param keys
     * @param start
     * @param end_
     * @param table
     * @param window
     * @param aggregationTypeBitMap
     */
    public Map<OdsAggregationType,String> getOdsTimeSeriesSimpleCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap) throws org.apache.thrift.TException;

    public List<String> getAdvancedTransformQuery(long start_date, long end_date, String dataJSON, String configJSON) throws OdsException, org.apache.thrift.TException;

    public List<KeyStat> getTopNActiveKeyPrefix(int n) throws org.apache.thrift.TException;

    public void setMultipleOdsValues(List<ODSValue> data) throws OdsException, org.apache.thrift.TException;

    public void setODSData(List<ODSData> data) throws OdsException, org.apache.thrift.TException;

    public void setOdsFbagentHostData(List<ODSFbagentData> data) throws OdsException, org.apache.thrift.TException;

    public void setOdsFbagentData(List<ODSFbagentData> data, boolean skiphostdata) throws OdsException, org.apache.thrift.TException;

    public List<String> getEntityNames() throws org.apache.thrift.TException;

    public List<String> getKeyNames() throws org.apache.thrift.TException;

    public Map<String,List<String>> getKeyMapping(List<String> entities, long minutes_back) throws org.apache.thrift.TException;

    public Map<String,List<String>> getEntityMapping(List<String> keys, long minutes_back) throws org.apache.thrift.TException;

    public Set<String> getAggregateEntityNames(String regexp) throws org.apache.thrift.TException;

    public Map<String,List<String>> getMapping(List<String> entities, long minutes_back, boolean get_key) throws OdsException, org.apache.thrift.TException;

    /**
     * for a given entity, find corresponding keys
     * 
     * @param keywords
     * @param entities
     * @param minutes_back
     * @param limit
     */
    public OdsKeyEntityMapperResult getCorrespondingKeys(List<String> keywords, List<String> entities, int minutes_back, int limit) throws OdsException, org.apache.thrift.TException;

    /**
     * for a given key, find corresponding entities.
     * 
     * @param keywords
     * @param keys
     * @param minutes_back
     * @param limit
     */
    public OdsKeyEntityMapperResult getCorrespondingEntities(List<String> keywords, List<String> keys, int minutes_back, int limit) throws OdsException, org.apache.thrift.TException;

    /**
     * For an entity type, and an optional list of regular expressions,
     * find the entities. if the regexes are empty, then none will be used.
     * an OR operation is performed on the regexes.
     * 
     * @param entity_type   Entity type ID, see OdsEntityGroupTypes for the value.
     *                      Or
     *                      -1 for everything using cache,
     *                      -2 for everything using DB data.
     * 
     * 
     * @param entity_type
     * @param limit
     * @param ordering
     * @param regexes
     */
    public OdsKeyEntityMapperResult getEntitiesByTypeAndRegexs(int entity_type, int limit, OdsEntityOrderByType ordering, List<String> regexes) throws OdsException, org.apache.thrift.TException;

    /**
     * for a set of keywords, find the keys by regexes. it does an OR
     * operation for the regexes.
     * if no keywords are specified, nothing is returned.
     * 
     * @param keywords
     * @param limit
     * @param use_cdbdao
     */
    public OdsKeyEntityMapperResult getKeysByRegexs(List<String> keywords, int limit, boolean use_cdbdao) throws OdsException, org.apache.thrift.TException;

    /**
     * get all alive prefixes for numeric keys
     * 
     * @param returnKeysWithNoDelimiter
     * @param limit
     */
    public List<String> getAllAliveNumericKeyPrefixes(boolean returnKeysWithNoDelimiter, int limit) throws OdsException, org.apache.thrift.TException;

    /**
     * get numeric keys that are alive with the passed in prefix.
     * 
     * @param prefix
     * @param limit
     */
    public List<String> getAllAliveNumericKeys(String prefix, int limit) throws OdsException, org.apache.thrift.TException;

    /**
     * get all keys that match the prefix and type
     * 
     * @param prefix
     * @param key_type
     */
    public List<String> getAllKeys(String prefix, int key_type) throws org.apache.thrift.TException;

    /**
     * get global aggregation entities that match "%.global"
     */
    public List<String> getGlobalAggregationEntities() throws org.apache.thrift.TException;

    /**
     * for a given keyword, says if there is an exact match.
     * it works for both keys an entities.
     * 
     * @param keyword_to_search
     * @param is_entity
     */
    public boolean findExactMatch(String keyword_to_search, boolean is_entity) throws org.apache.thrift.TException;

    /**
     * search for key or entity by doing an AND operation
     * 
     * @param keywords
     * @param limit
     * @param is_entity
     */
    public OdsKeyEntityMapperResult searchEntityOrKey(List<String> keywords, int limit, boolean is_entity) throws OdsException, org.apache.thrift.TException;

    /**
     * given an entity_id, return all the name of the entities that
     * have higher id number than the given entity_id.
     * 
     * @param entity_id
     */
    public RecentEntitiesOrKeys getRecentEntities(int entity_id) throws org.apache.thrift.TException;

    /**
     * given an key_id, return all the name of the keys that
     * have higher id number than the given key_id.
     * 
     * @param key_id
     */
    public RecentEntitiesOrKeys getRecentKeys(int key_id) throws org.apache.thrift.TException;

    /**
     * given an entity name, return its id. Goes through the cache layer.
     * 
     * @param name
     */
    public long getEntityIdByName(String name) throws OdsException, org.apache.thrift.TException;

    /**
     * get the max entity id in CdbDAO.
     */
    public long getMaxEntityId() throws org.apache.thrift.TException;

    /**
     * given a key name, return key id. Goes through the cache layer.
     * 
     * @param name
     */
    public long getKeyIdByName(String name) throws OdsException, org.apache.thrift.TException;

    /**
     * get the max entity id in CdbDAO.
     */
    public long getMaxKeyId() throws org.apache.thrift.TException;

    /**
     * given an entity id, return its DDB. Goes through the cache layer.
     * 
     * @param entityId
     */
    public long getDdbIdByEntityId(long entityId) throws OdsException, org.apache.thrift.TException;

    /**
     * given an entity_id, return the aggregate DDB id. Goes through the cache
     * layer.
     * 
     * @param entityId
     */
    public long getAggregateDdbIdByEntityId(long entityId) throws OdsException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.facebook.fb303.FacebookService .AsyncIface {

    public void setOdsValues(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsAggValues(List<OdsAggValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsRollupValues(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsRateOfChangeValues(List<ODSRateOfChangeValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsValuesWithHostRollup(List<ODSValue> data, boolean doHostRollup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOdsValues(String entity, String key, long start, long end_, OdsDataTable table, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsHistoricalData(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOdsHistoricalData(List<ODSHistoricalPurgeDefn> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSnapshotWithFilters(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSnapshotCompressed(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTimeSeries(GetTimeSeriesParams query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegexEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegexEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegexEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAggSources(boolean rgex, List<String> entities, List<String> keys, long start, long end_, int window, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOdsTimeSeriesByAggregationType(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOdsTimeSeriesByAggregationTypeCompressed(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOdsTimeSeriesSimple(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTimeSeriesByAggType(GetTimeSeriesByAggTypeParams query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOdsTimeSeriesSimpleCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAdvancedTransformQuery(long start_date, long end_date, String dataJSON, String configJSON, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopNActiveKeyPrefix(int n, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setMultipleOdsValues(List<ODSValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setODSData(List<ODSData> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsFbagentHostData(List<ODSFbagentData> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOdsFbagentData(List<ODSFbagentData> data, boolean skiphostdata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getKeyNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getKeyMapping(List<String> entities, long minutes_back, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityMapping(List<String> keys, long minutes_back, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAggregateEntityNames(String regexp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMapping(List<String> entities, long minutes_back, boolean get_key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCorrespondingKeys(List<String> keywords, List<String> entities, int minutes_back, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCorrespondingEntities(List<String> keywords, List<String> keys, int minutes_back, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntitiesByTypeAndRegexs(int entity_type, int limit, OdsEntityOrderByType ordering, List<String> regexes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getKeysByRegexs(List<String> keywords, int limit, boolean use_cdbdao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllAliveNumericKeyPrefixes(boolean returnKeysWithNoDelimiter, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllAliveNumericKeys(String prefix, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllKeys(String prefix, int key_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGlobalAggregationEntities(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findExactMatch(String keyword_to_search, boolean is_entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchEntityOrKey(List<String> keywords, int limit, boolean is_entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecentEntities(int entity_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecentKeys(int key_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityIdByName(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMaxEntityId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getKeyIdByName(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMaxKeyId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDdbIdByEntityId(long entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAggregateDdbIdByEntityId(long entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void setOdsValues(List<ODSAppValue> data) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsValues(data);
      recv_setOdsValues();
    }

    public void send_setOdsValues(List<ODSAppValue> data) throws org.apache.thrift.TException
    {
      setOdsValues_args args = new setOdsValues_args();
      args.setData(data);
      sendBase("setOdsValues", args);
    }

    public void recv_setOdsValues() throws OdsException, org.apache.thrift.TException
    {
      setOdsValues_result result = new setOdsValues_result();
      receiveBase(result, "setOdsValues");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setOdsAggValues(List<OdsAggValue> data) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsAggValues(data);
      recv_setOdsAggValues();
    }

    public void send_setOdsAggValues(List<OdsAggValue> data) throws org.apache.thrift.TException
    {
      setOdsAggValues_args args = new setOdsAggValues_args();
      args.setData(data);
      sendBase("setOdsAggValues", args);
    }

    public void recv_setOdsAggValues() throws OdsException, org.apache.thrift.TException
    {
      setOdsAggValues_result result = new setOdsAggValues_result();
      receiveBase(result, "setOdsAggValues");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setOdsRollupValues(List<ODSAppValue> data) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsRollupValues(data);
      recv_setOdsRollupValues();
    }

    public void send_setOdsRollupValues(List<ODSAppValue> data) throws org.apache.thrift.TException
    {
      setOdsRollupValues_args args = new setOdsRollupValues_args();
      args.setData(data);
      sendBase("setOdsRollupValues", args);
    }

    public void recv_setOdsRollupValues() throws OdsException, org.apache.thrift.TException
    {
      setOdsRollupValues_result result = new setOdsRollupValues_result();
      receiveBase(result, "setOdsRollupValues");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setOdsRateOfChangeValues(List<ODSRateOfChangeValue> data) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsRateOfChangeValues(data);
      recv_setOdsRateOfChangeValues();
    }

    public void send_setOdsRateOfChangeValues(List<ODSRateOfChangeValue> data) throws org.apache.thrift.TException
    {
      setOdsRateOfChangeValues_args args = new setOdsRateOfChangeValues_args();
      args.setData(data);
      sendBase("setOdsRateOfChangeValues", args);
    }

    public void recv_setOdsRateOfChangeValues() throws OdsException, org.apache.thrift.TException
    {
      setOdsRateOfChangeValues_result result = new setOdsRateOfChangeValues_result();
      receiveBase(result, "setOdsRateOfChangeValues");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setOdsValuesWithHostRollup(List<ODSValue> data, boolean doHostRollup) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsValuesWithHostRollup(data, doHostRollup);
      recv_setOdsValuesWithHostRollup();
    }

    public void send_setOdsValuesWithHostRollup(List<ODSValue> data, boolean doHostRollup) throws org.apache.thrift.TException
    {
      setOdsValuesWithHostRollup_args args = new setOdsValuesWithHostRollup_args();
      args.setData(data);
      args.setDoHostRollup(doHostRollup);
      sendBase("setOdsValuesWithHostRollup", args);
    }

    public void recv_setOdsValuesWithHostRollup() throws OdsException, org.apache.thrift.TException
    {
      setOdsValuesWithHostRollup_result result = new setOdsValuesWithHostRollup_result();
      receiveBase(result, "setOdsValuesWithHostRollup");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public List<TimeValue> getOdsValues(String entity, String key, long start, long end_, OdsDataTable table, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getOdsValues(entity, key, start, end_, table, aggregationType);
      return recv_getOdsValues();
    }

    public void send_getOdsValues(String entity, String key, long start, long end_, OdsDataTable table, int aggregationType) throws org.apache.thrift.TException
    {
      getOdsValues_args args = new getOdsValues_args();
      args.setEntity(entity);
      args.setKey(key);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setAggregationType(aggregationType);
      sendBase("getOdsValues", args);
    }

    public List<TimeValue> recv_getOdsValues() throws OdsException, org.apache.thrift.TException
    {
      getOdsValues_result result = new getOdsValues_result();
      receiveBase(result, "getOdsValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOdsValues failed: unknown result");
    }

    public void setOdsHistoricalData(List<ODSAppValue> data) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsHistoricalData(data);
      recv_setOdsHistoricalData();
    }

    public void send_setOdsHistoricalData(List<ODSAppValue> data) throws org.apache.thrift.TException
    {
      setOdsHistoricalData_args args = new setOdsHistoricalData_args();
      args.setData(data);
      sendBase("setOdsHistoricalData", args);
    }

    public void recv_setOdsHistoricalData() throws OdsException, org.apache.thrift.TException
    {
      setOdsHistoricalData_result result = new setOdsHistoricalData_result();
      receiveBase(result, "setOdsHistoricalData");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void deleteOdsHistoricalData(List<ODSHistoricalPurgeDefn> data) throws OdsException, org.apache.thrift.TException
    {
      send_deleteOdsHistoricalData(data);
      recv_deleteOdsHistoricalData();
    }

    public void send_deleteOdsHistoricalData(List<ODSHistoricalPurgeDefn> data) throws org.apache.thrift.TException
    {
      deleteOdsHistoricalData_args args = new deleteOdsHistoricalData_args();
      args.setData(data);
      sendBase("deleteOdsHistoricalData", args);
    }

    public void recv_deleteOdsHistoricalData() throws OdsException, org.apache.thrift.TException
    {
      deleteOdsHistoricalData_result result = new deleteOdsHistoricalData_result();
      receiveBase(result, "deleteOdsHistoricalData");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public Map<String,List<ODSSnapshotValue>> getSnapshotWithFilters(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex) throws org.apache.thrift.TException
    {
      send_getSnapshotWithFilters(entities, keys, timeStamp, filter, findMissingValue, periodOverride, entityIsRegex, keyIsRegex);
      return recv_getSnapshotWithFilters();
    }

    public void send_getSnapshotWithFilters(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex) throws org.apache.thrift.TException
    {
      getSnapshotWithFilters_args args = new getSnapshotWithFilters_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setTimeStamp(timeStamp);
      args.setFilter(filter);
      args.setFindMissingValue(findMissingValue);
      args.setPeriodOverride(periodOverride);
      args.setEntityIsRegex(entityIsRegex);
      args.setKeyIsRegex(keyIsRegex);
      sendBase("getSnapshotWithFilters", args);
    }

    public Map<String,List<ODSSnapshotValue>> recv_getSnapshotWithFilters() throws org.apache.thrift.TException
    {
      getSnapshotWithFilters_result result = new getSnapshotWithFilters_result();
      receiveBase(result, "getSnapshotWithFilters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSnapshotWithFilters failed: unknown result");
    }

    public Map<String,String> getSnapshotCompressed(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex) throws org.apache.thrift.TException
    {
      send_getSnapshotCompressed(entities, keys, timeStamp, filter, findMissingValue, periodOverride, entityIsRegex, keyIsRegex);
      return recv_getSnapshotCompressed();
    }

    public void send_getSnapshotCompressed(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex) throws org.apache.thrift.TException
    {
      getSnapshotCompressed_args args = new getSnapshotCompressed_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setTimeStamp(timeStamp);
      args.setFilter(filter);
      args.setFindMissingValue(findMissingValue);
      args.setPeriodOverride(periodOverride);
      args.setEntityIsRegex(entityIsRegex);
      args.setKeyIsRegex(keyIsRegex);
      sendBase("getSnapshotCompressed", args);
    }

    public Map<String,String> recv_getSnapshotCompressed() throws org.apache.thrift.TException
    {
      getSnapshotCompressed_result result = new getSnapshotCompressed_result();
      receiveBase(result, "getSnapshotCompressed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSnapshotCompressed failed: unknown result");
    }

    public Map<String,Map<String,List<TimeValue>>> getEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getEntityValues(entities, keys, start, end_, table, window, aggregationType);
      return recv_getEntityValues();
    }

    public void send_getEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws org.apache.thrift.TException
    {
      getEntityValues_args args = new getEntityValues_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setWindow(window);
      args.setAggregationType(aggregationType);
      sendBase("getEntityValues", args);
    }

    public Map<String,Map<String,List<TimeValue>>> recv_getEntityValues() throws OdsException, org.apache.thrift.TException
    {
      getEntityValues_result result = new getEntityValues_result();
      receiveBase(result, "getEntityValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityValues failed: unknown result");
    }

    public GetTimeSeriesResults getTimeSeries(GetTimeSeriesParams query) throws OdsException, org.apache.thrift.TException
    {
      send_getTimeSeries(query);
      return recv_getTimeSeries();
    }

    public void send_getTimeSeries(GetTimeSeriesParams query) throws org.apache.thrift.TException
    {
      getTimeSeries_args args = new getTimeSeries_args();
      args.setQuery(query);
      sendBase("getTimeSeries", args);
    }

    public GetTimeSeriesResults recv_getTimeSeries() throws OdsException, org.apache.thrift.TException
    {
      getTimeSeries_result result = new getTimeSeries_result();
      receiveBase(result, "getTimeSeries");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimeSeries failed: unknown result");
    }

    public Map<String,Map<String,String>> getEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getEntityValuesCompressed(entities, keys, start, end_, table, window, aggregationType);
      return recv_getEntityValuesCompressed();
    }

    public void send_getEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws org.apache.thrift.TException
    {
      getEntityValuesCompressed_args args = new getEntityValuesCompressed_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setWindow(window);
      args.setAggregationType(aggregationType);
      sendBase("getEntityValuesCompressed", args);
    }

    public Map<String,Map<String,String>> recv_getEntityValuesCompressed() throws OdsException, org.apache.thrift.TException
    {
      getEntityValuesCompressed_result result = new getEntityValuesCompressed_result();
      receiveBase(result, "getEntityValuesCompressed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityValuesCompressed failed: unknown result");
    }

    public Map<String,Map<String,List<TimeValue>>> getRegexEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getRegexEntityValues(entities, keys, start, end_, table, window, aggregationType);
      return recv_getRegexEntityValues();
    }

    public void send_getRegexEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws org.apache.thrift.TException
    {
      getRegexEntityValues_args args = new getRegexEntityValues_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setWindow(window);
      args.setAggregationType(aggregationType);
      sendBase("getRegexEntityValues", args);
    }

    public Map<String,Map<String,List<TimeValue>>> recv_getRegexEntityValues() throws OdsException, org.apache.thrift.TException
    {
      getRegexEntityValues_result result = new getRegexEntityValues_result();
      receiveBase(result, "getRegexEntityValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegexEntityValues failed: unknown result");
    }

    public Map<String,Map<String,String>> getRegexEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getRegexEntityValuesCompressed(entities, keys, start, end_, table, window, aggregationType);
      return recv_getRegexEntityValuesCompressed();
    }

    public void send_getRegexEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType) throws org.apache.thrift.TException
    {
      getRegexEntityValuesCompressed_args args = new getRegexEntityValuesCompressed_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setWindow(window);
      args.setAggregationType(aggregationType);
      sendBase("getRegexEntityValuesCompressed", args);
    }

    public Map<String,Map<String,String>> recv_getRegexEntityValuesCompressed() throws OdsException, org.apache.thrift.TException
    {
      getRegexEntityValuesCompressed_result result = new getRegexEntityValuesCompressed_result();
      receiveBase(result, "getRegexEntityValuesCompressed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegexEntityValuesCompressed failed: unknown result");
    }

    public AggEntityValue getEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getEntityAggValues(entities, keys, start, end_, table, type, window, bypassLimit, aggregationType);
      return recv_getEntityAggValues();
    }

    public void send_getEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType) throws org.apache.thrift.TException
    {
      getEntityAggValues_args args = new getEntityAggValues_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setType(type);
      args.setWindow(window);
      args.setBypassLimit(bypassLimit);
      args.setAggregationType(aggregationType);
      sendBase("getEntityAggValues", args);
    }

    public AggEntityValue recv_getEntityAggValues() throws OdsException, org.apache.thrift.TException
    {
      getEntityAggValues_result result = new getEntityAggValues_result();
      receiveBase(result, "getEntityAggValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityAggValues failed: unknown result");
    }

    public AggEntityValue getRegexEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType) throws OdsException, org.apache.thrift.TException
    {
      send_getRegexEntityAggValues(entities, keys, start, end_, table, type, window, bypassLimit, aggregationType);
      return recv_getRegexEntityAggValues();
    }

    public void send_getRegexEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType) throws org.apache.thrift.TException
    {
      getRegexEntityAggValues_args args = new getRegexEntityAggValues_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setType(type);
      args.setWindow(window);
      args.setBypassLimit(bypassLimit);
      args.setAggregationType(aggregationType);
      sendBase("getRegexEntityAggValues", args);
    }

    public AggEntityValue recv_getRegexEntityAggValues() throws OdsException, org.apache.thrift.TException
    {
      getRegexEntityAggValues_result result = new getRegexEntityAggValues_result();
      receiveBase(result, "getRegexEntityAggValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegexEntityAggValues failed: unknown result");
    }

    public String getAggSources(boolean rgex, List<String> entities, List<String> keys, long start, long end_, int window) throws org.apache.thrift.TException
    {
      send_getAggSources(rgex, entities, keys, start, end_, window);
      return recv_getAggSources();
    }

    public void send_getAggSources(boolean rgex, List<String> entities, List<String> keys, long start, long end_, int window) throws org.apache.thrift.TException
    {
      getAggSources_args args = new getAggSources_args();
      args.setRgex(rgex);
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setWindow(window);
      sendBase("getAggSources", args);
    }

    public String recv_getAggSources() throws org.apache.thrift.TException
    {
      getAggSources_result result = new getAggSources_result();
      receiveBase(result, "getAggSources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAggSources failed: unknown result");
    }

    public Map<OdsAggregationType,TransformResult> getOdsTimeSeriesByAggregationType(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts) throws org.apache.thrift.TException
    {
      send_getOdsTimeSeriesByAggregationType(regex, entities, keys, start, end_, table, type, window, transformConfig, aggregationTypeBitMap, bestFitDegree, transformDataSources, topNOpts);
      return recv_getOdsTimeSeriesByAggregationType();
    }

    public void send_getOdsTimeSeriesByAggregationType(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts) throws org.apache.thrift.TException
    {
      getOdsTimeSeriesByAggregationType_args args = new getOdsTimeSeriesByAggregationType_args();
      args.setRegex(regex);
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setType(type);
      args.setWindow(window);
      args.setTransformConfig(transformConfig);
      args.setAggregationTypeBitMap(aggregationTypeBitMap);
      args.setBestFitDegree(bestFitDegree);
      args.setTransformDataSources(transformDataSources);
      args.setTopNOpts(topNOpts);
      sendBase("getOdsTimeSeriesByAggregationType", args);
    }

    public Map<OdsAggregationType,TransformResult> recv_getOdsTimeSeriesByAggregationType() throws org.apache.thrift.TException
    {
      getOdsTimeSeriesByAggregationType_result result = new getOdsTimeSeriesByAggregationType_result();
      receiveBase(result, "getOdsTimeSeriesByAggregationType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOdsTimeSeriesByAggregationType failed: unknown result");
    }

    public Map<OdsAggregationType,TransformResult> getOdsTimeSeriesByAggregationTypeCompressed(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts) throws org.apache.thrift.TException
    {
      send_getOdsTimeSeriesByAggregationTypeCompressed(regex, entities, keys, start, end_, table, type, window, transformConfig, aggregationTypeBitMap, bestFitDegree, transformDataSources, topNOpts);
      return recv_getOdsTimeSeriesByAggregationTypeCompressed();
    }

    public void send_getOdsTimeSeriesByAggregationTypeCompressed(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts) throws org.apache.thrift.TException
    {
      getOdsTimeSeriesByAggregationTypeCompressed_args args = new getOdsTimeSeriesByAggregationTypeCompressed_args();
      args.setRegex(regex);
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setType(type);
      args.setWindow(window);
      args.setTransformConfig(transformConfig);
      args.setAggregationTypeBitMap(aggregationTypeBitMap);
      args.setBestFitDegree(bestFitDegree);
      args.setTransformDataSources(transformDataSources);
      args.setTopNOpts(topNOpts);
      sendBase("getOdsTimeSeriesByAggregationTypeCompressed", args);
    }

    public Map<OdsAggregationType,TransformResult> recv_getOdsTimeSeriesByAggregationTypeCompressed() throws org.apache.thrift.TException
    {
      getOdsTimeSeriesByAggregationTypeCompressed_result result = new getOdsTimeSeriesByAggregationTypeCompressed_result();
      receiveBase(result, "getOdsTimeSeriesByAggregationTypeCompressed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOdsTimeSeriesByAggregationTypeCompressed failed: unknown result");
    }

    public Map<OdsAggregationType,OdsGetResult> getOdsTimeSeriesSimple(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap) throws org.apache.thrift.TException
    {
      send_getOdsTimeSeriesSimple(entities, keys, start, end_, table, window, aggregationTypeBitMap);
      return recv_getOdsTimeSeriesSimple();
    }

    public void send_getOdsTimeSeriesSimple(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap) throws org.apache.thrift.TException
    {
      getOdsTimeSeriesSimple_args args = new getOdsTimeSeriesSimple_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setWindow(window);
      args.setAggregationTypeBitMap(aggregationTypeBitMap);
      sendBase("getOdsTimeSeriesSimple", args);
    }

    public Map<OdsAggregationType,OdsGetResult> recv_getOdsTimeSeriesSimple() throws org.apache.thrift.TException
    {
      getOdsTimeSeriesSimple_result result = new getOdsTimeSeriesSimple_result();
      receiveBase(result, "getOdsTimeSeriesSimple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOdsTimeSeriesSimple failed: unknown result");
    }

    public GetTimeSeriesByAggTypeResults getTimeSeriesByAggType(GetTimeSeriesByAggTypeParams query) throws org.apache.thrift.TException
    {
      send_getTimeSeriesByAggType(query);
      return recv_getTimeSeriesByAggType();
    }

    public void send_getTimeSeriesByAggType(GetTimeSeriesByAggTypeParams query) throws org.apache.thrift.TException
    {
      getTimeSeriesByAggType_args args = new getTimeSeriesByAggType_args();
      args.setQuery(query);
      sendBase("getTimeSeriesByAggType", args);
    }

    public GetTimeSeriesByAggTypeResults recv_getTimeSeriesByAggType() throws org.apache.thrift.TException
    {
      getTimeSeriesByAggType_result result = new getTimeSeriesByAggType_result();
      receiveBase(result, "getTimeSeriesByAggType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimeSeriesByAggType failed: unknown result");
    }

    public Map<OdsAggregationType,String> getOdsTimeSeriesSimpleCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap) throws org.apache.thrift.TException
    {
      send_getOdsTimeSeriesSimpleCompressed(entities, keys, start, end_, table, window, aggregationTypeBitMap);
      return recv_getOdsTimeSeriesSimpleCompressed();
    }

    public void send_getOdsTimeSeriesSimpleCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap) throws org.apache.thrift.TException
    {
      getOdsTimeSeriesSimpleCompressed_args args = new getOdsTimeSeriesSimpleCompressed_args();
      args.setEntities(entities);
      args.setKeys(keys);
      args.setStart(start);
      args.setEnd_(end_);
      args.setTable(table);
      args.setWindow(window);
      args.setAggregationTypeBitMap(aggregationTypeBitMap);
      sendBase("getOdsTimeSeriesSimpleCompressed", args);
    }

    public Map<OdsAggregationType,String> recv_getOdsTimeSeriesSimpleCompressed() throws org.apache.thrift.TException
    {
      getOdsTimeSeriesSimpleCompressed_result result = new getOdsTimeSeriesSimpleCompressed_result();
      receiveBase(result, "getOdsTimeSeriesSimpleCompressed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOdsTimeSeriesSimpleCompressed failed: unknown result");
    }

    public List<String> getAdvancedTransformQuery(long start_date, long end_date, String dataJSON, String configJSON) throws OdsException, org.apache.thrift.TException
    {
      send_getAdvancedTransformQuery(start_date, end_date, dataJSON, configJSON);
      return recv_getAdvancedTransformQuery();
    }

    public void send_getAdvancedTransformQuery(long start_date, long end_date, String dataJSON, String configJSON) throws org.apache.thrift.TException
    {
      getAdvancedTransformQuery_args args = new getAdvancedTransformQuery_args();
      args.setStart_date(start_date);
      args.setEnd_date(end_date);
      args.setDataJSON(dataJSON);
      args.setConfigJSON(configJSON);
      sendBase("getAdvancedTransformQuery", args);
    }

    public List<String> recv_getAdvancedTransformQuery() throws OdsException, org.apache.thrift.TException
    {
      getAdvancedTransformQuery_result result = new getAdvancedTransformQuery_result();
      receiveBase(result, "getAdvancedTransformQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdvancedTransformQuery failed: unknown result");
    }

    public List<KeyStat> getTopNActiveKeyPrefix(int n) throws org.apache.thrift.TException
    {
      send_getTopNActiveKeyPrefix(n);
      return recv_getTopNActiveKeyPrefix();
    }

    public void send_getTopNActiveKeyPrefix(int n) throws org.apache.thrift.TException
    {
      getTopNActiveKeyPrefix_args args = new getTopNActiveKeyPrefix_args();
      args.setN(n);
      sendBase("getTopNActiveKeyPrefix", args);
    }

    public List<KeyStat> recv_getTopNActiveKeyPrefix() throws org.apache.thrift.TException
    {
      getTopNActiveKeyPrefix_result result = new getTopNActiveKeyPrefix_result();
      receiveBase(result, "getTopNActiveKeyPrefix");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopNActiveKeyPrefix failed: unknown result");
    }

    public void setMultipleOdsValues(List<ODSValue> data) throws OdsException, org.apache.thrift.TException
    {
      send_setMultipleOdsValues(data);
      recv_setMultipleOdsValues();
    }

    public void send_setMultipleOdsValues(List<ODSValue> data) throws org.apache.thrift.TException
    {
      setMultipleOdsValues_args args = new setMultipleOdsValues_args();
      args.setData(data);
      sendBase("setMultipleOdsValues", args);
    }

    public void recv_setMultipleOdsValues() throws OdsException, org.apache.thrift.TException
    {
      setMultipleOdsValues_result result = new setMultipleOdsValues_result();
      receiveBase(result, "setMultipleOdsValues");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setODSData(List<ODSData> data) throws OdsException, org.apache.thrift.TException
    {
      send_setODSData(data);
      recv_setODSData();
    }

    public void send_setODSData(List<ODSData> data) throws org.apache.thrift.TException
    {
      setODSData_args args = new setODSData_args();
      args.setData(data);
      sendBase("setODSData", args);
    }

    public void recv_setODSData() throws OdsException, org.apache.thrift.TException
    {
      setODSData_result result = new setODSData_result();
      receiveBase(result, "setODSData");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setOdsFbagentHostData(List<ODSFbagentData> data) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsFbagentHostData(data);
      recv_setOdsFbagentHostData();
    }

    public void send_setOdsFbagentHostData(List<ODSFbagentData> data) throws org.apache.thrift.TException
    {
      setOdsFbagentHostData_args args = new setOdsFbagentHostData_args();
      args.setData(data);
      sendBase("setOdsFbagentHostData", args);
    }

    public void recv_setOdsFbagentHostData() throws OdsException, org.apache.thrift.TException
    {
      setOdsFbagentHostData_result result = new setOdsFbagentHostData_result();
      receiveBase(result, "setOdsFbagentHostData");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public void setOdsFbagentData(List<ODSFbagentData> data, boolean skiphostdata) throws OdsException, org.apache.thrift.TException
    {
      send_setOdsFbagentData(data, skiphostdata);
      recv_setOdsFbagentData();
    }

    public void send_setOdsFbagentData(List<ODSFbagentData> data, boolean skiphostdata) throws org.apache.thrift.TException
    {
      setOdsFbagentData_args args = new setOdsFbagentData_args();
      args.setData(data);
      args.setSkiphostdata(skiphostdata);
      sendBase("setOdsFbagentData", args);
    }

    public void recv_setOdsFbagentData() throws OdsException, org.apache.thrift.TException
    {
      setOdsFbagentData_result result = new setOdsFbagentData_result();
      receiveBase(result, "setOdsFbagentData");
      if (result.oe != null) {
        throw result.oe;
      }
      return;
    }

    public List<String> getEntityNames() throws org.apache.thrift.TException
    {
      send_getEntityNames();
      return recv_getEntityNames();
    }

    public void send_getEntityNames() throws org.apache.thrift.TException
    {
      getEntityNames_args args = new getEntityNames_args();
      sendBase("getEntityNames", args);
    }

    public List<String> recv_getEntityNames() throws org.apache.thrift.TException
    {
      getEntityNames_result result = new getEntityNames_result();
      receiveBase(result, "getEntityNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityNames failed: unknown result");
    }

    public List<String> getKeyNames() throws org.apache.thrift.TException
    {
      send_getKeyNames();
      return recv_getKeyNames();
    }

    public void send_getKeyNames() throws org.apache.thrift.TException
    {
      getKeyNames_args args = new getKeyNames_args();
      sendBase("getKeyNames", args);
    }

    public List<String> recv_getKeyNames() throws org.apache.thrift.TException
    {
      getKeyNames_result result = new getKeyNames_result();
      receiveBase(result, "getKeyNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKeyNames failed: unknown result");
    }

    public Map<String,List<String>> getKeyMapping(List<String> entities, long minutes_back) throws org.apache.thrift.TException
    {
      send_getKeyMapping(entities, minutes_back);
      return recv_getKeyMapping();
    }

    public void send_getKeyMapping(List<String> entities, long minutes_back) throws org.apache.thrift.TException
    {
      getKeyMapping_args args = new getKeyMapping_args();
      args.setEntities(entities);
      args.setMinutes_back(minutes_back);
      sendBase("getKeyMapping", args);
    }

    public Map<String,List<String>> recv_getKeyMapping() throws org.apache.thrift.TException
    {
      getKeyMapping_result result = new getKeyMapping_result();
      receiveBase(result, "getKeyMapping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKeyMapping failed: unknown result");
    }

    public Map<String,List<String>> getEntityMapping(List<String> keys, long minutes_back) throws org.apache.thrift.TException
    {
      send_getEntityMapping(keys, minutes_back);
      return recv_getEntityMapping();
    }

    public void send_getEntityMapping(List<String> keys, long minutes_back) throws org.apache.thrift.TException
    {
      getEntityMapping_args args = new getEntityMapping_args();
      args.setKeys(keys);
      args.setMinutes_back(minutes_back);
      sendBase("getEntityMapping", args);
    }

    public Map<String,List<String>> recv_getEntityMapping() throws org.apache.thrift.TException
    {
      getEntityMapping_result result = new getEntityMapping_result();
      receiveBase(result, "getEntityMapping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityMapping failed: unknown result");
    }

    public Set<String> getAggregateEntityNames(String regexp) throws org.apache.thrift.TException
    {
      send_getAggregateEntityNames(regexp);
      return recv_getAggregateEntityNames();
    }

    public void send_getAggregateEntityNames(String regexp) throws org.apache.thrift.TException
    {
      getAggregateEntityNames_args args = new getAggregateEntityNames_args();
      args.setRegexp(regexp);
      sendBase("getAggregateEntityNames", args);
    }

    public Set<String> recv_getAggregateEntityNames() throws org.apache.thrift.TException
    {
      getAggregateEntityNames_result result = new getAggregateEntityNames_result();
      receiveBase(result, "getAggregateEntityNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAggregateEntityNames failed: unknown result");
    }

    public Map<String,List<String>> getMapping(List<String> entities, long minutes_back, boolean get_key) throws OdsException, org.apache.thrift.TException
    {
      send_getMapping(entities, minutes_back, get_key);
      return recv_getMapping();
    }

    public void send_getMapping(List<String> entities, long minutes_back, boolean get_key) throws org.apache.thrift.TException
    {
      getMapping_args args = new getMapping_args();
      args.setEntities(entities);
      args.setMinutes_back(minutes_back);
      args.setGet_key(get_key);
      sendBase("getMapping", args);
    }

    public Map<String,List<String>> recv_getMapping() throws OdsException, org.apache.thrift.TException
    {
      getMapping_result result = new getMapping_result();
      receiveBase(result, "getMapping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMapping failed: unknown result");
    }

    public OdsKeyEntityMapperResult getCorrespondingKeys(List<String> keywords, List<String> entities, int minutes_back, int limit) throws OdsException, org.apache.thrift.TException
    {
      send_getCorrespondingKeys(keywords, entities, minutes_back, limit);
      return recv_getCorrespondingKeys();
    }

    public void send_getCorrespondingKeys(List<String> keywords, List<String> entities, int minutes_back, int limit) throws org.apache.thrift.TException
    {
      getCorrespondingKeys_args args = new getCorrespondingKeys_args();
      args.setKeywords(keywords);
      args.setEntities(entities);
      args.setMinutes_back(minutes_back);
      args.setLimit(limit);
      sendBase("getCorrespondingKeys", args);
    }

    public OdsKeyEntityMapperResult recv_getCorrespondingKeys() throws OdsException, org.apache.thrift.TException
    {
      getCorrespondingKeys_result result = new getCorrespondingKeys_result();
      receiveBase(result, "getCorrespondingKeys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCorrespondingKeys failed: unknown result");
    }

    public OdsKeyEntityMapperResult getCorrespondingEntities(List<String> keywords, List<String> keys, int minutes_back, int limit) throws OdsException, org.apache.thrift.TException
    {
      send_getCorrespondingEntities(keywords, keys, minutes_back, limit);
      return recv_getCorrespondingEntities();
    }

    public void send_getCorrespondingEntities(List<String> keywords, List<String> keys, int minutes_back, int limit) throws org.apache.thrift.TException
    {
      getCorrespondingEntities_args args = new getCorrespondingEntities_args();
      args.setKeywords(keywords);
      args.setKeys(keys);
      args.setMinutes_back(minutes_back);
      args.setLimit(limit);
      sendBase("getCorrespondingEntities", args);
    }

    public OdsKeyEntityMapperResult recv_getCorrespondingEntities() throws OdsException, org.apache.thrift.TException
    {
      getCorrespondingEntities_result result = new getCorrespondingEntities_result();
      receiveBase(result, "getCorrespondingEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCorrespondingEntities failed: unknown result");
    }

    public OdsKeyEntityMapperResult getEntitiesByTypeAndRegexs(int entity_type, int limit, OdsEntityOrderByType ordering, List<String> regexes) throws OdsException, org.apache.thrift.TException
    {
      send_getEntitiesByTypeAndRegexs(entity_type, limit, ordering, regexes);
      return recv_getEntitiesByTypeAndRegexs();
    }

    public void send_getEntitiesByTypeAndRegexs(int entity_type, int limit, OdsEntityOrderByType ordering, List<String> regexes) throws org.apache.thrift.TException
    {
      getEntitiesByTypeAndRegexs_args args = new getEntitiesByTypeAndRegexs_args();
      args.setEntity_type(entity_type);
      args.setLimit(limit);
      args.setOrdering(ordering);
      args.setRegexes(regexes);
      sendBase("getEntitiesByTypeAndRegexs", args);
    }

    public OdsKeyEntityMapperResult recv_getEntitiesByTypeAndRegexs() throws OdsException, org.apache.thrift.TException
    {
      getEntitiesByTypeAndRegexs_result result = new getEntitiesByTypeAndRegexs_result();
      receiveBase(result, "getEntitiesByTypeAndRegexs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntitiesByTypeAndRegexs failed: unknown result");
    }

    public OdsKeyEntityMapperResult getKeysByRegexs(List<String> keywords, int limit, boolean use_cdbdao) throws OdsException, org.apache.thrift.TException
    {
      send_getKeysByRegexs(keywords, limit, use_cdbdao);
      return recv_getKeysByRegexs();
    }

    public void send_getKeysByRegexs(List<String> keywords, int limit, boolean use_cdbdao) throws org.apache.thrift.TException
    {
      getKeysByRegexs_args args = new getKeysByRegexs_args();
      args.setKeywords(keywords);
      args.setLimit(limit);
      args.setUse_cdbdao(use_cdbdao);
      sendBase("getKeysByRegexs", args);
    }

    public OdsKeyEntityMapperResult recv_getKeysByRegexs() throws OdsException, org.apache.thrift.TException
    {
      getKeysByRegexs_result result = new getKeysByRegexs_result();
      receiveBase(result, "getKeysByRegexs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKeysByRegexs failed: unknown result");
    }

    public List<String> getAllAliveNumericKeyPrefixes(boolean returnKeysWithNoDelimiter, int limit) throws OdsException, org.apache.thrift.TException
    {
      send_getAllAliveNumericKeyPrefixes(returnKeysWithNoDelimiter, limit);
      return recv_getAllAliveNumericKeyPrefixes();
    }

    public void send_getAllAliveNumericKeyPrefixes(boolean returnKeysWithNoDelimiter, int limit) throws org.apache.thrift.TException
    {
      getAllAliveNumericKeyPrefixes_args args = new getAllAliveNumericKeyPrefixes_args();
      args.setReturnKeysWithNoDelimiter(returnKeysWithNoDelimiter);
      args.setLimit(limit);
      sendBase("getAllAliveNumericKeyPrefixes", args);
    }

    public List<String> recv_getAllAliveNumericKeyPrefixes() throws OdsException, org.apache.thrift.TException
    {
      getAllAliveNumericKeyPrefixes_result result = new getAllAliveNumericKeyPrefixes_result();
      receiveBase(result, "getAllAliveNumericKeyPrefixes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllAliveNumericKeyPrefixes failed: unknown result");
    }

    public List<String> getAllAliveNumericKeys(String prefix, int limit) throws OdsException, org.apache.thrift.TException
    {
      send_getAllAliveNumericKeys(prefix, limit);
      return recv_getAllAliveNumericKeys();
    }

    public void send_getAllAliveNumericKeys(String prefix, int limit) throws org.apache.thrift.TException
    {
      getAllAliveNumericKeys_args args = new getAllAliveNumericKeys_args();
      args.setPrefix(prefix);
      args.setLimit(limit);
      sendBase("getAllAliveNumericKeys", args);
    }

    public List<String> recv_getAllAliveNumericKeys() throws OdsException, org.apache.thrift.TException
    {
      getAllAliveNumericKeys_result result = new getAllAliveNumericKeys_result();
      receiveBase(result, "getAllAliveNumericKeys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllAliveNumericKeys failed: unknown result");
    }

    public List<String> getAllKeys(String prefix, int key_type) throws org.apache.thrift.TException
    {
      send_getAllKeys(prefix, key_type);
      return recv_getAllKeys();
    }

    public void send_getAllKeys(String prefix, int key_type) throws org.apache.thrift.TException
    {
      getAllKeys_args args = new getAllKeys_args();
      args.setPrefix(prefix);
      args.setKey_type(key_type);
      sendBase("getAllKeys", args);
    }

    public List<String> recv_getAllKeys() throws org.apache.thrift.TException
    {
      getAllKeys_result result = new getAllKeys_result();
      receiveBase(result, "getAllKeys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllKeys failed: unknown result");
    }

    public List<String> getGlobalAggregationEntities() throws org.apache.thrift.TException
    {
      send_getGlobalAggregationEntities();
      return recv_getGlobalAggregationEntities();
    }

    public void send_getGlobalAggregationEntities() throws org.apache.thrift.TException
    {
      getGlobalAggregationEntities_args args = new getGlobalAggregationEntities_args();
      sendBase("getGlobalAggregationEntities", args);
    }

    public List<String> recv_getGlobalAggregationEntities() throws org.apache.thrift.TException
    {
      getGlobalAggregationEntities_result result = new getGlobalAggregationEntities_result();
      receiveBase(result, "getGlobalAggregationEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGlobalAggregationEntities failed: unknown result");
    }

    public boolean findExactMatch(String keyword_to_search, boolean is_entity) throws org.apache.thrift.TException
    {
      send_findExactMatch(keyword_to_search, is_entity);
      return recv_findExactMatch();
    }

    public void send_findExactMatch(String keyword_to_search, boolean is_entity) throws org.apache.thrift.TException
    {
      findExactMatch_args args = new findExactMatch_args();
      args.setKeyword_to_search(keyword_to_search);
      args.setIs_entity(is_entity);
      sendBase("findExactMatch", args);
    }

    public boolean recv_findExactMatch() throws org.apache.thrift.TException
    {
      findExactMatch_result result = new findExactMatch_result();
      receiveBase(result, "findExactMatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findExactMatch failed: unknown result");
    }

    public OdsKeyEntityMapperResult searchEntityOrKey(List<String> keywords, int limit, boolean is_entity) throws OdsException, org.apache.thrift.TException
    {
      send_searchEntityOrKey(keywords, limit, is_entity);
      return recv_searchEntityOrKey();
    }

    public void send_searchEntityOrKey(List<String> keywords, int limit, boolean is_entity) throws org.apache.thrift.TException
    {
      searchEntityOrKey_args args = new searchEntityOrKey_args();
      args.setKeywords(keywords);
      args.setLimit(limit);
      args.setIs_entity(is_entity);
      sendBase("searchEntityOrKey", args);
    }

    public OdsKeyEntityMapperResult recv_searchEntityOrKey() throws OdsException, org.apache.thrift.TException
    {
      searchEntityOrKey_result result = new searchEntityOrKey_result();
      receiveBase(result, "searchEntityOrKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchEntityOrKey failed: unknown result");
    }

    public RecentEntitiesOrKeys getRecentEntities(int entity_id) throws org.apache.thrift.TException
    {
      send_getRecentEntities(entity_id);
      return recv_getRecentEntities();
    }

    public void send_getRecentEntities(int entity_id) throws org.apache.thrift.TException
    {
      getRecentEntities_args args = new getRecentEntities_args();
      args.setEntity_id(entity_id);
      sendBase("getRecentEntities", args);
    }

    public RecentEntitiesOrKeys recv_getRecentEntities() throws org.apache.thrift.TException
    {
      getRecentEntities_result result = new getRecentEntities_result();
      receiveBase(result, "getRecentEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecentEntities failed: unknown result");
    }

    public RecentEntitiesOrKeys getRecentKeys(int key_id) throws org.apache.thrift.TException
    {
      send_getRecentKeys(key_id);
      return recv_getRecentKeys();
    }

    public void send_getRecentKeys(int key_id) throws org.apache.thrift.TException
    {
      getRecentKeys_args args = new getRecentKeys_args();
      args.setKey_id(key_id);
      sendBase("getRecentKeys", args);
    }

    public RecentEntitiesOrKeys recv_getRecentKeys() throws org.apache.thrift.TException
    {
      getRecentKeys_result result = new getRecentKeys_result();
      receiveBase(result, "getRecentKeys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecentKeys failed: unknown result");
    }

    public long getEntityIdByName(String name) throws OdsException, org.apache.thrift.TException
    {
      send_getEntityIdByName(name);
      return recv_getEntityIdByName();
    }

    public void send_getEntityIdByName(String name) throws org.apache.thrift.TException
    {
      getEntityIdByName_args args = new getEntityIdByName_args();
      args.setName(name);
      sendBase("getEntityIdByName", args);
    }

    public long recv_getEntityIdByName() throws OdsException, org.apache.thrift.TException
    {
      getEntityIdByName_result result = new getEntityIdByName_result();
      receiveBase(result, "getEntityIdByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityIdByName failed: unknown result");
    }

    public long getMaxEntityId() throws org.apache.thrift.TException
    {
      send_getMaxEntityId();
      return recv_getMaxEntityId();
    }

    public void send_getMaxEntityId() throws org.apache.thrift.TException
    {
      getMaxEntityId_args args = new getMaxEntityId_args();
      sendBase("getMaxEntityId", args);
    }

    public long recv_getMaxEntityId() throws org.apache.thrift.TException
    {
      getMaxEntityId_result result = new getMaxEntityId_result();
      receiveBase(result, "getMaxEntityId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMaxEntityId failed: unknown result");
    }

    public long getKeyIdByName(String name) throws OdsException, org.apache.thrift.TException
    {
      send_getKeyIdByName(name);
      return recv_getKeyIdByName();
    }

    public void send_getKeyIdByName(String name) throws org.apache.thrift.TException
    {
      getKeyIdByName_args args = new getKeyIdByName_args();
      args.setName(name);
      sendBase("getKeyIdByName", args);
    }

    public long recv_getKeyIdByName() throws OdsException, org.apache.thrift.TException
    {
      getKeyIdByName_result result = new getKeyIdByName_result();
      receiveBase(result, "getKeyIdByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKeyIdByName failed: unknown result");
    }

    public long getMaxKeyId() throws org.apache.thrift.TException
    {
      send_getMaxKeyId();
      return recv_getMaxKeyId();
    }

    public void send_getMaxKeyId() throws org.apache.thrift.TException
    {
      getMaxKeyId_args args = new getMaxKeyId_args();
      sendBase("getMaxKeyId", args);
    }

    public long recv_getMaxKeyId() throws org.apache.thrift.TException
    {
      getMaxKeyId_result result = new getMaxKeyId_result();
      receiveBase(result, "getMaxKeyId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMaxKeyId failed: unknown result");
    }

    public long getDdbIdByEntityId(long entityId) throws OdsException, org.apache.thrift.TException
    {
      send_getDdbIdByEntityId(entityId);
      return recv_getDdbIdByEntityId();
    }

    public void send_getDdbIdByEntityId(long entityId) throws org.apache.thrift.TException
    {
      getDdbIdByEntityId_args args = new getDdbIdByEntityId_args();
      args.setEntityId(entityId);
      sendBase("getDdbIdByEntityId", args);
    }

    public long recv_getDdbIdByEntityId() throws OdsException, org.apache.thrift.TException
    {
      getDdbIdByEntityId_result result = new getDdbIdByEntityId_result();
      receiveBase(result, "getDdbIdByEntityId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDdbIdByEntityId failed: unknown result");
    }

    public long getAggregateDdbIdByEntityId(long entityId) throws OdsException, org.apache.thrift.TException
    {
      send_getAggregateDdbIdByEntityId(entityId);
      return recv_getAggregateDdbIdByEntityId();
    }

    public void send_getAggregateDdbIdByEntityId(long entityId) throws org.apache.thrift.TException
    {
      getAggregateDdbIdByEntityId_args args = new getAggregateDdbIdByEntityId_args();
      args.setEntityId(entityId);
      sendBase("getAggregateDdbIdByEntityId", args);
    }

    public long recv_getAggregateDdbIdByEntityId() throws OdsException, org.apache.thrift.TException
    {
      getAggregateDdbIdByEntityId_result result = new getAggregateDdbIdByEntityId_result();
      receiveBase(result, "getAggregateDdbIdByEntityId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oe != null) {
        throw result.oe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAggregateDdbIdByEntityId failed: unknown result");
    }

  }
  public static class AsyncClient extends com.facebook.fb303.FacebookService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setOdsValues(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsValues_call method_call = new setOdsValues_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSAppValue> data;
      public setOdsValues_call(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsValues_args args = new setOdsValues_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsValues();
      }
    }

    public void setOdsAggValues(List<OdsAggValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsAggValues_call method_call = new setOdsAggValues_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsAggValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<OdsAggValue> data;
      public setOdsAggValues_call(List<OdsAggValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsAggValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsAggValues_args args = new setOdsAggValues_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsAggValues();
      }
    }

    public void setOdsRollupValues(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsRollupValues_call method_call = new setOdsRollupValues_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsRollupValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSAppValue> data;
      public setOdsRollupValues_call(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsRollupValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsRollupValues_args args = new setOdsRollupValues_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsRollupValues();
      }
    }

    public void setOdsRateOfChangeValues(List<ODSRateOfChangeValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsRateOfChangeValues_call method_call = new setOdsRateOfChangeValues_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsRateOfChangeValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSRateOfChangeValue> data;
      public setOdsRateOfChangeValues_call(List<ODSRateOfChangeValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsRateOfChangeValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsRateOfChangeValues_args args = new setOdsRateOfChangeValues_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsRateOfChangeValues();
      }
    }

    public void setOdsValuesWithHostRollup(List<ODSValue> data, boolean doHostRollup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsValuesWithHostRollup_call method_call = new setOdsValuesWithHostRollup_call(data, doHostRollup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsValuesWithHostRollup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSValue> data;
      private boolean doHostRollup;
      public setOdsValuesWithHostRollup_call(List<ODSValue> data, boolean doHostRollup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
        this.doHostRollup = doHostRollup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsValuesWithHostRollup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsValuesWithHostRollup_args args = new setOdsValuesWithHostRollup_args();
        args.setData(data);
        args.setDoHostRollup(doHostRollup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsValuesWithHostRollup();
      }
    }

    public void getOdsValues(String entity, String key, long start, long end_, OdsDataTable table, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOdsValues_call method_call = new getOdsValues_call(entity, key, start, end_, table, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOdsValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String entity;
      private String key;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int aggregationType;
      public getOdsValues_call(String entity, String key, long start, long end_, OdsDataTable table, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity = entity;
        this.key = key;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOdsValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOdsValues_args args = new getOdsValues_args();
        args.setEntity(entity);
        args.setKey(key);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TimeValue> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOdsValues();
      }
    }

    public void setOdsHistoricalData(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsHistoricalData_call method_call = new setOdsHistoricalData_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsHistoricalData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSAppValue> data;
      public setOdsHistoricalData_call(List<ODSAppValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsHistoricalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsHistoricalData_args args = new setOdsHistoricalData_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsHistoricalData();
      }
    }

    public void deleteOdsHistoricalData(List<ODSHistoricalPurgeDefn> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOdsHistoricalData_call method_call = new deleteOdsHistoricalData_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOdsHistoricalData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSHistoricalPurgeDefn> data;
      public deleteOdsHistoricalData_call(List<ODSHistoricalPurgeDefn> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOdsHistoricalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOdsHistoricalData_args args = new deleteOdsHistoricalData_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteOdsHistoricalData();
      }
    }

    public void getSnapshotWithFilters(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSnapshotWithFilters_call method_call = new getSnapshotWithFilters_call(entities, keys, timeStamp, filter, findMissingValue, periodOverride, entityIsRegex, keyIsRegex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSnapshotWithFilters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long timeStamp;
      private ODSSnapshotFilter filter;
      private boolean findMissingValue;
      private int periodOverride;
      private boolean entityIsRegex;
      private boolean keyIsRegex;
      public getSnapshotWithFilters_call(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.timeStamp = timeStamp;
        this.filter = filter;
        this.findMissingValue = findMissingValue;
        this.periodOverride = periodOverride;
        this.entityIsRegex = entityIsRegex;
        this.keyIsRegex = keyIsRegex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSnapshotWithFilters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSnapshotWithFilters_args args = new getSnapshotWithFilters_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setTimeStamp(timeStamp);
        args.setFilter(filter);
        args.setFindMissingValue(findMissingValue);
        args.setPeriodOverride(periodOverride);
        args.setEntityIsRegex(entityIsRegex);
        args.setKeyIsRegex(keyIsRegex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<ODSSnapshotValue>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSnapshotWithFilters();
      }
    }

    public void getSnapshotCompressed(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSnapshotCompressed_call method_call = new getSnapshotCompressed_call(entities, keys, timeStamp, filter, findMissingValue, periodOverride, entityIsRegex, keyIsRegex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSnapshotCompressed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long timeStamp;
      private ODSSnapshotFilter filter;
      private boolean findMissingValue;
      private int periodOverride;
      private boolean entityIsRegex;
      private boolean keyIsRegex;
      public getSnapshotCompressed_call(List<String> entities, List<String> keys, long timeStamp, ODSSnapshotFilter filter, boolean findMissingValue, int periodOverride, boolean entityIsRegex, boolean keyIsRegex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.timeStamp = timeStamp;
        this.filter = filter;
        this.findMissingValue = findMissingValue;
        this.periodOverride = periodOverride;
        this.entityIsRegex = entityIsRegex;
        this.keyIsRegex = keyIsRegex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSnapshotCompressed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSnapshotCompressed_args args = new getSnapshotCompressed_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setTimeStamp(timeStamp);
        args.setFilter(filter);
        args.setFindMissingValue(findMissingValue);
        args.setPeriodOverride(periodOverride);
        args.setEntityIsRegex(entityIsRegex);
        args.setKeyIsRegex(keyIsRegex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSnapshotCompressed();
      }
    }

    public void getEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityValues_call method_call = new getEntityValues_call(entities, keys, start, end_, table, window, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int window;
      private int aggregationType;
      public getEntityValues_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.window = window;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityValues_args args = new getEntityValues_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setWindow(window);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,List<TimeValue>>> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityValues();
      }
    }

    public void getTimeSeries(GetTimeSeriesParams query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimeSeries_call method_call = new getTimeSeries_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimeSeries_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetTimeSeriesParams query;
      public getTimeSeries_call(GetTimeSeriesParams query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimeSeries", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimeSeries_args args = new getTimeSeries_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetTimeSeriesResults getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimeSeries();
      }
    }

    public void getEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityValuesCompressed_call method_call = new getEntityValuesCompressed_call(entities, keys, start, end_, table, window, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityValuesCompressed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int window;
      private int aggregationType;
      public getEntityValuesCompressed_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.window = window;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityValuesCompressed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityValuesCompressed_args args = new getEntityValuesCompressed_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setWindow(window);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,String>> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityValuesCompressed();
      }
    }

    public void getRegexEntityValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegexEntityValues_call method_call = new getRegexEntityValues_call(entities, keys, start, end_, table, window, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegexEntityValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int window;
      private int aggregationType;
      public getRegexEntityValues_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.window = window;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegexEntityValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegexEntityValues_args args = new getRegexEntityValues_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setWindow(window);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,List<TimeValue>>> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegexEntityValues();
      }
    }

    public void getRegexEntityValuesCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegexEntityValuesCompressed_call method_call = new getRegexEntityValuesCompressed_call(entities, keys, start, end_, table, window, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegexEntityValuesCompressed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int window;
      private int aggregationType;
      public getRegexEntityValuesCompressed_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.window = window;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegexEntityValuesCompressed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegexEntityValuesCompressed_args args = new getRegexEntityValuesCompressed_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setWindow(window);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,String>> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegexEntityValuesCompressed();
      }
    }

    public void getEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityAggValues_call method_call = new getEntityAggValues_call(entities, keys, start, end_, table, type, window, bypassLimit, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityAggValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int type;
      private int window;
      private boolean bypassLimit;
      private int aggregationType;
      public getEntityAggValues_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.type = type;
        this.window = window;
        this.bypassLimit = bypassLimit;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityAggValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityAggValues_args args = new getEntityAggValues_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setType(type);
        args.setWindow(window);
        args.setBypassLimit(bypassLimit);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AggEntityValue getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityAggValues();
      }
    }

    public void getRegexEntityAggValues(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegexEntityAggValues_call method_call = new getRegexEntityAggValues_call(entities, keys, start, end_, table, type, window, bypassLimit, aggregationType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegexEntityAggValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int type;
      private int window;
      private boolean bypassLimit;
      private int aggregationType;
      public getRegexEntityAggValues_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, boolean bypassLimit, int aggregationType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.type = type;
        this.window = window;
        this.bypassLimit = bypassLimit;
        this.aggregationType = aggregationType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegexEntityAggValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegexEntityAggValues_args args = new getRegexEntityAggValues_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setType(type);
        args.setWindow(window);
        args.setBypassLimit(bypassLimit);
        args.setAggregationType(aggregationType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AggEntityValue getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegexEntityAggValues();
      }
    }

    public void getAggSources(boolean rgex, List<String> entities, List<String> keys, long start, long end_, int window, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAggSources_call method_call = new getAggSources_call(rgex, entities, keys, start, end_, window, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAggSources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean rgex;
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private int window;
      public getAggSources_call(boolean rgex, List<String> entities, List<String> keys, long start, long end_, int window, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rgex = rgex;
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.window = window;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAggSources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAggSources_args args = new getAggSources_args();
        args.setRgex(rgex);
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setWindow(window);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAggSources();
      }
    }

    public void getOdsTimeSeriesByAggregationType(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOdsTimeSeriesByAggregationType_call method_call = new getOdsTimeSeriesByAggregationType_call(regex, entities, keys, start, end_, table, type, window, transformConfig, aggregationTypeBitMap, bestFitDegree, transformDataSources, topNOpts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOdsTimeSeriesByAggregationType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean regex;
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int type;
      private int window;
      private String transformConfig;
      private int aggregationTypeBitMap;
      private int bestFitDegree;
      private String transformDataSources;
      private ODSTopN topNOpts;
      public getOdsTimeSeriesByAggregationType_call(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.regex = regex;
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.type = type;
        this.window = window;
        this.transformConfig = transformConfig;
        this.aggregationTypeBitMap = aggregationTypeBitMap;
        this.bestFitDegree = bestFitDegree;
        this.transformDataSources = transformDataSources;
        this.topNOpts = topNOpts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOdsTimeSeriesByAggregationType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOdsTimeSeriesByAggregationType_args args = new getOdsTimeSeriesByAggregationType_args();
        args.setRegex(regex);
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setType(type);
        args.setWindow(window);
        args.setTransformConfig(transformConfig);
        args.setAggregationTypeBitMap(aggregationTypeBitMap);
        args.setBestFitDegree(bestFitDegree);
        args.setTransformDataSources(transformDataSources);
        args.setTopNOpts(topNOpts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<OdsAggregationType,TransformResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOdsTimeSeriesByAggregationType();
      }
    }

    public void getOdsTimeSeriesByAggregationTypeCompressed(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOdsTimeSeriesByAggregationTypeCompressed_call method_call = new getOdsTimeSeriesByAggregationTypeCompressed_call(regex, entities, keys, start, end_, table, type, window, transformConfig, aggregationTypeBitMap, bestFitDegree, transformDataSources, topNOpts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOdsTimeSeriesByAggregationTypeCompressed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean regex;
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int type;
      private int window;
      private String transformConfig;
      private int aggregationTypeBitMap;
      private int bestFitDegree;
      private String transformDataSources;
      private ODSTopN topNOpts;
      public getOdsTimeSeriesByAggregationTypeCompressed_call(boolean regex, List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int type, int window, String transformConfig, int aggregationTypeBitMap, int bestFitDegree, String transformDataSources, ODSTopN topNOpts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.regex = regex;
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.type = type;
        this.window = window;
        this.transformConfig = transformConfig;
        this.aggregationTypeBitMap = aggregationTypeBitMap;
        this.bestFitDegree = bestFitDegree;
        this.transformDataSources = transformDataSources;
        this.topNOpts = topNOpts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOdsTimeSeriesByAggregationTypeCompressed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOdsTimeSeriesByAggregationTypeCompressed_args args = new getOdsTimeSeriesByAggregationTypeCompressed_args();
        args.setRegex(regex);
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setType(type);
        args.setWindow(window);
        args.setTransformConfig(transformConfig);
        args.setAggregationTypeBitMap(aggregationTypeBitMap);
        args.setBestFitDegree(bestFitDegree);
        args.setTransformDataSources(transformDataSources);
        args.setTopNOpts(topNOpts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<OdsAggregationType,TransformResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOdsTimeSeriesByAggregationTypeCompressed();
      }
    }

    public void getOdsTimeSeriesSimple(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOdsTimeSeriesSimple_call method_call = new getOdsTimeSeriesSimple_call(entities, keys, start, end_, table, window, aggregationTypeBitMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOdsTimeSeriesSimple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int window;
      private int aggregationTypeBitMap;
      public getOdsTimeSeriesSimple_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.window = window;
        this.aggregationTypeBitMap = aggregationTypeBitMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOdsTimeSeriesSimple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOdsTimeSeriesSimple_args args = new getOdsTimeSeriesSimple_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setWindow(window);
        args.setAggregationTypeBitMap(aggregationTypeBitMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<OdsAggregationType,OdsGetResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOdsTimeSeriesSimple();
      }
    }

    public void getTimeSeriesByAggType(GetTimeSeriesByAggTypeParams query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimeSeriesByAggType_call method_call = new getTimeSeriesByAggType_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimeSeriesByAggType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetTimeSeriesByAggTypeParams query;
      public getTimeSeriesByAggType_call(GetTimeSeriesByAggTypeParams query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimeSeriesByAggType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimeSeriesByAggType_args args = new getTimeSeriesByAggType_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetTimeSeriesByAggTypeResults getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimeSeriesByAggType();
      }
    }

    public void getOdsTimeSeriesSimpleCompressed(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOdsTimeSeriesSimpleCompressed_call method_call = new getOdsTimeSeriesSimpleCompressed_call(entities, keys, start, end_, table, window, aggregationTypeBitMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOdsTimeSeriesSimpleCompressed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private List<String> keys;
      private long start;
      private long end_;
      private OdsDataTable table;
      private int window;
      private int aggregationTypeBitMap;
      public getOdsTimeSeriesSimpleCompressed_call(List<String> entities, List<String> keys, long start, long end_, OdsDataTable table, int window, int aggregationTypeBitMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.keys = keys;
        this.start = start;
        this.end_ = end_;
        this.table = table;
        this.window = window;
        this.aggregationTypeBitMap = aggregationTypeBitMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOdsTimeSeriesSimpleCompressed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOdsTimeSeriesSimpleCompressed_args args = new getOdsTimeSeriesSimpleCompressed_args();
        args.setEntities(entities);
        args.setKeys(keys);
        args.setStart(start);
        args.setEnd_(end_);
        args.setTable(table);
        args.setWindow(window);
        args.setAggregationTypeBitMap(aggregationTypeBitMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<OdsAggregationType,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOdsTimeSeriesSimpleCompressed();
      }
    }

    public void getAdvancedTransformQuery(long start_date, long end_date, String dataJSON, String configJSON, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdvancedTransformQuery_call method_call = new getAdvancedTransformQuery_call(start_date, end_date, dataJSON, configJSON, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdvancedTransformQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long start_date;
      private long end_date;
      private String dataJSON;
      private String configJSON;
      public getAdvancedTransformQuery_call(long start_date, long end_date, String dataJSON, String configJSON, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.start_date = start_date;
        this.end_date = end_date;
        this.dataJSON = dataJSON;
        this.configJSON = configJSON;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdvancedTransformQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdvancedTransformQuery_args args = new getAdvancedTransformQuery_args();
        args.setStart_date(start_date);
        args.setEnd_date(end_date);
        args.setDataJSON(dataJSON);
        args.setConfigJSON(configJSON);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdvancedTransformQuery();
      }
    }

    public void getTopNActiveKeyPrefix(int n, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopNActiveKeyPrefix_call method_call = new getTopNActiveKeyPrefix_call(n, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopNActiveKeyPrefix_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int n;
      public getTopNActiveKeyPrefix_call(int n, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.n = n;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopNActiveKeyPrefix", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopNActiveKeyPrefix_args args = new getTopNActiveKeyPrefix_args();
        args.setN(n);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<KeyStat> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopNActiveKeyPrefix();
      }
    }

    public void setMultipleOdsValues(List<ODSValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setMultipleOdsValues_call method_call = new setMultipleOdsValues_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setMultipleOdsValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSValue> data;
      public setMultipleOdsValues_call(List<ODSValue> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setMultipleOdsValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setMultipleOdsValues_args args = new setMultipleOdsValues_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setMultipleOdsValues();
      }
    }

    public void setODSData(List<ODSData> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setODSData_call method_call = new setODSData_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setODSData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSData> data;
      public setODSData_call(List<ODSData> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setODSData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setODSData_args args = new setODSData_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setODSData();
      }
    }

    public void setOdsFbagentHostData(List<ODSFbagentData> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsFbagentHostData_call method_call = new setOdsFbagentHostData_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsFbagentHostData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSFbagentData> data;
      public setOdsFbagentHostData_call(List<ODSFbagentData> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsFbagentHostData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsFbagentHostData_args args = new setOdsFbagentHostData_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsFbagentHostData();
      }
    }

    public void setOdsFbagentData(List<ODSFbagentData> data, boolean skiphostdata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOdsFbagentData_call method_call = new setOdsFbagentData_call(data, skiphostdata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOdsFbagentData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ODSFbagentData> data;
      private boolean skiphostdata;
      public setOdsFbagentData_call(List<ODSFbagentData> data, boolean skiphostdata, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
        this.skiphostdata = skiphostdata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOdsFbagentData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOdsFbagentData_args args = new setOdsFbagentData_args();
        args.setData(data);
        args.setSkiphostdata(skiphostdata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOdsFbagentData();
      }
    }

    public void getEntityNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityNames_call method_call = new getEntityNames_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityNames_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getEntityNames_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityNames_args args = new getEntityNames_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityNames();
      }
    }

    public void getKeyNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKeyNames_call method_call = new getKeyNames_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getKeyNames_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getKeyNames_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKeyNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKeyNames_args args = new getKeyNames_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKeyNames();
      }
    }

    public void getKeyMapping(List<String> entities, long minutes_back, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKeyMapping_call method_call = new getKeyMapping_call(entities, minutes_back, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getKeyMapping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private long minutes_back;
      public getKeyMapping_call(List<String> entities, long minutes_back, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.minutes_back = minutes_back;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKeyMapping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKeyMapping_args args = new getKeyMapping_args();
        args.setEntities(entities);
        args.setMinutes_back(minutes_back);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKeyMapping();
      }
    }

    public void getEntityMapping(List<String> keys, long minutes_back, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityMapping_call method_call = new getEntityMapping_call(keys, minutes_back, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityMapping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> keys;
      private long minutes_back;
      public getEntityMapping_call(List<String> keys, long minutes_back, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keys = keys;
        this.minutes_back = minutes_back;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityMapping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityMapping_args args = new getEntityMapping_args();
        args.setKeys(keys);
        args.setMinutes_back(minutes_back);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityMapping();
      }
    }

    public void getAggregateEntityNames(String regexp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAggregateEntityNames_call method_call = new getAggregateEntityNames_call(regexp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAggregateEntityNames_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String regexp;
      public getAggregateEntityNames_call(String regexp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.regexp = regexp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAggregateEntityNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAggregateEntityNames_args args = new getAggregateEntityNames_args();
        args.setRegexp(regexp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAggregateEntityNames();
      }
    }

    public void getMapping(List<String> entities, long minutes_back, boolean get_key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMapping_call method_call = new getMapping_call(entities, minutes_back, get_key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMapping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> entities;
      private long minutes_back;
      private boolean get_key;
      public getMapping_call(List<String> entities, long minutes_back, boolean get_key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
        this.minutes_back = minutes_back;
        this.get_key = get_key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMapping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMapping_args args = new getMapping_args();
        args.setEntities(entities);
        args.setMinutes_back(minutes_back);
        args.setGet_key(get_key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMapping();
      }
    }

    public void getCorrespondingKeys(List<String> keywords, List<String> entities, int minutes_back, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCorrespondingKeys_call method_call = new getCorrespondingKeys_call(keywords, entities, minutes_back, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCorrespondingKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> keywords;
      private List<String> entities;
      private int minutes_back;
      private int limit;
      public getCorrespondingKeys_call(List<String> keywords, List<String> entities, int minutes_back, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keywords = keywords;
        this.entities = entities;
        this.minutes_back = minutes_back;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCorrespondingKeys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCorrespondingKeys_args args = new getCorrespondingKeys_args();
        args.setKeywords(keywords);
        args.setEntities(entities);
        args.setMinutes_back(minutes_back);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OdsKeyEntityMapperResult getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCorrespondingKeys();
      }
    }

    public void getCorrespondingEntities(List<String> keywords, List<String> keys, int minutes_back, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCorrespondingEntities_call method_call = new getCorrespondingEntities_call(keywords, keys, minutes_back, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCorrespondingEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> keywords;
      private List<String> keys;
      private int minutes_back;
      private int limit;
      public getCorrespondingEntities_call(List<String> keywords, List<String> keys, int minutes_back, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keywords = keywords;
        this.keys = keys;
        this.minutes_back = minutes_back;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCorrespondingEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCorrespondingEntities_args args = new getCorrespondingEntities_args();
        args.setKeywords(keywords);
        args.setKeys(keys);
        args.setMinutes_back(minutes_back);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OdsKeyEntityMapperResult getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCorrespondingEntities();
      }
    }

    public void getEntitiesByTypeAndRegexs(int entity_type, int limit, OdsEntityOrderByType ordering, List<String> regexes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntitiesByTypeAndRegexs_call method_call = new getEntitiesByTypeAndRegexs_call(entity_type, limit, ordering, regexes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntitiesByTypeAndRegexs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int entity_type;
      private int limit;
      private OdsEntityOrderByType ordering;
      private List<String> regexes;
      public getEntitiesByTypeAndRegexs_call(int entity_type, int limit, OdsEntityOrderByType ordering, List<String> regexes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity_type = entity_type;
        this.limit = limit;
        this.ordering = ordering;
        this.regexes = regexes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntitiesByTypeAndRegexs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntitiesByTypeAndRegexs_args args = new getEntitiesByTypeAndRegexs_args();
        args.setEntity_type(entity_type);
        args.setLimit(limit);
        args.setOrdering(ordering);
        args.setRegexes(regexes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OdsKeyEntityMapperResult getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntitiesByTypeAndRegexs();
      }
    }

    public void getKeysByRegexs(List<String> keywords, int limit, boolean use_cdbdao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKeysByRegexs_call method_call = new getKeysByRegexs_call(keywords, limit, use_cdbdao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getKeysByRegexs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> keywords;
      private int limit;
      private boolean use_cdbdao;
      public getKeysByRegexs_call(List<String> keywords, int limit, boolean use_cdbdao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keywords = keywords;
        this.limit = limit;
        this.use_cdbdao = use_cdbdao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKeysByRegexs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKeysByRegexs_args args = new getKeysByRegexs_args();
        args.setKeywords(keywords);
        args.setLimit(limit);
        args.setUse_cdbdao(use_cdbdao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OdsKeyEntityMapperResult getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKeysByRegexs();
      }
    }

    public void getAllAliveNumericKeyPrefixes(boolean returnKeysWithNoDelimiter, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllAliveNumericKeyPrefixes_call method_call = new getAllAliveNumericKeyPrefixes_call(returnKeysWithNoDelimiter, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllAliveNumericKeyPrefixes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean returnKeysWithNoDelimiter;
      private int limit;
      public getAllAliveNumericKeyPrefixes_call(boolean returnKeysWithNoDelimiter, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.returnKeysWithNoDelimiter = returnKeysWithNoDelimiter;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllAliveNumericKeyPrefixes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllAliveNumericKeyPrefixes_args args = new getAllAliveNumericKeyPrefixes_args();
        args.setReturnKeysWithNoDelimiter(returnKeysWithNoDelimiter);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllAliveNumericKeyPrefixes();
      }
    }

    public void getAllAliveNumericKeys(String prefix, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllAliveNumericKeys_call method_call = new getAllAliveNumericKeys_call(prefix, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllAliveNumericKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String prefix;
      private int limit;
      public getAllAliveNumericKeys_call(String prefix, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefix = prefix;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllAliveNumericKeys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllAliveNumericKeys_args args = new getAllAliveNumericKeys_args();
        args.setPrefix(prefix);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllAliveNumericKeys();
      }
    }

    public void getAllKeys(String prefix, int key_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllKeys_call method_call = new getAllKeys_call(prefix, key_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String prefix;
      private int key_type;
      public getAllKeys_call(String prefix, int key_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefix = prefix;
        this.key_type = key_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllKeys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllKeys_args args = new getAllKeys_args();
        args.setPrefix(prefix);
        args.setKey_type(key_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllKeys();
      }
    }

    public void getGlobalAggregationEntities(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGlobalAggregationEntities_call method_call = new getGlobalAggregationEntities_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGlobalAggregationEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getGlobalAggregationEntities_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGlobalAggregationEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGlobalAggregationEntities_args args = new getGlobalAggregationEntities_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGlobalAggregationEntities();
      }
    }

    public void findExactMatch(String keyword_to_search, boolean is_entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findExactMatch_call method_call = new findExactMatch_call(keyword_to_search, is_entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findExactMatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String keyword_to_search;
      private boolean is_entity;
      public findExactMatch_call(String keyword_to_search, boolean is_entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyword_to_search = keyword_to_search;
        this.is_entity = is_entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findExactMatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findExactMatch_args args = new findExactMatch_args();
        args.setKeyword_to_search(keyword_to_search);
        args.setIs_entity(is_entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findExactMatch();
      }
    }

    public void searchEntityOrKey(List<String> keywords, int limit, boolean is_entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchEntityOrKey_call method_call = new searchEntityOrKey_call(keywords, limit, is_entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchEntityOrKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> keywords;
      private int limit;
      private boolean is_entity;
      public searchEntityOrKey_call(List<String> keywords, int limit, boolean is_entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keywords = keywords;
        this.limit = limit;
        this.is_entity = is_entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchEntityOrKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchEntityOrKey_args args = new searchEntityOrKey_args();
        args.setKeywords(keywords);
        args.setLimit(limit);
        args.setIs_entity(is_entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OdsKeyEntityMapperResult getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchEntityOrKey();
      }
    }

    public void getRecentEntities(int entity_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecentEntities_call method_call = new getRecentEntities_call(entity_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecentEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int entity_id;
      public getRecentEntities_call(int entity_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entity_id = entity_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecentEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecentEntities_args args = new getRecentEntities_args();
        args.setEntity_id(entity_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RecentEntitiesOrKeys getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecentEntities();
      }
    }

    public void getRecentKeys(int key_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecentKeys_call method_call = new getRecentKeys_call(key_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecentKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int key_id;
      public getRecentKeys_call(int key_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key_id = key_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecentKeys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecentKeys_args args = new getRecentKeys_args();
        args.setKey_id(key_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RecentEntitiesOrKeys getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecentKeys();
      }
    }

    public void getEntityIdByName(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityIdByName_call method_call = new getEntityIdByName_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityIdByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public getEntityIdByName_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityIdByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityIdByName_args args = new getEntityIdByName_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityIdByName();
      }
    }

    public void getMaxEntityId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMaxEntityId_call method_call = new getMaxEntityId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMaxEntityId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMaxEntityId_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMaxEntityId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMaxEntityId_args args = new getMaxEntityId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMaxEntityId();
      }
    }

    public void getKeyIdByName(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKeyIdByName_call method_call = new getKeyIdByName_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getKeyIdByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public getKeyIdByName_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKeyIdByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKeyIdByName_args args = new getKeyIdByName_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKeyIdByName();
      }
    }

    public void getMaxKeyId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMaxKeyId_call method_call = new getMaxKeyId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMaxKeyId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMaxKeyId_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMaxKeyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMaxKeyId_args args = new getMaxKeyId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMaxKeyId();
      }
    }

    public void getDdbIdByEntityId(long entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDdbIdByEntityId_call method_call = new getDdbIdByEntityId_call(entityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDdbIdByEntityId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long entityId;
      public getDdbIdByEntityId_call(long entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityId = entityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDdbIdByEntityId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDdbIdByEntityId_args args = new getDdbIdByEntityId_args();
        args.setEntityId(entityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDdbIdByEntityId();
      }
    }

    public void getAggregateDdbIdByEntityId(long entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAggregateDdbIdByEntityId_call method_call = new getAggregateDdbIdByEntityId_call(entityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAggregateDdbIdByEntityId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long entityId;
      public getAggregateDdbIdByEntityId_call(long entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityId = entityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAggregateDdbIdByEntityId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAggregateDdbIdByEntityId_args args = new getAggregateDdbIdByEntityId_args();
        args.setEntityId(entityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws OdsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAggregateDdbIdByEntityId();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.facebook.fb303.FacebookService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setOdsValues", new setOdsValues());
      processMap.put("setOdsAggValues", new setOdsAggValues());
      processMap.put("setOdsRollupValues", new setOdsRollupValues());
      processMap.put("setOdsRateOfChangeValues", new setOdsRateOfChangeValues());
      processMap.put("setOdsValuesWithHostRollup", new setOdsValuesWithHostRollup());
      processMap.put("getOdsValues", new getOdsValues());
      processMap.put("setOdsHistoricalData", new setOdsHistoricalData());
      processMap.put("deleteOdsHistoricalData", new deleteOdsHistoricalData());
      processMap.put("getSnapshotWithFilters", new getSnapshotWithFilters());
      processMap.put("getSnapshotCompressed", new getSnapshotCompressed());
      processMap.put("getEntityValues", new getEntityValues());
      processMap.put("getTimeSeries", new getTimeSeries());
      processMap.put("getEntityValuesCompressed", new getEntityValuesCompressed());
      processMap.put("getRegexEntityValues", new getRegexEntityValues());
      processMap.put("getRegexEntityValuesCompressed", new getRegexEntityValuesCompressed());
      processMap.put("getEntityAggValues", new getEntityAggValues());
      processMap.put("getRegexEntityAggValues", new getRegexEntityAggValues());
      processMap.put("getAggSources", new getAggSources());
      processMap.put("getOdsTimeSeriesByAggregationType", new getOdsTimeSeriesByAggregationType());
      processMap.put("getOdsTimeSeriesByAggregationTypeCompressed", new getOdsTimeSeriesByAggregationTypeCompressed());
      processMap.put("getOdsTimeSeriesSimple", new getOdsTimeSeriesSimple());
      processMap.put("getTimeSeriesByAggType", new getTimeSeriesByAggType());
      processMap.put("getOdsTimeSeriesSimpleCompressed", new getOdsTimeSeriesSimpleCompressed());
      processMap.put("getAdvancedTransformQuery", new getAdvancedTransformQuery());
      processMap.put("getTopNActiveKeyPrefix", new getTopNActiveKeyPrefix());
      processMap.put("setMultipleOdsValues", new setMultipleOdsValues());
      processMap.put("setODSData", new setODSData());
      processMap.put("setOdsFbagentHostData", new setOdsFbagentHostData());
      processMap.put("setOdsFbagentData", new setOdsFbagentData());
      processMap.put("getEntityNames", new getEntityNames());
      processMap.put("getKeyNames", new getKeyNames());
      processMap.put("getKeyMapping", new getKeyMapping());
      processMap.put("getEntityMapping", new getEntityMapping());
      processMap.put("getAggregateEntityNames", new getAggregateEntityNames());
      processMap.put("getMapping", new getMapping());
      processMap.put("getCorrespondingKeys", new getCorrespondingKeys());
      processMap.put("getCorrespondingEntities", new getCorrespondingEntities());
      processMap.put("getEntitiesByTypeAndRegexs", new getEntitiesByTypeAndRegexs());
      processMap.put("getKeysByRegexs", new getKeysByRegexs());
      processMap.put("getAllAliveNumericKeyPrefixes", new getAllAliveNumericKeyPrefixes());
      processMap.put("getAllAliveNumericKeys", new getAllAliveNumericKeys());
      processMap.put("getAllKeys", new getAllKeys());
      processMap.put("getGlobalAggregationEntities", new getGlobalAggregationEntities());
      processMap.put("findExactMatch", new findExactMatch());
      processMap.put("searchEntityOrKey", new searchEntityOrKey());
      processMap.put("getRecentEntities", new getRecentEntities());
      processMap.put("getRecentKeys", new getRecentKeys());
      processMap.put("getEntityIdByName", new getEntityIdByName());
      processMap.put("getMaxEntityId", new getMaxEntityId());
      processMap.put("getKeyIdByName", new getKeyIdByName());
      processMap.put("getMaxKeyId", new getMaxKeyId());
      processMap.put("getDdbIdByEntityId", new getDdbIdByEntityId());
      processMap.put("getAggregateDdbIdByEntityId", new getAggregateDdbIdByEntityId());
      return processMap;
    }

    public static class setOdsValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsValues_args> {
      public setOdsValues() {
        super("setOdsValues");
      }

      public setOdsValues_args getEmptyArgsInstance() {
        return new setOdsValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsValues_result getResult(I iface, setOdsValues_args args) throws org.apache.thrift.TException {
        setOdsValues_result result = new setOdsValues_result();
        try {
          iface.setOdsValues(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsAggValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsAggValues_args> {
      public setOdsAggValues() {
        super("setOdsAggValues");
      }

      public setOdsAggValues_args getEmptyArgsInstance() {
        return new setOdsAggValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsAggValues_result getResult(I iface, setOdsAggValues_args args) throws org.apache.thrift.TException {
        setOdsAggValues_result result = new setOdsAggValues_result();
        try {
          iface.setOdsAggValues(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsRollupValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsRollupValues_args> {
      public setOdsRollupValues() {
        super("setOdsRollupValues");
      }

      public setOdsRollupValues_args getEmptyArgsInstance() {
        return new setOdsRollupValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsRollupValues_result getResult(I iface, setOdsRollupValues_args args) throws org.apache.thrift.TException {
        setOdsRollupValues_result result = new setOdsRollupValues_result();
        try {
          iface.setOdsRollupValues(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsRateOfChangeValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsRateOfChangeValues_args> {
      public setOdsRateOfChangeValues() {
        super("setOdsRateOfChangeValues");
      }

      public setOdsRateOfChangeValues_args getEmptyArgsInstance() {
        return new setOdsRateOfChangeValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsRateOfChangeValues_result getResult(I iface, setOdsRateOfChangeValues_args args) throws org.apache.thrift.TException {
        setOdsRateOfChangeValues_result result = new setOdsRateOfChangeValues_result();
        try {
          iface.setOdsRateOfChangeValues(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsValuesWithHostRollup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsValuesWithHostRollup_args> {
      public setOdsValuesWithHostRollup() {
        super("setOdsValuesWithHostRollup");
      }

      public setOdsValuesWithHostRollup_args getEmptyArgsInstance() {
        return new setOdsValuesWithHostRollup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsValuesWithHostRollup_result getResult(I iface, setOdsValuesWithHostRollup_args args) throws org.apache.thrift.TException {
        setOdsValuesWithHostRollup_result result = new setOdsValuesWithHostRollup_result();
        try {
          iface.setOdsValuesWithHostRollup(args.data, args.doHostRollup);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getOdsValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOdsValues_args> {
      public getOdsValues() {
        super("getOdsValues");
      }

      public getOdsValues_args getEmptyArgsInstance() {
        return new getOdsValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOdsValues_result getResult(I iface, getOdsValues_args args) throws org.apache.thrift.TException {
        getOdsValues_result result = new getOdsValues_result();
        try {
          result.success = iface.getOdsValues(args.entity, args.key, args.start, args.end_, args.table, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsHistoricalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsHistoricalData_args> {
      public setOdsHistoricalData() {
        super("setOdsHistoricalData");
      }

      public setOdsHistoricalData_args getEmptyArgsInstance() {
        return new setOdsHistoricalData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsHistoricalData_result getResult(I iface, setOdsHistoricalData_args args) throws org.apache.thrift.TException {
        setOdsHistoricalData_result result = new setOdsHistoricalData_result();
        try {
          iface.setOdsHistoricalData(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class deleteOdsHistoricalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOdsHistoricalData_args> {
      public deleteOdsHistoricalData() {
        super("deleteOdsHistoricalData");
      }

      public deleteOdsHistoricalData_args getEmptyArgsInstance() {
        return new deleteOdsHistoricalData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOdsHistoricalData_result getResult(I iface, deleteOdsHistoricalData_args args) throws org.apache.thrift.TException {
        deleteOdsHistoricalData_result result = new deleteOdsHistoricalData_result();
        try {
          iface.deleteOdsHistoricalData(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getSnapshotWithFilters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSnapshotWithFilters_args> {
      public getSnapshotWithFilters() {
        super("getSnapshotWithFilters");
      }

      public getSnapshotWithFilters_args getEmptyArgsInstance() {
        return new getSnapshotWithFilters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSnapshotWithFilters_result getResult(I iface, getSnapshotWithFilters_args args) throws org.apache.thrift.TException {
        getSnapshotWithFilters_result result = new getSnapshotWithFilters_result();
        result.success = iface.getSnapshotWithFilters(args.entities, args.keys, args.timeStamp, args.filter, args.findMissingValue, args.periodOverride, args.entityIsRegex, args.keyIsRegex);
        return result;
      }
    }

    public static class getSnapshotCompressed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSnapshotCompressed_args> {
      public getSnapshotCompressed() {
        super("getSnapshotCompressed");
      }

      public getSnapshotCompressed_args getEmptyArgsInstance() {
        return new getSnapshotCompressed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSnapshotCompressed_result getResult(I iface, getSnapshotCompressed_args args) throws org.apache.thrift.TException {
        getSnapshotCompressed_result result = new getSnapshotCompressed_result();
        result.success = iface.getSnapshotCompressed(args.entities, args.keys, args.timeStamp, args.filter, args.findMissingValue, args.periodOverride, args.entityIsRegex, args.keyIsRegex);
        return result;
      }
    }

    public static class getEntityValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityValues_args> {
      public getEntityValues() {
        super("getEntityValues");
      }

      public getEntityValues_args getEmptyArgsInstance() {
        return new getEntityValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityValues_result getResult(I iface, getEntityValues_args args) throws org.apache.thrift.TException {
        getEntityValues_result result = new getEntityValues_result();
        try {
          result.success = iface.getEntityValues(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getTimeSeries<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimeSeries_args> {
      public getTimeSeries() {
        super("getTimeSeries");
      }

      public getTimeSeries_args getEmptyArgsInstance() {
        return new getTimeSeries_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimeSeries_result getResult(I iface, getTimeSeries_args args) throws org.apache.thrift.TException {
        getTimeSeries_result result = new getTimeSeries_result();
        try {
          result.success = iface.getTimeSeries(args.query);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getEntityValuesCompressed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityValuesCompressed_args> {
      public getEntityValuesCompressed() {
        super("getEntityValuesCompressed");
      }

      public getEntityValuesCompressed_args getEmptyArgsInstance() {
        return new getEntityValuesCompressed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityValuesCompressed_result getResult(I iface, getEntityValuesCompressed_args args) throws org.apache.thrift.TException {
        getEntityValuesCompressed_result result = new getEntityValuesCompressed_result();
        try {
          result.success = iface.getEntityValuesCompressed(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getRegexEntityValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegexEntityValues_args> {
      public getRegexEntityValues() {
        super("getRegexEntityValues");
      }

      public getRegexEntityValues_args getEmptyArgsInstance() {
        return new getRegexEntityValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegexEntityValues_result getResult(I iface, getRegexEntityValues_args args) throws org.apache.thrift.TException {
        getRegexEntityValues_result result = new getRegexEntityValues_result();
        try {
          result.success = iface.getRegexEntityValues(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getRegexEntityValuesCompressed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegexEntityValuesCompressed_args> {
      public getRegexEntityValuesCompressed() {
        super("getRegexEntityValuesCompressed");
      }

      public getRegexEntityValuesCompressed_args getEmptyArgsInstance() {
        return new getRegexEntityValuesCompressed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegexEntityValuesCompressed_result getResult(I iface, getRegexEntityValuesCompressed_args args) throws org.apache.thrift.TException {
        getRegexEntityValuesCompressed_result result = new getRegexEntityValuesCompressed_result();
        try {
          result.success = iface.getRegexEntityValuesCompressed(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getEntityAggValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityAggValues_args> {
      public getEntityAggValues() {
        super("getEntityAggValues");
      }

      public getEntityAggValues_args getEmptyArgsInstance() {
        return new getEntityAggValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityAggValues_result getResult(I iface, getEntityAggValues_args args) throws org.apache.thrift.TException {
        getEntityAggValues_result result = new getEntityAggValues_result();
        try {
          result.success = iface.getEntityAggValues(args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.bypassLimit, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getRegexEntityAggValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegexEntityAggValues_args> {
      public getRegexEntityAggValues() {
        super("getRegexEntityAggValues");
      }

      public getRegexEntityAggValues_args getEmptyArgsInstance() {
        return new getRegexEntityAggValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegexEntityAggValues_result getResult(I iface, getRegexEntityAggValues_args args) throws org.apache.thrift.TException {
        getRegexEntityAggValues_result result = new getRegexEntityAggValues_result();
        try {
          result.success = iface.getRegexEntityAggValues(args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.bypassLimit, args.aggregationType);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getAggSources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAggSources_args> {
      public getAggSources() {
        super("getAggSources");
      }

      public getAggSources_args getEmptyArgsInstance() {
        return new getAggSources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAggSources_result getResult(I iface, getAggSources_args args) throws org.apache.thrift.TException {
        getAggSources_result result = new getAggSources_result();
        result.success = iface.getAggSources(args.rgex, args.entities, args.keys, args.start, args.end_, args.window);
        return result;
      }
    }

    public static class getOdsTimeSeriesByAggregationType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOdsTimeSeriesByAggregationType_args> {
      public getOdsTimeSeriesByAggregationType() {
        super("getOdsTimeSeriesByAggregationType");
      }

      public getOdsTimeSeriesByAggregationType_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesByAggregationType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOdsTimeSeriesByAggregationType_result getResult(I iface, getOdsTimeSeriesByAggregationType_args args) throws org.apache.thrift.TException {
        getOdsTimeSeriesByAggregationType_result result = new getOdsTimeSeriesByAggregationType_result();
        result.success = iface.getOdsTimeSeriesByAggregationType(args.regex, args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.transformConfig, args.aggregationTypeBitMap, args.bestFitDegree, args.transformDataSources, args.topNOpts);
        return result;
      }
    }

    public static class getOdsTimeSeriesByAggregationTypeCompressed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOdsTimeSeriesByAggregationTypeCompressed_args> {
      public getOdsTimeSeriesByAggregationTypeCompressed() {
        super("getOdsTimeSeriesByAggregationTypeCompressed");
      }

      public getOdsTimeSeriesByAggregationTypeCompressed_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesByAggregationTypeCompressed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOdsTimeSeriesByAggregationTypeCompressed_result getResult(I iface, getOdsTimeSeriesByAggregationTypeCompressed_args args) throws org.apache.thrift.TException {
        getOdsTimeSeriesByAggregationTypeCompressed_result result = new getOdsTimeSeriesByAggregationTypeCompressed_result();
        result.success = iface.getOdsTimeSeriesByAggregationTypeCompressed(args.regex, args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.transformConfig, args.aggregationTypeBitMap, args.bestFitDegree, args.transformDataSources, args.topNOpts);
        return result;
      }
    }

    public static class getOdsTimeSeriesSimple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOdsTimeSeriesSimple_args> {
      public getOdsTimeSeriesSimple() {
        super("getOdsTimeSeriesSimple");
      }

      public getOdsTimeSeriesSimple_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesSimple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOdsTimeSeriesSimple_result getResult(I iface, getOdsTimeSeriesSimple_args args) throws org.apache.thrift.TException {
        getOdsTimeSeriesSimple_result result = new getOdsTimeSeriesSimple_result();
        result.success = iface.getOdsTimeSeriesSimple(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationTypeBitMap);
        return result;
      }
    }

    public static class getTimeSeriesByAggType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimeSeriesByAggType_args> {
      public getTimeSeriesByAggType() {
        super("getTimeSeriesByAggType");
      }

      public getTimeSeriesByAggType_args getEmptyArgsInstance() {
        return new getTimeSeriesByAggType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimeSeriesByAggType_result getResult(I iface, getTimeSeriesByAggType_args args) throws org.apache.thrift.TException {
        getTimeSeriesByAggType_result result = new getTimeSeriesByAggType_result();
        result.success = iface.getTimeSeriesByAggType(args.query);
        return result;
      }
    }

    public static class getOdsTimeSeriesSimpleCompressed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOdsTimeSeriesSimpleCompressed_args> {
      public getOdsTimeSeriesSimpleCompressed() {
        super("getOdsTimeSeriesSimpleCompressed");
      }

      public getOdsTimeSeriesSimpleCompressed_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesSimpleCompressed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOdsTimeSeriesSimpleCompressed_result getResult(I iface, getOdsTimeSeriesSimpleCompressed_args args) throws org.apache.thrift.TException {
        getOdsTimeSeriesSimpleCompressed_result result = new getOdsTimeSeriesSimpleCompressed_result();
        result.success = iface.getOdsTimeSeriesSimpleCompressed(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationTypeBitMap);
        return result;
      }
    }

    public static class getAdvancedTransformQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdvancedTransformQuery_args> {
      public getAdvancedTransformQuery() {
        super("getAdvancedTransformQuery");
      }

      public getAdvancedTransformQuery_args getEmptyArgsInstance() {
        return new getAdvancedTransformQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdvancedTransformQuery_result getResult(I iface, getAdvancedTransformQuery_args args) throws org.apache.thrift.TException {
        getAdvancedTransformQuery_result result = new getAdvancedTransformQuery_result();
        try {
          result.success = iface.getAdvancedTransformQuery(args.start_date, args.end_date, args.dataJSON, args.configJSON);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getTopNActiveKeyPrefix<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopNActiveKeyPrefix_args> {
      public getTopNActiveKeyPrefix() {
        super("getTopNActiveKeyPrefix");
      }

      public getTopNActiveKeyPrefix_args getEmptyArgsInstance() {
        return new getTopNActiveKeyPrefix_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopNActiveKeyPrefix_result getResult(I iface, getTopNActiveKeyPrefix_args args) throws org.apache.thrift.TException {
        getTopNActiveKeyPrefix_result result = new getTopNActiveKeyPrefix_result();
        result.success = iface.getTopNActiveKeyPrefix(args.n);
        return result;
      }
    }

    public static class setMultipleOdsValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setMultipleOdsValues_args> {
      public setMultipleOdsValues() {
        super("setMultipleOdsValues");
      }

      public setMultipleOdsValues_args getEmptyArgsInstance() {
        return new setMultipleOdsValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setMultipleOdsValues_result getResult(I iface, setMultipleOdsValues_args args) throws org.apache.thrift.TException {
        setMultipleOdsValues_result result = new setMultipleOdsValues_result();
        try {
          iface.setMultipleOdsValues(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setODSData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setODSData_args> {
      public setODSData() {
        super("setODSData");
      }

      public setODSData_args getEmptyArgsInstance() {
        return new setODSData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setODSData_result getResult(I iface, setODSData_args args) throws org.apache.thrift.TException {
        setODSData_result result = new setODSData_result();
        try {
          iface.setODSData(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsFbagentHostData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsFbagentHostData_args> {
      public setOdsFbagentHostData() {
        super("setOdsFbagentHostData");
      }

      public setOdsFbagentHostData_args getEmptyArgsInstance() {
        return new setOdsFbagentHostData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsFbagentHostData_result getResult(I iface, setOdsFbagentHostData_args args) throws org.apache.thrift.TException {
        setOdsFbagentHostData_result result = new setOdsFbagentHostData_result();
        try {
          iface.setOdsFbagentHostData(args.data);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class setOdsFbagentData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOdsFbagentData_args> {
      public setOdsFbagentData() {
        super("setOdsFbagentData");
      }

      public setOdsFbagentData_args getEmptyArgsInstance() {
        return new setOdsFbagentData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOdsFbagentData_result getResult(I iface, setOdsFbagentData_args args) throws org.apache.thrift.TException {
        setOdsFbagentData_result result = new setOdsFbagentData_result();
        try {
          iface.setOdsFbagentData(args.data, args.skiphostdata);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getEntityNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityNames_args> {
      public getEntityNames() {
        super("getEntityNames");
      }

      public getEntityNames_args getEmptyArgsInstance() {
        return new getEntityNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityNames_result getResult(I iface, getEntityNames_args args) throws org.apache.thrift.TException {
        getEntityNames_result result = new getEntityNames_result();
        result.success = iface.getEntityNames();
        return result;
      }
    }

    public static class getKeyNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getKeyNames_args> {
      public getKeyNames() {
        super("getKeyNames");
      }

      public getKeyNames_args getEmptyArgsInstance() {
        return new getKeyNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getKeyNames_result getResult(I iface, getKeyNames_args args) throws org.apache.thrift.TException {
        getKeyNames_result result = new getKeyNames_result();
        result.success = iface.getKeyNames();
        return result;
      }
    }

    public static class getKeyMapping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getKeyMapping_args> {
      public getKeyMapping() {
        super("getKeyMapping");
      }

      public getKeyMapping_args getEmptyArgsInstance() {
        return new getKeyMapping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getKeyMapping_result getResult(I iface, getKeyMapping_args args) throws org.apache.thrift.TException {
        getKeyMapping_result result = new getKeyMapping_result();
        result.success = iface.getKeyMapping(args.entities, args.minutes_back);
        return result;
      }
    }

    public static class getEntityMapping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityMapping_args> {
      public getEntityMapping() {
        super("getEntityMapping");
      }

      public getEntityMapping_args getEmptyArgsInstance() {
        return new getEntityMapping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityMapping_result getResult(I iface, getEntityMapping_args args) throws org.apache.thrift.TException {
        getEntityMapping_result result = new getEntityMapping_result();
        result.success = iface.getEntityMapping(args.keys, args.minutes_back);
        return result;
      }
    }

    public static class getAggregateEntityNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAggregateEntityNames_args> {
      public getAggregateEntityNames() {
        super("getAggregateEntityNames");
      }

      public getAggregateEntityNames_args getEmptyArgsInstance() {
        return new getAggregateEntityNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAggregateEntityNames_result getResult(I iface, getAggregateEntityNames_args args) throws org.apache.thrift.TException {
        getAggregateEntityNames_result result = new getAggregateEntityNames_result();
        result.success = iface.getAggregateEntityNames(args.regexp);
        return result;
      }
    }

    public static class getMapping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMapping_args> {
      public getMapping() {
        super("getMapping");
      }

      public getMapping_args getEmptyArgsInstance() {
        return new getMapping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMapping_result getResult(I iface, getMapping_args args) throws org.apache.thrift.TException {
        getMapping_result result = new getMapping_result();
        try {
          result.success = iface.getMapping(args.entities, args.minutes_back, args.get_key);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getCorrespondingKeys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCorrespondingKeys_args> {
      public getCorrespondingKeys() {
        super("getCorrespondingKeys");
      }

      public getCorrespondingKeys_args getEmptyArgsInstance() {
        return new getCorrespondingKeys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCorrespondingKeys_result getResult(I iface, getCorrespondingKeys_args args) throws org.apache.thrift.TException {
        getCorrespondingKeys_result result = new getCorrespondingKeys_result();
        try {
          result.success = iface.getCorrespondingKeys(args.keywords, args.entities, args.minutes_back, args.limit);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getCorrespondingEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCorrespondingEntities_args> {
      public getCorrespondingEntities() {
        super("getCorrespondingEntities");
      }

      public getCorrespondingEntities_args getEmptyArgsInstance() {
        return new getCorrespondingEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCorrespondingEntities_result getResult(I iface, getCorrespondingEntities_args args) throws org.apache.thrift.TException {
        getCorrespondingEntities_result result = new getCorrespondingEntities_result();
        try {
          result.success = iface.getCorrespondingEntities(args.keywords, args.keys, args.minutes_back, args.limit);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getEntitiesByTypeAndRegexs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntitiesByTypeAndRegexs_args> {
      public getEntitiesByTypeAndRegexs() {
        super("getEntitiesByTypeAndRegexs");
      }

      public getEntitiesByTypeAndRegexs_args getEmptyArgsInstance() {
        return new getEntitiesByTypeAndRegexs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntitiesByTypeAndRegexs_result getResult(I iface, getEntitiesByTypeAndRegexs_args args) throws org.apache.thrift.TException {
        getEntitiesByTypeAndRegexs_result result = new getEntitiesByTypeAndRegexs_result();
        try {
          result.success = iface.getEntitiesByTypeAndRegexs(args.entity_type, args.limit, args.ordering, args.regexes);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getKeysByRegexs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getKeysByRegexs_args> {
      public getKeysByRegexs() {
        super("getKeysByRegexs");
      }

      public getKeysByRegexs_args getEmptyArgsInstance() {
        return new getKeysByRegexs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getKeysByRegexs_result getResult(I iface, getKeysByRegexs_args args) throws org.apache.thrift.TException {
        getKeysByRegexs_result result = new getKeysByRegexs_result();
        try {
          result.success = iface.getKeysByRegexs(args.keywords, args.limit, args.use_cdbdao);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getAllAliveNumericKeyPrefixes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllAliveNumericKeyPrefixes_args> {
      public getAllAliveNumericKeyPrefixes() {
        super("getAllAliveNumericKeyPrefixes");
      }

      public getAllAliveNumericKeyPrefixes_args getEmptyArgsInstance() {
        return new getAllAliveNumericKeyPrefixes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllAliveNumericKeyPrefixes_result getResult(I iface, getAllAliveNumericKeyPrefixes_args args) throws org.apache.thrift.TException {
        getAllAliveNumericKeyPrefixes_result result = new getAllAliveNumericKeyPrefixes_result();
        try {
          result.success = iface.getAllAliveNumericKeyPrefixes(args.returnKeysWithNoDelimiter, args.limit);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getAllAliveNumericKeys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllAliveNumericKeys_args> {
      public getAllAliveNumericKeys() {
        super("getAllAliveNumericKeys");
      }

      public getAllAliveNumericKeys_args getEmptyArgsInstance() {
        return new getAllAliveNumericKeys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllAliveNumericKeys_result getResult(I iface, getAllAliveNumericKeys_args args) throws org.apache.thrift.TException {
        getAllAliveNumericKeys_result result = new getAllAliveNumericKeys_result();
        try {
          result.success = iface.getAllAliveNumericKeys(args.prefix, args.limit);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getAllKeys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllKeys_args> {
      public getAllKeys() {
        super("getAllKeys");
      }

      public getAllKeys_args getEmptyArgsInstance() {
        return new getAllKeys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllKeys_result getResult(I iface, getAllKeys_args args) throws org.apache.thrift.TException {
        getAllKeys_result result = new getAllKeys_result();
        result.success = iface.getAllKeys(args.prefix, args.key_type);
        return result;
      }
    }

    public static class getGlobalAggregationEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGlobalAggregationEntities_args> {
      public getGlobalAggregationEntities() {
        super("getGlobalAggregationEntities");
      }

      public getGlobalAggregationEntities_args getEmptyArgsInstance() {
        return new getGlobalAggregationEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGlobalAggregationEntities_result getResult(I iface, getGlobalAggregationEntities_args args) throws org.apache.thrift.TException {
        getGlobalAggregationEntities_result result = new getGlobalAggregationEntities_result();
        result.success = iface.getGlobalAggregationEntities();
        return result;
      }
    }

    public static class findExactMatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findExactMatch_args> {
      public findExactMatch() {
        super("findExactMatch");
      }

      public findExactMatch_args getEmptyArgsInstance() {
        return new findExactMatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findExactMatch_result getResult(I iface, findExactMatch_args args) throws org.apache.thrift.TException {
        findExactMatch_result result = new findExactMatch_result();
        result.success = iface.findExactMatch(args.keyword_to_search, args.is_entity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class searchEntityOrKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchEntityOrKey_args> {
      public searchEntityOrKey() {
        super("searchEntityOrKey");
      }

      public searchEntityOrKey_args getEmptyArgsInstance() {
        return new searchEntityOrKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchEntityOrKey_result getResult(I iface, searchEntityOrKey_args args) throws org.apache.thrift.TException {
        searchEntityOrKey_result result = new searchEntityOrKey_result();
        try {
          result.success = iface.searchEntityOrKey(args.keywords, args.limit, args.is_entity);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getRecentEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecentEntities_args> {
      public getRecentEntities() {
        super("getRecentEntities");
      }

      public getRecentEntities_args getEmptyArgsInstance() {
        return new getRecentEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecentEntities_result getResult(I iface, getRecentEntities_args args) throws org.apache.thrift.TException {
        getRecentEntities_result result = new getRecentEntities_result();
        result.success = iface.getRecentEntities(args.entity_id);
        return result;
      }
    }

    public static class getRecentKeys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecentKeys_args> {
      public getRecentKeys() {
        super("getRecentKeys");
      }

      public getRecentKeys_args getEmptyArgsInstance() {
        return new getRecentKeys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecentKeys_result getResult(I iface, getRecentKeys_args args) throws org.apache.thrift.TException {
        getRecentKeys_result result = new getRecentKeys_result();
        result.success = iface.getRecentKeys(args.key_id);
        return result;
      }
    }

    public static class getEntityIdByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityIdByName_args> {
      public getEntityIdByName() {
        super("getEntityIdByName");
      }

      public getEntityIdByName_args getEmptyArgsInstance() {
        return new getEntityIdByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityIdByName_result getResult(I iface, getEntityIdByName_args args) throws org.apache.thrift.TException {
        getEntityIdByName_result result = new getEntityIdByName_result();
        try {
          result.success = iface.getEntityIdByName(args.name);
          result.setSuccessIsSet(true);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getMaxEntityId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMaxEntityId_args> {
      public getMaxEntityId() {
        super("getMaxEntityId");
      }

      public getMaxEntityId_args getEmptyArgsInstance() {
        return new getMaxEntityId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMaxEntityId_result getResult(I iface, getMaxEntityId_args args) throws org.apache.thrift.TException {
        getMaxEntityId_result result = new getMaxEntityId_result();
        result.success = iface.getMaxEntityId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getKeyIdByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getKeyIdByName_args> {
      public getKeyIdByName() {
        super("getKeyIdByName");
      }

      public getKeyIdByName_args getEmptyArgsInstance() {
        return new getKeyIdByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getKeyIdByName_result getResult(I iface, getKeyIdByName_args args) throws org.apache.thrift.TException {
        getKeyIdByName_result result = new getKeyIdByName_result();
        try {
          result.success = iface.getKeyIdByName(args.name);
          result.setSuccessIsSet(true);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getMaxKeyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMaxKeyId_args> {
      public getMaxKeyId() {
        super("getMaxKeyId");
      }

      public getMaxKeyId_args getEmptyArgsInstance() {
        return new getMaxKeyId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMaxKeyId_result getResult(I iface, getMaxKeyId_args args) throws org.apache.thrift.TException {
        getMaxKeyId_result result = new getMaxKeyId_result();
        result.success = iface.getMaxKeyId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDdbIdByEntityId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDdbIdByEntityId_args> {
      public getDdbIdByEntityId() {
        super("getDdbIdByEntityId");
      }

      public getDdbIdByEntityId_args getEmptyArgsInstance() {
        return new getDdbIdByEntityId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDdbIdByEntityId_result getResult(I iface, getDdbIdByEntityId_args args) throws org.apache.thrift.TException {
        getDdbIdByEntityId_result result = new getDdbIdByEntityId_result();
        try {
          result.success = iface.getDdbIdByEntityId(args.entityId);
          result.setSuccessIsSet(true);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

    public static class getAggregateDdbIdByEntityId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAggregateDdbIdByEntityId_args> {
      public getAggregateDdbIdByEntityId() {
        super("getAggregateDdbIdByEntityId");
      }

      public getAggregateDdbIdByEntityId_args getEmptyArgsInstance() {
        return new getAggregateDdbIdByEntityId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAggregateDdbIdByEntityId_result getResult(I iface, getAggregateDdbIdByEntityId_args args) throws org.apache.thrift.TException {
        getAggregateDdbIdByEntityId_result result = new getAggregateDdbIdByEntityId_result();
        try {
          result.success = iface.getAggregateDdbIdByEntityId(args.entityId);
          result.setSuccessIsSet(true);
        } catch (OdsException oe) {
          result.oe = oe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.facebook.fb303.FacebookService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setOdsValues", new setOdsValues());
      processMap.put("setOdsAggValues", new setOdsAggValues());
      processMap.put("setOdsRollupValues", new setOdsRollupValues());
      processMap.put("setOdsRateOfChangeValues", new setOdsRateOfChangeValues());
      processMap.put("setOdsValuesWithHostRollup", new setOdsValuesWithHostRollup());
      processMap.put("getOdsValues", new getOdsValues());
      processMap.put("setOdsHistoricalData", new setOdsHistoricalData());
      processMap.put("deleteOdsHistoricalData", new deleteOdsHistoricalData());
      processMap.put("getSnapshotWithFilters", new getSnapshotWithFilters());
      processMap.put("getSnapshotCompressed", new getSnapshotCompressed());
      processMap.put("getEntityValues", new getEntityValues());
      processMap.put("getTimeSeries", new getTimeSeries());
      processMap.put("getEntityValuesCompressed", new getEntityValuesCompressed());
      processMap.put("getRegexEntityValues", new getRegexEntityValues());
      processMap.put("getRegexEntityValuesCompressed", new getRegexEntityValuesCompressed());
      processMap.put("getEntityAggValues", new getEntityAggValues());
      processMap.put("getRegexEntityAggValues", new getRegexEntityAggValues());
      processMap.put("getAggSources", new getAggSources());
      processMap.put("getOdsTimeSeriesByAggregationType", new getOdsTimeSeriesByAggregationType());
      processMap.put("getOdsTimeSeriesByAggregationTypeCompressed", new getOdsTimeSeriesByAggregationTypeCompressed());
      processMap.put("getOdsTimeSeriesSimple", new getOdsTimeSeriesSimple());
      processMap.put("getTimeSeriesByAggType", new getTimeSeriesByAggType());
      processMap.put("getOdsTimeSeriesSimpleCompressed", new getOdsTimeSeriesSimpleCompressed());
      processMap.put("getAdvancedTransformQuery", new getAdvancedTransformQuery());
      processMap.put("getTopNActiveKeyPrefix", new getTopNActiveKeyPrefix());
      processMap.put("setMultipleOdsValues", new setMultipleOdsValues());
      processMap.put("setODSData", new setODSData());
      processMap.put("setOdsFbagentHostData", new setOdsFbagentHostData());
      processMap.put("setOdsFbagentData", new setOdsFbagentData());
      processMap.put("getEntityNames", new getEntityNames());
      processMap.put("getKeyNames", new getKeyNames());
      processMap.put("getKeyMapping", new getKeyMapping());
      processMap.put("getEntityMapping", new getEntityMapping());
      processMap.put("getAggregateEntityNames", new getAggregateEntityNames());
      processMap.put("getMapping", new getMapping());
      processMap.put("getCorrespondingKeys", new getCorrespondingKeys());
      processMap.put("getCorrespondingEntities", new getCorrespondingEntities());
      processMap.put("getEntitiesByTypeAndRegexs", new getEntitiesByTypeAndRegexs());
      processMap.put("getKeysByRegexs", new getKeysByRegexs());
      processMap.put("getAllAliveNumericKeyPrefixes", new getAllAliveNumericKeyPrefixes());
      processMap.put("getAllAliveNumericKeys", new getAllAliveNumericKeys());
      processMap.put("getAllKeys", new getAllKeys());
      processMap.put("getGlobalAggregationEntities", new getGlobalAggregationEntities());
      processMap.put("findExactMatch", new findExactMatch());
      processMap.put("searchEntityOrKey", new searchEntityOrKey());
      processMap.put("getRecentEntities", new getRecentEntities());
      processMap.put("getRecentKeys", new getRecentKeys());
      processMap.put("getEntityIdByName", new getEntityIdByName());
      processMap.put("getMaxEntityId", new getMaxEntityId());
      processMap.put("getKeyIdByName", new getKeyIdByName());
      processMap.put("getMaxKeyId", new getMaxKeyId());
      processMap.put("getDdbIdByEntityId", new getDdbIdByEntityId());
      processMap.put("getAggregateDdbIdByEntityId", new getAggregateDdbIdByEntityId());
      return processMap;
    }

    public static class setOdsValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsValues_args, Void> {
      public setOdsValues() {
        super("setOdsValues");
      }

      public setOdsValues_args getEmptyArgsInstance() {
        return new setOdsValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsValues_result result = new setOdsValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsValues_result result = new setOdsValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsValues(args.data,resultHandler);
      }
    }

    public static class setOdsAggValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsAggValues_args, Void> {
      public setOdsAggValues() {
        super("setOdsAggValues");
      }

      public setOdsAggValues_args getEmptyArgsInstance() {
        return new setOdsAggValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsAggValues_result result = new setOdsAggValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsAggValues_result result = new setOdsAggValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsAggValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsAggValues(args.data,resultHandler);
      }
    }

    public static class setOdsRollupValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsRollupValues_args, Void> {
      public setOdsRollupValues() {
        super("setOdsRollupValues");
      }

      public setOdsRollupValues_args getEmptyArgsInstance() {
        return new setOdsRollupValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsRollupValues_result result = new setOdsRollupValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsRollupValues_result result = new setOdsRollupValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsRollupValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsRollupValues(args.data,resultHandler);
      }
    }

    public static class setOdsRateOfChangeValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsRateOfChangeValues_args, Void> {
      public setOdsRateOfChangeValues() {
        super("setOdsRateOfChangeValues");
      }

      public setOdsRateOfChangeValues_args getEmptyArgsInstance() {
        return new setOdsRateOfChangeValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsRateOfChangeValues_result result = new setOdsRateOfChangeValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsRateOfChangeValues_result result = new setOdsRateOfChangeValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsRateOfChangeValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsRateOfChangeValues(args.data,resultHandler);
      }
    }

    public static class setOdsValuesWithHostRollup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsValuesWithHostRollup_args, Void> {
      public setOdsValuesWithHostRollup() {
        super("setOdsValuesWithHostRollup");
      }

      public setOdsValuesWithHostRollup_args getEmptyArgsInstance() {
        return new setOdsValuesWithHostRollup_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsValuesWithHostRollup_result result = new setOdsValuesWithHostRollup_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsValuesWithHostRollup_result result = new setOdsValuesWithHostRollup_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsValuesWithHostRollup_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsValuesWithHostRollup(args.data, args.doHostRollup,resultHandler);
      }
    }

    public static class getOdsValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOdsValues_args, List<TimeValue>> {
      public getOdsValues() {
        super("getOdsValues");
      }

      public getOdsValues_args getEmptyArgsInstance() {
        return new getOdsValues_args();
      }

      public AsyncMethodCallback<List<TimeValue>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TimeValue>>() { 
          public void onComplete(List<TimeValue> o) {
            getOdsValues_result result = new getOdsValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOdsValues_result result = new getOdsValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOdsValues_args args, org.apache.thrift.async.AsyncMethodCallback<List<TimeValue>> resultHandler) throws TException {
        iface.getOdsValues(args.entity, args.key, args.start, args.end_, args.table, args.aggregationType,resultHandler);
      }
    }

    public static class setOdsHistoricalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsHistoricalData_args, Void> {
      public setOdsHistoricalData() {
        super("setOdsHistoricalData");
      }

      public setOdsHistoricalData_args getEmptyArgsInstance() {
        return new setOdsHistoricalData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsHistoricalData_result result = new setOdsHistoricalData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsHistoricalData_result result = new setOdsHistoricalData_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsHistoricalData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsHistoricalData(args.data,resultHandler);
      }
    }

    public static class deleteOdsHistoricalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOdsHistoricalData_args, Void> {
      public deleteOdsHistoricalData() {
        super("deleteOdsHistoricalData");
      }

      public deleteOdsHistoricalData_args getEmptyArgsInstance() {
        return new deleteOdsHistoricalData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteOdsHistoricalData_result result = new deleteOdsHistoricalData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOdsHistoricalData_result result = new deleteOdsHistoricalData_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOdsHistoricalData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteOdsHistoricalData(args.data,resultHandler);
      }
    }

    public static class getSnapshotWithFilters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSnapshotWithFilters_args, Map<String,List<ODSSnapshotValue>>> {
      public getSnapshotWithFilters() {
        super("getSnapshotWithFilters");
      }

      public getSnapshotWithFilters_args getEmptyArgsInstance() {
        return new getSnapshotWithFilters_args();
      }

      public AsyncMethodCallback<Map<String,List<ODSSnapshotValue>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<ODSSnapshotValue>>>() { 
          public void onComplete(Map<String,List<ODSSnapshotValue>> o) {
            getSnapshotWithFilters_result result = new getSnapshotWithFilters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSnapshotWithFilters_result result = new getSnapshotWithFilters_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSnapshotWithFilters_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<ODSSnapshotValue>>> resultHandler) throws TException {
        iface.getSnapshotWithFilters(args.entities, args.keys, args.timeStamp, args.filter, args.findMissingValue, args.periodOverride, args.entityIsRegex, args.keyIsRegex,resultHandler);
      }
    }

    public static class getSnapshotCompressed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSnapshotCompressed_args, Map<String,String>> {
      public getSnapshotCompressed() {
        super("getSnapshotCompressed");
      }

      public getSnapshotCompressed_args getEmptyArgsInstance() {
        return new getSnapshotCompressed_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getSnapshotCompressed_result result = new getSnapshotCompressed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSnapshotCompressed_result result = new getSnapshotCompressed_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSnapshotCompressed_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getSnapshotCompressed(args.entities, args.keys, args.timeStamp, args.filter, args.findMissingValue, args.periodOverride, args.entityIsRegex, args.keyIsRegex,resultHandler);
      }
    }

    public static class getEntityValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityValues_args, Map<String,Map<String,List<TimeValue>>>> {
      public getEntityValues() {
        super("getEntityValues");
      }

      public getEntityValues_args getEmptyArgsInstance() {
        return new getEntityValues_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,List<TimeValue>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,List<TimeValue>>>>() { 
          public void onComplete(Map<String,Map<String,List<TimeValue>>> o) {
            getEntityValues_result result = new getEntityValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityValues_result result = new getEntityValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityValues_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<String,List<TimeValue>>>> resultHandler) throws TException {
        iface.getEntityValues(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType,resultHandler);
      }
    }

    public static class getTimeSeries<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimeSeries_args, GetTimeSeriesResults> {
      public getTimeSeries() {
        super("getTimeSeries");
      }

      public getTimeSeries_args getEmptyArgsInstance() {
        return new getTimeSeries_args();
      }

      public AsyncMethodCallback<GetTimeSeriesResults> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetTimeSeriesResults>() { 
          public void onComplete(GetTimeSeriesResults o) {
            getTimeSeries_result result = new getTimeSeries_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTimeSeries_result result = new getTimeSeries_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimeSeries_args args, org.apache.thrift.async.AsyncMethodCallback<GetTimeSeriesResults> resultHandler) throws TException {
        iface.getTimeSeries(args.query,resultHandler);
      }
    }

    public static class getEntityValuesCompressed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityValuesCompressed_args, Map<String,Map<String,String>>> {
      public getEntityValuesCompressed() {
        super("getEntityValuesCompressed");
      }

      public getEntityValuesCompressed_args getEmptyArgsInstance() {
        return new getEntityValuesCompressed_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,String>>>() { 
          public void onComplete(Map<String,Map<String,String>> o) {
            getEntityValuesCompressed_result result = new getEntityValuesCompressed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityValuesCompressed_result result = new getEntityValuesCompressed_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityValuesCompressed_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<String,String>>> resultHandler) throws TException {
        iface.getEntityValuesCompressed(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType,resultHandler);
      }
    }

    public static class getRegexEntityValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegexEntityValues_args, Map<String,Map<String,List<TimeValue>>>> {
      public getRegexEntityValues() {
        super("getRegexEntityValues");
      }

      public getRegexEntityValues_args getEmptyArgsInstance() {
        return new getRegexEntityValues_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,List<TimeValue>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,List<TimeValue>>>>() { 
          public void onComplete(Map<String,Map<String,List<TimeValue>>> o) {
            getRegexEntityValues_result result = new getRegexEntityValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegexEntityValues_result result = new getRegexEntityValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegexEntityValues_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<String,List<TimeValue>>>> resultHandler) throws TException {
        iface.getRegexEntityValues(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType,resultHandler);
      }
    }

    public static class getRegexEntityValuesCompressed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegexEntityValuesCompressed_args, Map<String,Map<String,String>>> {
      public getRegexEntityValuesCompressed() {
        super("getRegexEntityValuesCompressed");
      }

      public getRegexEntityValuesCompressed_args getEmptyArgsInstance() {
        return new getRegexEntityValuesCompressed_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,String>>>() { 
          public void onComplete(Map<String,Map<String,String>> o) {
            getRegexEntityValuesCompressed_result result = new getRegexEntityValuesCompressed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegexEntityValuesCompressed_result result = new getRegexEntityValuesCompressed_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegexEntityValuesCompressed_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<String,String>>> resultHandler) throws TException {
        iface.getRegexEntityValuesCompressed(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationType,resultHandler);
      }
    }

    public static class getEntityAggValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityAggValues_args, AggEntityValue> {
      public getEntityAggValues() {
        super("getEntityAggValues");
      }

      public getEntityAggValues_args getEmptyArgsInstance() {
        return new getEntityAggValues_args();
      }

      public AsyncMethodCallback<AggEntityValue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AggEntityValue>() { 
          public void onComplete(AggEntityValue o) {
            getEntityAggValues_result result = new getEntityAggValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityAggValues_result result = new getEntityAggValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityAggValues_args args, org.apache.thrift.async.AsyncMethodCallback<AggEntityValue> resultHandler) throws TException {
        iface.getEntityAggValues(args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.bypassLimit, args.aggregationType,resultHandler);
      }
    }

    public static class getRegexEntityAggValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegexEntityAggValues_args, AggEntityValue> {
      public getRegexEntityAggValues() {
        super("getRegexEntityAggValues");
      }

      public getRegexEntityAggValues_args getEmptyArgsInstance() {
        return new getRegexEntityAggValues_args();
      }

      public AsyncMethodCallback<AggEntityValue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AggEntityValue>() { 
          public void onComplete(AggEntityValue o) {
            getRegexEntityAggValues_result result = new getRegexEntityAggValues_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegexEntityAggValues_result result = new getRegexEntityAggValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegexEntityAggValues_args args, org.apache.thrift.async.AsyncMethodCallback<AggEntityValue> resultHandler) throws TException {
        iface.getRegexEntityAggValues(args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.bypassLimit, args.aggregationType,resultHandler);
      }
    }

    public static class getAggSources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAggSources_args, String> {
      public getAggSources() {
        super("getAggSources");
      }

      public getAggSources_args getEmptyArgsInstance() {
        return new getAggSources_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getAggSources_result result = new getAggSources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAggSources_result result = new getAggSources_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAggSources_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getAggSources(args.rgex, args.entities, args.keys, args.start, args.end_, args.window,resultHandler);
      }
    }

    public static class getOdsTimeSeriesByAggregationType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOdsTimeSeriesByAggregationType_args, Map<OdsAggregationType,TransformResult>> {
      public getOdsTimeSeriesByAggregationType() {
        super("getOdsTimeSeriesByAggregationType");
      }

      public getOdsTimeSeriesByAggregationType_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesByAggregationType_args();
      }

      public AsyncMethodCallback<Map<OdsAggregationType,TransformResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<OdsAggregationType,TransformResult>>() { 
          public void onComplete(Map<OdsAggregationType,TransformResult> o) {
            getOdsTimeSeriesByAggregationType_result result = new getOdsTimeSeriesByAggregationType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOdsTimeSeriesByAggregationType_result result = new getOdsTimeSeriesByAggregationType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOdsTimeSeriesByAggregationType_args args, org.apache.thrift.async.AsyncMethodCallback<Map<OdsAggregationType,TransformResult>> resultHandler) throws TException {
        iface.getOdsTimeSeriesByAggregationType(args.regex, args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.transformConfig, args.aggregationTypeBitMap, args.bestFitDegree, args.transformDataSources, args.topNOpts,resultHandler);
      }
    }

    public static class getOdsTimeSeriesByAggregationTypeCompressed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOdsTimeSeriesByAggregationTypeCompressed_args, Map<OdsAggregationType,TransformResult>> {
      public getOdsTimeSeriesByAggregationTypeCompressed() {
        super("getOdsTimeSeriesByAggregationTypeCompressed");
      }

      public getOdsTimeSeriesByAggregationTypeCompressed_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesByAggregationTypeCompressed_args();
      }

      public AsyncMethodCallback<Map<OdsAggregationType,TransformResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<OdsAggregationType,TransformResult>>() { 
          public void onComplete(Map<OdsAggregationType,TransformResult> o) {
            getOdsTimeSeriesByAggregationTypeCompressed_result result = new getOdsTimeSeriesByAggregationTypeCompressed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOdsTimeSeriesByAggregationTypeCompressed_result result = new getOdsTimeSeriesByAggregationTypeCompressed_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOdsTimeSeriesByAggregationTypeCompressed_args args, org.apache.thrift.async.AsyncMethodCallback<Map<OdsAggregationType,TransformResult>> resultHandler) throws TException {
        iface.getOdsTimeSeriesByAggregationTypeCompressed(args.regex, args.entities, args.keys, args.start, args.end_, args.table, args.type, args.window, args.transformConfig, args.aggregationTypeBitMap, args.bestFitDegree, args.transformDataSources, args.topNOpts,resultHandler);
      }
    }

    public static class getOdsTimeSeriesSimple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOdsTimeSeriesSimple_args, Map<OdsAggregationType,OdsGetResult>> {
      public getOdsTimeSeriesSimple() {
        super("getOdsTimeSeriesSimple");
      }

      public getOdsTimeSeriesSimple_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesSimple_args();
      }

      public AsyncMethodCallback<Map<OdsAggregationType,OdsGetResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<OdsAggregationType,OdsGetResult>>() { 
          public void onComplete(Map<OdsAggregationType,OdsGetResult> o) {
            getOdsTimeSeriesSimple_result result = new getOdsTimeSeriesSimple_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOdsTimeSeriesSimple_result result = new getOdsTimeSeriesSimple_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOdsTimeSeriesSimple_args args, org.apache.thrift.async.AsyncMethodCallback<Map<OdsAggregationType,OdsGetResult>> resultHandler) throws TException {
        iface.getOdsTimeSeriesSimple(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationTypeBitMap,resultHandler);
      }
    }

    public static class getTimeSeriesByAggType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimeSeriesByAggType_args, GetTimeSeriesByAggTypeResults> {
      public getTimeSeriesByAggType() {
        super("getTimeSeriesByAggType");
      }

      public getTimeSeriesByAggType_args getEmptyArgsInstance() {
        return new getTimeSeriesByAggType_args();
      }

      public AsyncMethodCallback<GetTimeSeriesByAggTypeResults> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetTimeSeriesByAggTypeResults>() { 
          public void onComplete(GetTimeSeriesByAggTypeResults o) {
            getTimeSeriesByAggType_result result = new getTimeSeriesByAggType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTimeSeriesByAggType_result result = new getTimeSeriesByAggType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimeSeriesByAggType_args args, org.apache.thrift.async.AsyncMethodCallback<GetTimeSeriesByAggTypeResults> resultHandler) throws TException {
        iface.getTimeSeriesByAggType(args.query,resultHandler);
      }
    }

    public static class getOdsTimeSeriesSimpleCompressed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOdsTimeSeriesSimpleCompressed_args, Map<OdsAggregationType,String>> {
      public getOdsTimeSeriesSimpleCompressed() {
        super("getOdsTimeSeriesSimpleCompressed");
      }

      public getOdsTimeSeriesSimpleCompressed_args getEmptyArgsInstance() {
        return new getOdsTimeSeriesSimpleCompressed_args();
      }

      public AsyncMethodCallback<Map<OdsAggregationType,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<OdsAggregationType,String>>() { 
          public void onComplete(Map<OdsAggregationType,String> o) {
            getOdsTimeSeriesSimpleCompressed_result result = new getOdsTimeSeriesSimpleCompressed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOdsTimeSeriesSimpleCompressed_result result = new getOdsTimeSeriesSimpleCompressed_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOdsTimeSeriesSimpleCompressed_args args, org.apache.thrift.async.AsyncMethodCallback<Map<OdsAggregationType,String>> resultHandler) throws TException {
        iface.getOdsTimeSeriesSimpleCompressed(args.entities, args.keys, args.start, args.end_, args.table, args.window, args.aggregationTypeBitMap,resultHandler);
      }
    }

    public static class getAdvancedTransformQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdvancedTransformQuery_args, List<String>> {
      public getAdvancedTransformQuery() {
        super("getAdvancedTransformQuery");
      }

      public getAdvancedTransformQuery_args getEmptyArgsInstance() {
        return new getAdvancedTransformQuery_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAdvancedTransformQuery_result result = new getAdvancedTransformQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAdvancedTransformQuery_result result = new getAdvancedTransformQuery_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdvancedTransformQuery_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAdvancedTransformQuery(args.start_date, args.end_date, args.dataJSON, args.configJSON,resultHandler);
      }
    }

    public static class getTopNActiveKeyPrefix<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopNActiveKeyPrefix_args, List<KeyStat>> {
      public getTopNActiveKeyPrefix() {
        super("getTopNActiveKeyPrefix");
      }

      public getTopNActiveKeyPrefix_args getEmptyArgsInstance() {
        return new getTopNActiveKeyPrefix_args();
      }

      public AsyncMethodCallback<List<KeyStat>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<KeyStat>>() { 
          public void onComplete(List<KeyStat> o) {
            getTopNActiveKeyPrefix_result result = new getTopNActiveKeyPrefix_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopNActiveKeyPrefix_result result = new getTopNActiveKeyPrefix_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopNActiveKeyPrefix_args args, org.apache.thrift.async.AsyncMethodCallback<List<KeyStat>> resultHandler) throws TException {
        iface.getTopNActiveKeyPrefix(args.n,resultHandler);
      }
    }

    public static class setMultipleOdsValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setMultipleOdsValues_args, Void> {
      public setMultipleOdsValues() {
        super("setMultipleOdsValues");
      }

      public setMultipleOdsValues_args getEmptyArgsInstance() {
        return new setMultipleOdsValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setMultipleOdsValues_result result = new setMultipleOdsValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setMultipleOdsValues_result result = new setMultipleOdsValues_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setMultipleOdsValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setMultipleOdsValues(args.data,resultHandler);
      }
    }

    public static class setODSData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setODSData_args, Void> {
      public setODSData() {
        super("setODSData");
      }

      public setODSData_args getEmptyArgsInstance() {
        return new setODSData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setODSData_result result = new setODSData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setODSData_result result = new setODSData_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setODSData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setODSData(args.data,resultHandler);
      }
    }

    public static class setOdsFbagentHostData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsFbagentHostData_args, Void> {
      public setOdsFbagentHostData() {
        super("setOdsFbagentHostData");
      }

      public setOdsFbagentHostData_args getEmptyArgsInstance() {
        return new setOdsFbagentHostData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsFbagentHostData_result result = new setOdsFbagentHostData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsFbagentHostData_result result = new setOdsFbagentHostData_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsFbagentHostData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsFbagentHostData(args.data,resultHandler);
      }
    }

    public static class setOdsFbagentData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOdsFbagentData_args, Void> {
      public setOdsFbagentData() {
        super("setOdsFbagentData");
      }

      public setOdsFbagentData_args getEmptyArgsInstance() {
        return new setOdsFbagentData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOdsFbagentData_result result = new setOdsFbagentData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOdsFbagentData_result result = new setOdsFbagentData_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOdsFbagentData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOdsFbagentData(args.data, args.skiphostdata,resultHandler);
      }
    }

    public static class getEntityNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityNames_args, List<String>> {
      public getEntityNames() {
        super("getEntityNames");
      }

      public getEntityNames_args getEmptyArgsInstance() {
        return new getEntityNames_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getEntityNames_result result = new getEntityNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityNames_result result = new getEntityNames_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityNames_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getEntityNames(resultHandler);
      }
    }

    public static class getKeyNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getKeyNames_args, List<String>> {
      public getKeyNames() {
        super("getKeyNames");
      }

      public getKeyNames_args getEmptyArgsInstance() {
        return new getKeyNames_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getKeyNames_result result = new getKeyNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getKeyNames_result result = new getKeyNames_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getKeyNames_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getKeyNames(resultHandler);
      }
    }

    public static class getKeyMapping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getKeyMapping_args, Map<String,List<String>>> {
      public getKeyMapping() {
        super("getKeyMapping");
      }

      public getKeyMapping_args getEmptyArgsInstance() {
        return new getKeyMapping_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            getKeyMapping_result result = new getKeyMapping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getKeyMapping_result result = new getKeyMapping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getKeyMapping_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.getKeyMapping(args.entities, args.minutes_back,resultHandler);
      }
    }

    public static class getEntityMapping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityMapping_args, Map<String,List<String>>> {
      public getEntityMapping() {
        super("getEntityMapping");
      }

      public getEntityMapping_args getEmptyArgsInstance() {
        return new getEntityMapping_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            getEntityMapping_result result = new getEntityMapping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityMapping_result result = new getEntityMapping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityMapping_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.getEntityMapping(args.keys, args.minutes_back,resultHandler);
      }
    }

    public static class getAggregateEntityNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAggregateEntityNames_args, Set<String>> {
      public getAggregateEntityNames() {
        super("getAggregateEntityNames");
      }

      public getAggregateEntityNames_args getEmptyArgsInstance() {
        return new getAggregateEntityNames_args();
      }

      public AsyncMethodCallback<Set<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<String>>() { 
          public void onComplete(Set<String> o) {
            getAggregateEntityNames_result result = new getAggregateEntityNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAggregateEntityNames_result result = new getAggregateEntityNames_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAggregateEntityNames_args args, org.apache.thrift.async.AsyncMethodCallback<Set<String>> resultHandler) throws TException {
        iface.getAggregateEntityNames(args.regexp,resultHandler);
      }
    }

    public static class getMapping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMapping_args, Map<String,List<String>>> {
      public getMapping() {
        super("getMapping");
      }

      public getMapping_args getEmptyArgsInstance() {
        return new getMapping_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            getMapping_result result = new getMapping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMapping_result result = new getMapping_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMapping_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.getMapping(args.entities, args.minutes_back, args.get_key,resultHandler);
      }
    }

    public static class getCorrespondingKeys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCorrespondingKeys_args, OdsKeyEntityMapperResult> {
      public getCorrespondingKeys() {
        super("getCorrespondingKeys");
      }

      public getCorrespondingKeys_args getEmptyArgsInstance() {
        return new getCorrespondingKeys_args();
      }

      public AsyncMethodCallback<OdsKeyEntityMapperResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OdsKeyEntityMapperResult>() { 
          public void onComplete(OdsKeyEntityMapperResult o) {
            getCorrespondingKeys_result result = new getCorrespondingKeys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCorrespondingKeys_result result = new getCorrespondingKeys_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCorrespondingKeys_args args, org.apache.thrift.async.AsyncMethodCallback<OdsKeyEntityMapperResult> resultHandler) throws TException {
        iface.getCorrespondingKeys(args.keywords, args.entities, args.minutes_back, args.limit,resultHandler);
      }
    }

    public static class getCorrespondingEntities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCorrespondingEntities_args, OdsKeyEntityMapperResult> {
      public getCorrespondingEntities() {
        super("getCorrespondingEntities");
      }

      public getCorrespondingEntities_args getEmptyArgsInstance() {
        return new getCorrespondingEntities_args();
      }

      public AsyncMethodCallback<OdsKeyEntityMapperResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OdsKeyEntityMapperResult>() { 
          public void onComplete(OdsKeyEntityMapperResult o) {
            getCorrespondingEntities_result result = new getCorrespondingEntities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCorrespondingEntities_result result = new getCorrespondingEntities_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCorrespondingEntities_args args, org.apache.thrift.async.AsyncMethodCallback<OdsKeyEntityMapperResult> resultHandler) throws TException {
        iface.getCorrespondingEntities(args.keywords, args.keys, args.minutes_back, args.limit,resultHandler);
      }
    }

    public static class getEntitiesByTypeAndRegexs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntitiesByTypeAndRegexs_args, OdsKeyEntityMapperResult> {
      public getEntitiesByTypeAndRegexs() {
        super("getEntitiesByTypeAndRegexs");
      }

      public getEntitiesByTypeAndRegexs_args getEmptyArgsInstance() {
        return new getEntitiesByTypeAndRegexs_args();
      }

      public AsyncMethodCallback<OdsKeyEntityMapperResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OdsKeyEntityMapperResult>() { 
          public void onComplete(OdsKeyEntityMapperResult o) {
            getEntitiesByTypeAndRegexs_result result = new getEntitiesByTypeAndRegexs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntitiesByTypeAndRegexs_result result = new getEntitiesByTypeAndRegexs_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntitiesByTypeAndRegexs_args args, org.apache.thrift.async.AsyncMethodCallback<OdsKeyEntityMapperResult> resultHandler) throws TException {
        iface.getEntitiesByTypeAndRegexs(args.entity_type, args.limit, args.ordering, args.regexes,resultHandler);
      }
    }

    public static class getKeysByRegexs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getKeysByRegexs_args, OdsKeyEntityMapperResult> {
      public getKeysByRegexs() {
        super("getKeysByRegexs");
      }

      public getKeysByRegexs_args getEmptyArgsInstance() {
        return new getKeysByRegexs_args();
      }

      public AsyncMethodCallback<OdsKeyEntityMapperResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OdsKeyEntityMapperResult>() { 
          public void onComplete(OdsKeyEntityMapperResult o) {
            getKeysByRegexs_result result = new getKeysByRegexs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getKeysByRegexs_result result = new getKeysByRegexs_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getKeysByRegexs_args args, org.apache.thrift.async.AsyncMethodCallback<OdsKeyEntityMapperResult> resultHandler) throws TException {
        iface.getKeysByRegexs(args.keywords, args.limit, args.use_cdbdao,resultHandler);
      }
    }

    public static class getAllAliveNumericKeyPrefixes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllAliveNumericKeyPrefixes_args, List<String>> {
      public getAllAliveNumericKeyPrefixes() {
        super("getAllAliveNumericKeyPrefixes");
      }

      public getAllAliveNumericKeyPrefixes_args getEmptyArgsInstance() {
        return new getAllAliveNumericKeyPrefixes_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllAliveNumericKeyPrefixes_result result = new getAllAliveNumericKeyPrefixes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllAliveNumericKeyPrefixes_result result = new getAllAliveNumericKeyPrefixes_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllAliveNumericKeyPrefixes_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllAliveNumericKeyPrefixes(args.returnKeysWithNoDelimiter, args.limit,resultHandler);
      }
    }

    public static class getAllAliveNumericKeys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllAliveNumericKeys_args, List<String>> {
      public getAllAliveNumericKeys() {
        super("getAllAliveNumericKeys");
      }

      public getAllAliveNumericKeys_args getEmptyArgsInstance() {
        return new getAllAliveNumericKeys_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllAliveNumericKeys_result result = new getAllAliveNumericKeys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllAliveNumericKeys_result result = new getAllAliveNumericKeys_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllAliveNumericKeys_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllAliveNumericKeys(args.prefix, args.limit,resultHandler);
      }
    }

    public static class getAllKeys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllKeys_args, List<String>> {
      public getAllKeys() {
        super("getAllKeys");
      }

      public getAllKeys_args getEmptyArgsInstance() {
        return new getAllKeys_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllKeys_result result = new getAllKeys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllKeys_result result = new getAllKeys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllKeys_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllKeys(args.prefix, args.key_type,resultHandler);
      }
    }

    public static class getGlobalAggregationEntities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGlobalAggregationEntities_args, List<String>> {
      public getGlobalAggregationEntities() {
        super("getGlobalAggregationEntities");
      }

      public getGlobalAggregationEntities_args getEmptyArgsInstance() {
        return new getGlobalAggregationEntities_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getGlobalAggregationEntities_result result = new getGlobalAggregationEntities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGlobalAggregationEntities_result result = new getGlobalAggregationEntities_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGlobalAggregationEntities_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getGlobalAggregationEntities(resultHandler);
      }
    }

    public static class findExactMatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findExactMatch_args, Boolean> {
      public findExactMatch() {
        super("findExactMatch");
      }

      public findExactMatch_args getEmptyArgsInstance() {
        return new findExactMatch_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            findExactMatch_result result = new findExactMatch_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findExactMatch_result result = new findExactMatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findExactMatch_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.findExactMatch(args.keyword_to_search, args.is_entity,resultHandler);
      }
    }

    public static class searchEntityOrKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchEntityOrKey_args, OdsKeyEntityMapperResult> {
      public searchEntityOrKey() {
        super("searchEntityOrKey");
      }

      public searchEntityOrKey_args getEmptyArgsInstance() {
        return new searchEntityOrKey_args();
      }

      public AsyncMethodCallback<OdsKeyEntityMapperResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OdsKeyEntityMapperResult>() { 
          public void onComplete(OdsKeyEntityMapperResult o) {
            searchEntityOrKey_result result = new searchEntityOrKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchEntityOrKey_result result = new searchEntityOrKey_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchEntityOrKey_args args, org.apache.thrift.async.AsyncMethodCallback<OdsKeyEntityMapperResult> resultHandler) throws TException {
        iface.searchEntityOrKey(args.keywords, args.limit, args.is_entity,resultHandler);
      }
    }

    public static class getRecentEntities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecentEntities_args, RecentEntitiesOrKeys> {
      public getRecentEntities() {
        super("getRecentEntities");
      }

      public getRecentEntities_args getEmptyArgsInstance() {
        return new getRecentEntities_args();
      }

      public AsyncMethodCallback<RecentEntitiesOrKeys> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RecentEntitiesOrKeys>() { 
          public void onComplete(RecentEntitiesOrKeys o) {
            getRecentEntities_result result = new getRecentEntities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecentEntities_result result = new getRecentEntities_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecentEntities_args args, org.apache.thrift.async.AsyncMethodCallback<RecentEntitiesOrKeys> resultHandler) throws TException {
        iface.getRecentEntities(args.entity_id,resultHandler);
      }
    }

    public static class getRecentKeys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecentKeys_args, RecentEntitiesOrKeys> {
      public getRecentKeys() {
        super("getRecentKeys");
      }

      public getRecentKeys_args getEmptyArgsInstance() {
        return new getRecentKeys_args();
      }

      public AsyncMethodCallback<RecentEntitiesOrKeys> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RecentEntitiesOrKeys>() { 
          public void onComplete(RecentEntitiesOrKeys o) {
            getRecentKeys_result result = new getRecentKeys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecentKeys_result result = new getRecentKeys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecentKeys_args args, org.apache.thrift.async.AsyncMethodCallback<RecentEntitiesOrKeys> resultHandler) throws TException {
        iface.getRecentKeys(args.key_id,resultHandler);
      }
    }

    public static class getEntityIdByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityIdByName_args, Long> {
      public getEntityIdByName() {
        super("getEntityIdByName");
      }

      public getEntityIdByName_args getEmptyArgsInstance() {
        return new getEntityIdByName_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getEntityIdByName_result result = new getEntityIdByName_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityIdByName_result result = new getEntityIdByName_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityIdByName_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getEntityIdByName(args.name,resultHandler);
      }
    }

    public static class getMaxEntityId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMaxEntityId_args, Long> {
      public getMaxEntityId() {
        super("getMaxEntityId");
      }

      public getMaxEntityId_args getEmptyArgsInstance() {
        return new getMaxEntityId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getMaxEntityId_result result = new getMaxEntityId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMaxEntityId_result result = new getMaxEntityId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMaxEntityId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getMaxEntityId(resultHandler);
      }
    }

    public static class getKeyIdByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getKeyIdByName_args, Long> {
      public getKeyIdByName() {
        super("getKeyIdByName");
      }

      public getKeyIdByName_args getEmptyArgsInstance() {
        return new getKeyIdByName_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getKeyIdByName_result result = new getKeyIdByName_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getKeyIdByName_result result = new getKeyIdByName_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getKeyIdByName_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getKeyIdByName(args.name,resultHandler);
      }
    }

    public static class getMaxKeyId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMaxKeyId_args, Long> {
      public getMaxKeyId() {
        super("getMaxKeyId");
      }

      public getMaxKeyId_args getEmptyArgsInstance() {
        return new getMaxKeyId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getMaxKeyId_result result = new getMaxKeyId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMaxKeyId_result result = new getMaxKeyId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMaxKeyId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getMaxKeyId(resultHandler);
      }
    }

    public static class getDdbIdByEntityId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDdbIdByEntityId_args, Long> {
      public getDdbIdByEntityId() {
        super("getDdbIdByEntityId");
      }

      public getDdbIdByEntityId_args getEmptyArgsInstance() {
        return new getDdbIdByEntityId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getDdbIdByEntityId_result result = new getDdbIdByEntityId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDdbIdByEntityId_result result = new getDdbIdByEntityId_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDdbIdByEntityId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getDdbIdByEntityId(args.entityId,resultHandler);
      }
    }

    public static class getAggregateDdbIdByEntityId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAggregateDdbIdByEntityId_args, Long> {
      public getAggregateDdbIdByEntityId() {
        super("getAggregateDdbIdByEntityId");
      }

      public getAggregateDdbIdByEntityId_args getEmptyArgsInstance() {
        return new getAggregateDdbIdByEntityId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getAggregateDdbIdByEntityId_result result = new getAggregateDdbIdByEntityId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAggregateDdbIdByEntityId_result result = new getAggregateDdbIdByEntityId_result();
            if (e instanceof OdsException) {
                        result.oe = (OdsException) e;
                        result.setOeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAggregateDdbIdByEntityId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getAggregateDdbIdByEntityId(args.entityId,resultHandler);
      }
    }

  }

  public static class setOdsValues_args implements org.apache.thrift.TBase<setOdsValues_args, setOdsValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsValues_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsValues_argsTupleSchemeFactory());
    }

    public List<ODSAppValue> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSAppValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsValues_args.class, metaDataMap);
    }

    public setOdsValues_args() {
    }

    public setOdsValues_args(
      List<ODSAppValue> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsValues_args(setOdsValues_args other) {
      if (other.isSetData()) {
        List<ODSAppValue> __this__data = new ArrayList<ODSAppValue>(other.data.size());
        for (ODSAppValue other_element : other.data) {
          __this__data.add(new ODSAppValue(other_element));
        }
        this.data = __this__data;
      }
    }

    public setOdsValues_args deepCopy() {
      return new setOdsValues_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSAppValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSAppValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSAppValue>();
      }
      this.data.add(elem);
    }

    public List<ODSAppValue> getData() {
      return this.data;
    }

    public setOdsValues_args setData(List<ODSAppValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSAppValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsValues_args)
        return this.equals((setOdsValues_args)that);
      return false;
    }

    public boolean equals(setOdsValues_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsValues_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsValues_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsValues_argsStandardScheme getScheme() {
        return new setOdsValues_argsStandardScheme();
      }
    }

    private static class setOdsValues_argsStandardScheme extends StandardScheme<setOdsValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSAppValue>(_list216.size);
                  ODSAppValue _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new ODSAppValue();
                    _elem217.read(iprot);
                    struct.data.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSAppValue _iter219 : struct.data)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsValues_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsValues_argsTupleScheme getScheme() {
        return new setOdsValues_argsTupleScheme();
      }
    }

    private static class setOdsValues_argsTupleScheme extends TupleScheme<setOdsValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSAppValue _iter220 : struct.data)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSAppValue>(_list221.size);
            ODSAppValue _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new ODSAppValue();
              _elem222.read(iprot);
              struct.data.add(_elem222);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setOdsValues_result implements org.apache.thrift.TBase<setOdsValues_result, setOdsValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsValues_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsValues_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsValues_result.class, metaDataMap);
    }

    public setOdsValues_result() {
    }

    public setOdsValues_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsValues_result(setOdsValues_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsValues_result deepCopy() {
      return new setOdsValues_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsValues_result)
        return this.equals((setOdsValues_result)that);
      return false;
    }

    public boolean equals(setOdsValues_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsValues_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsValues_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsValues_resultStandardScheme getScheme() {
        return new setOdsValues_resultStandardScheme();
      }
    }

    private static class setOdsValues_resultStandardScheme extends StandardScheme<setOdsValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsValues_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsValues_resultTupleScheme getScheme() {
        return new setOdsValues_resultTupleScheme();
      }
    }

    private static class setOdsValues_resultTupleScheme extends TupleScheme<setOdsValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsAggValues_args implements org.apache.thrift.TBase<setOdsAggValues_args, setOdsAggValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsAggValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsAggValues_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsAggValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsAggValues_argsTupleSchemeFactory());
    }

    public List<OdsAggValue> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsAggValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsAggValues_args.class, metaDataMap);
    }

    public setOdsAggValues_args() {
    }

    public setOdsAggValues_args(
      List<OdsAggValue> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsAggValues_args(setOdsAggValues_args other) {
      if (other.isSetData()) {
        List<OdsAggValue> __this__data = new ArrayList<OdsAggValue>(other.data.size());
        for (OdsAggValue other_element : other.data) {
          __this__data.add(new OdsAggValue(other_element));
        }
        this.data = __this__data;
      }
    }

    public setOdsAggValues_args deepCopy() {
      return new setOdsAggValues_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<OdsAggValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(OdsAggValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<OdsAggValue>();
      }
      this.data.add(elem);
    }

    public List<OdsAggValue> getData() {
      return this.data;
    }

    public setOdsAggValues_args setData(List<OdsAggValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<OdsAggValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsAggValues_args)
        return this.equals((setOdsAggValues_args)that);
      return false;
    }

    public boolean equals(setOdsAggValues_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsAggValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsAggValues_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsAggValues_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsAggValues_argsStandardScheme getScheme() {
        return new setOdsAggValues_argsStandardScheme();
      }
    }

    private static class setOdsAggValues_argsStandardScheme extends StandardScheme<setOdsAggValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsAggValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.data = new ArrayList<OdsAggValue>(_list224.size);
                  OdsAggValue _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new OdsAggValue();
                    _elem225.read(iprot);
                    struct.data.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsAggValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (OdsAggValue _iter227 : struct.data)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsAggValues_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsAggValues_argsTupleScheme getScheme() {
        return new setOdsAggValues_argsTupleScheme();
      }
    }

    private static class setOdsAggValues_argsTupleScheme extends TupleScheme<setOdsAggValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsAggValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (OdsAggValue _iter228 : struct.data)
            {
              _iter228.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsAggValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<OdsAggValue>(_list229.size);
            OdsAggValue _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new OdsAggValue();
              _elem230.read(iprot);
              struct.data.add(_elem230);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setOdsAggValues_result implements org.apache.thrift.TBase<setOdsAggValues_result, setOdsAggValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsAggValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsAggValues_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsAggValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsAggValues_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsAggValues_result.class, metaDataMap);
    }

    public setOdsAggValues_result() {
    }

    public setOdsAggValues_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsAggValues_result(setOdsAggValues_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsAggValues_result deepCopy() {
      return new setOdsAggValues_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsAggValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsAggValues_result)
        return this.equals((setOdsAggValues_result)that);
      return false;
    }

    public boolean equals(setOdsAggValues_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsAggValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsAggValues_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsAggValues_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsAggValues_resultStandardScheme getScheme() {
        return new setOdsAggValues_resultStandardScheme();
      }
    }

    private static class setOdsAggValues_resultStandardScheme extends StandardScheme<setOdsAggValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsAggValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsAggValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsAggValues_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsAggValues_resultTupleScheme getScheme() {
        return new setOdsAggValues_resultTupleScheme();
      }
    }

    private static class setOdsAggValues_resultTupleScheme extends TupleScheme<setOdsAggValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsAggValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsAggValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsRollupValues_args implements org.apache.thrift.TBase<setOdsRollupValues_args, setOdsRollupValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsRollupValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsRollupValues_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsRollupValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsRollupValues_argsTupleSchemeFactory());
    }

    public List<ODSAppValue> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSAppValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsRollupValues_args.class, metaDataMap);
    }

    public setOdsRollupValues_args() {
    }

    public setOdsRollupValues_args(
      List<ODSAppValue> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsRollupValues_args(setOdsRollupValues_args other) {
      if (other.isSetData()) {
        List<ODSAppValue> __this__data = new ArrayList<ODSAppValue>(other.data.size());
        for (ODSAppValue other_element : other.data) {
          __this__data.add(new ODSAppValue(other_element));
        }
        this.data = __this__data;
      }
    }

    public setOdsRollupValues_args deepCopy() {
      return new setOdsRollupValues_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSAppValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSAppValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSAppValue>();
      }
      this.data.add(elem);
    }

    public List<ODSAppValue> getData() {
      return this.data;
    }

    public setOdsRollupValues_args setData(List<ODSAppValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSAppValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsRollupValues_args)
        return this.equals((setOdsRollupValues_args)that);
      return false;
    }

    public boolean equals(setOdsRollupValues_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsRollupValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsRollupValues_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsRollupValues_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsRollupValues_argsStandardScheme getScheme() {
        return new setOdsRollupValues_argsStandardScheme();
      }
    }

    private static class setOdsRollupValues_argsStandardScheme extends StandardScheme<setOdsRollupValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsRollupValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSAppValue>(_list232.size);
                  ODSAppValue _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new ODSAppValue();
                    _elem233.read(iprot);
                    struct.data.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsRollupValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSAppValue _iter235 : struct.data)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsRollupValues_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsRollupValues_argsTupleScheme getScheme() {
        return new setOdsRollupValues_argsTupleScheme();
      }
    }

    private static class setOdsRollupValues_argsTupleScheme extends TupleScheme<setOdsRollupValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsRollupValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSAppValue _iter236 : struct.data)
            {
              _iter236.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsRollupValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSAppValue>(_list237.size);
            ODSAppValue _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new ODSAppValue();
              _elem238.read(iprot);
              struct.data.add(_elem238);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setOdsRollupValues_result implements org.apache.thrift.TBase<setOdsRollupValues_result, setOdsRollupValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsRollupValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsRollupValues_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsRollupValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsRollupValues_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsRollupValues_result.class, metaDataMap);
    }

    public setOdsRollupValues_result() {
    }

    public setOdsRollupValues_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsRollupValues_result(setOdsRollupValues_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsRollupValues_result deepCopy() {
      return new setOdsRollupValues_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsRollupValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsRollupValues_result)
        return this.equals((setOdsRollupValues_result)that);
      return false;
    }

    public boolean equals(setOdsRollupValues_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsRollupValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsRollupValues_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsRollupValues_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsRollupValues_resultStandardScheme getScheme() {
        return new setOdsRollupValues_resultStandardScheme();
      }
    }

    private static class setOdsRollupValues_resultStandardScheme extends StandardScheme<setOdsRollupValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsRollupValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsRollupValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsRollupValues_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsRollupValues_resultTupleScheme getScheme() {
        return new setOdsRollupValues_resultTupleScheme();
      }
    }

    private static class setOdsRollupValues_resultTupleScheme extends TupleScheme<setOdsRollupValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsRollupValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsRollupValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsRateOfChangeValues_args implements org.apache.thrift.TBase<setOdsRateOfChangeValues_args, setOdsRateOfChangeValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsRateOfChangeValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsRateOfChangeValues_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsRateOfChangeValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsRateOfChangeValues_argsTupleSchemeFactory());
    }

    public List<ODSRateOfChangeValue> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSRateOfChangeValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsRateOfChangeValues_args.class, metaDataMap);
    }

    public setOdsRateOfChangeValues_args() {
    }

    public setOdsRateOfChangeValues_args(
      List<ODSRateOfChangeValue> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsRateOfChangeValues_args(setOdsRateOfChangeValues_args other) {
      if (other.isSetData()) {
        List<ODSRateOfChangeValue> __this__data = new ArrayList<ODSRateOfChangeValue>(other.data.size());
        for (ODSRateOfChangeValue other_element : other.data) {
          __this__data.add(new ODSRateOfChangeValue(other_element));
        }
        this.data = __this__data;
      }
    }

    public setOdsRateOfChangeValues_args deepCopy() {
      return new setOdsRateOfChangeValues_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSRateOfChangeValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSRateOfChangeValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSRateOfChangeValue>();
      }
      this.data.add(elem);
    }

    public List<ODSRateOfChangeValue> getData() {
      return this.data;
    }

    public setOdsRateOfChangeValues_args setData(List<ODSRateOfChangeValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSRateOfChangeValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsRateOfChangeValues_args)
        return this.equals((setOdsRateOfChangeValues_args)that);
      return false;
    }

    public boolean equals(setOdsRateOfChangeValues_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsRateOfChangeValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsRateOfChangeValues_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsRateOfChangeValues_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsRateOfChangeValues_argsStandardScheme getScheme() {
        return new setOdsRateOfChangeValues_argsStandardScheme();
      }
    }

    private static class setOdsRateOfChangeValues_argsStandardScheme extends StandardScheme<setOdsRateOfChangeValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsRateOfChangeValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSRateOfChangeValue>(_list240.size);
                  ODSRateOfChangeValue _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new ODSRateOfChangeValue();
                    _elem241.read(iprot);
                    struct.data.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsRateOfChangeValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSRateOfChangeValue _iter243 : struct.data)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsRateOfChangeValues_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsRateOfChangeValues_argsTupleScheme getScheme() {
        return new setOdsRateOfChangeValues_argsTupleScheme();
      }
    }

    private static class setOdsRateOfChangeValues_argsTupleScheme extends TupleScheme<setOdsRateOfChangeValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsRateOfChangeValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSRateOfChangeValue _iter244 : struct.data)
            {
              _iter244.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsRateOfChangeValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSRateOfChangeValue>(_list245.size);
            ODSRateOfChangeValue _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new ODSRateOfChangeValue();
              _elem246.read(iprot);
              struct.data.add(_elem246);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setOdsRateOfChangeValues_result implements org.apache.thrift.TBase<setOdsRateOfChangeValues_result, setOdsRateOfChangeValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsRateOfChangeValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsRateOfChangeValues_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsRateOfChangeValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsRateOfChangeValues_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsRateOfChangeValues_result.class, metaDataMap);
    }

    public setOdsRateOfChangeValues_result() {
    }

    public setOdsRateOfChangeValues_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsRateOfChangeValues_result(setOdsRateOfChangeValues_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsRateOfChangeValues_result deepCopy() {
      return new setOdsRateOfChangeValues_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsRateOfChangeValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsRateOfChangeValues_result)
        return this.equals((setOdsRateOfChangeValues_result)that);
      return false;
    }

    public boolean equals(setOdsRateOfChangeValues_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsRateOfChangeValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsRateOfChangeValues_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsRateOfChangeValues_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsRateOfChangeValues_resultStandardScheme getScheme() {
        return new setOdsRateOfChangeValues_resultStandardScheme();
      }
    }

    private static class setOdsRateOfChangeValues_resultStandardScheme extends StandardScheme<setOdsRateOfChangeValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsRateOfChangeValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsRateOfChangeValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsRateOfChangeValues_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsRateOfChangeValues_resultTupleScheme getScheme() {
        return new setOdsRateOfChangeValues_resultTupleScheme();
      }
    }

    private static class setOdsRateOfChangeValues_resultTupleScheme extends TupleScheme<setOdsRateOfChangeValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsRateOfChangeValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsRateOfChangeValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsValuesWithHostRollup_args implements org.apache.thrift.TBase<setOdsValuesWithHostRollup_args, setOdsValuesWithHostRollup_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsValuesWithHostRollup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsValuesWithHostRollup_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DO_HOST_ROLLUP_FIELD_DESC = new org.apache.thrift.protocol.TField("doHostRollup", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsValuesWithHostRollup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsValuesWithHostRollup_argsTupleSchemeFactory());
    }

    public List<ODSValue> data; // required
    public boolean doHostRollup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data"),
      DO_HOST_ROLLUP((short)2, "doHostRollup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          case 2: // DO_HOST_ROLLUP
            return DO_HOST_ROLLUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOHOSTROLLUP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSValue.class))));
      tmpMap.put(_Fields.DO_HOST_ROLLUP, new org.apache.thrift.meta_data.FieldMetaData("doHostRollup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsValuesWithHostRollup_args.class, metaDataMap);
    }

    public setOdsValuesWithHostRollup_args() {
    }

    public setOdsValuesWithHostRollup_args(
      List<ODSValue> data,
      boolean doHostRollup)
    {
      this();
      this.data = data;
      this.doHostRollup = doHostRollup;
      setDoHostRollupIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsValuesWithHostRollup_args(setOdsValuesWithHostRollup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetData()) {
        List<ODSValue> __this__data = new ArrayList<ODSValue>(other.data.size());
        for (ODSValue other_element : other.data) {
          __this__data.add(new ODSValue(other_element));
        }
        this.data = __this__data;
      }
      this.doHostRollup = other.doHostRollup;
    }

    public setOdsValuesWithHostRollup_args deepCopy() {
      return new setOdsValuesWithHostRollup_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
      setDoHostRollupIsSet(false);
      this.doHostRollup = false;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSValue>();
      }
      this.data.add(elem);
    }

    public List<ODSValue> getData() {
      return this.data;
    }

    public setOdsValuesWithHostRollup_args setData(List<ODSValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public boolean isDoHostRollup() {
      return this.doHostRollup;
    }

    public setOdsValuesWithHostRollup_args setDoHostRollup(boolean doHostRollup) {
      this.doHostRollup = doHostRollup;
      setDoHostRollupIsSet(true);
      return this;
    }

    public void unsetDoHostRollup() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOHOSTROLLUP_ISSET_ID);
    }

    /** Returns true if field doHostRollup is set (has been assigned a value) and false otherwise */
    public boolean isSetDoHostRollup() {
      return EncodingUtils.testBit(__isset_bitfield, __DOHOSTROLLUP_ISSET_ID);
    }

    public void setDoHostRollupIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOHOSTROLLUP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSValue>)value);
        }
        break;

      case DO_HOST_ROLLUP:
        if (value == null) {
          unsetDoHostRollup();
        } else {
          setDoHostRollup((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      case DO_HOST_ROLLUP:
        return Boolean.valueOf(isDoHostRollup());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      case DO_HOST_ROLLUP:
        return isSetDoHostRollup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsValuesWithHostRollup_args)
        return this.equals((setOdsValuesWithHostRollup_args)that);
      return false;
    }

    public boolean equals(setOdsValuesWithHostRollup_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_doHostRollup = true;
      boolean that_present_doHostRollup = true;
      if (this_present_doHostRollup || that_present_doHostRollup) {
        if (!(this_present_doHostRollup && that_present_doHostRollup))
          return false;
        if (this.doHostRollup != that.doHostRollup)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      boolean present_doHostRollup = true;
      list.add(present_doHostRollup);
      if (present_doHostRollup)
        list.add(doHostRollup);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsValuesWithHostRollup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDoHostRollup()).compareTo(other.isSetDoHostRollup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoHostRollup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doHostRollup, other.doHostRollup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsValuesWithHostRollup_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doHostRollup:");
      sb.append(this.doHostRollup);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsValuesWithHostRollup_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsValuesWithHostRollup_argsStandardScheme getScheme() {
        return new setOdsValuesWithHostRollup_argsStandardScheme();
      }
    }

    private static class setOdsValuesWithHostRollup_argsStandardScheme extends StandardScheme<setOdsValuesWithHostRollup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsValuesWithHostRollup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSValue>(_list248.size);
                  ODSValue _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new ODSValue();
                    _elem249.read(iprot);
                    struct.data.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DO_HOST_ROLLUP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.doHostRollup = iprot.readBool();
                struct.setDoHostRollupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsValuesWithHostRollup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSValue _iter251 : struct.data)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DO_HOST_ROLLUP_FIELD_DESC);
        oprot.writeBool(struct.doHostRollup);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsValuesWithHostRollup_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsValuesWithHostRollup_argsTupleScheme getScheme() {
        return new setOdsValuesWithHostRollup_argsTupleScheme();
      }
    }

    private static class setOdsValuesWithHostRollup_argsTupleScheme extends TupleScheme<setOdsValuesWithHostRollup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsValuesWithHostRollup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        if (struct.isSetDoHostRollup()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSValue _iter252 : struct.data)
            {
              _iter252.write(oprot);
            }
          }
        }
        if (struct.isSetDoHostRollup()) {
          oprot.writeBool(struct.doHostRollup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsValuesWithHostRollup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSValue>(_list253.size);
            ODSValue _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new ODSValue();
              _elem254.read(iprot);
              struct.data.add(_elem254);
            }
          }
          struct.setDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.doHostRollup = iprot.readBool();
          struct.setDoHostRollupIsSet(true);
        }
      }
    }

  }

  public static class setOdsValuesWithHostRollup_result implements org.apache.thrift.TBase<setOdsValuesWithHostRollup_result, setOdsValuesWithHostRollup_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsValuesWithHostRollup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsValuesWithHostRollup_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsValuesWithHostRollup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsValuesWithHostRollup_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsValuesWithHostRollup_result.class, metaDataMap);
    }

    public setOdsValuesWithHostRollup_result() {
    }

    public setOdsValuesWithHostRollup_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsValuesWithHostRollup_result(setOdsValuesWithHostRollup_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsValuesWithHostRollup_result deepCopy() {
      return new setOdsValuesWithHostRollup_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsValuesWithHostRollup_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsValuesWithHostRollup_result)
        return this.equals((setOdsValuesWithHostRollup_result)that);
      return false;
    }

    public boolean equals(setOdsValuesWithHostRollup_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsValuesWithHostRollup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsValuesWithHostRollup_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsValuesWithHostRollup_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsValuesWithHostRollup_resultStandardScheme getScheme() {
        return new setOdsValuesWithHostRollup_resultStandardScheme();
      }
    }

    private static class setOdsValuesWithHostRollup_resultStandardScheme extends StandardScheme<setOdsValuesWithHostRollup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsValuesWithHostRollup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsValuesWithHostRollup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsValuesWithHostRollup_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsValuesWithHostRollup_resultTupleScheme getScheme() {
        return new setOdsValuesWithHostRollup_resultTupleScheme();
      }
    }

    private static class setOdsValuesWithHostRollup_resultTupleScheme extends TupleScheme<setOdsValuesWithHostRollup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsValuesWithHostRollup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsValuesWithHostRollup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getOdsValues_args implements org.apache.thrift.TBase<getOdsValues_args, getOdsValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsValues_args");

    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsValues_argsTupleSchemeFactory());
    }

    public String entity; // required
    public String key; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY((short)1, "entity"),
      KEY((short)2, "key"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      AGGREGATION_TYPE((short)6, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY
            return ENTITY;
          case 2: // KEY
            return KEY;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsValues_args.class, metaDataMap);
    }

    public getOdsValues_args() {
    }

    public getOdsValues_args(
      String entity,
      String key,
      long start,
      long end_,
      OdsDataTable table,
      int aggregationType)
    {
      this();
      this.entity = entity;
      this.key = key;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsValues_args(getOdsValues_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntity()) {
        this.entity = other.entity;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.aggregationType = other.aggregationType;
    }

    public getOdsValues_args deepCopy() {
      return new getOdsValues_args(this);
    }

    @Override
    public void clear() {
      this.entity = null;
      this.key = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public String getEntity() {
      return this.entity;
    }

    public getOdsValues_args setEntity(String entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public getOdsValues_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getOdsValues_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getOdsValues_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getOdsValues_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getOdsValues_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY:
        return getEntity();

      case KEY:
        return getKey();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY:
        return isSetEntity();
      case KEY:
        return isSetKey();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsValues_args)
        return this.equals((getOdsValues_args)that);
      return false;
    }

    public boolean equals(getOdsValues_args that) {
      if (that == null)
        return false;

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity = true && (isSetEntity());
      list.add(present_entity);
      if (present_entity)
        list.add(entity);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsValues_args(");
      boolean first = true;

      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsValues_argsStandardSchemeFactory implements SchemeFactory {
      public getOdsValues_argsStandardScheme getScheme() {
        return new getOdsValues_argsStandardScheme();
      }
    }

    private static class getOdsValues_argsStandardScheme extends StandardScheme<getOdsValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entity = iprot.readString();
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          oprot.writeString(struct.entity);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsValues_argsTupleSchemeFactory implements SchemeFactory {
      public getOdsValues_argsTupleScheme getScheme() {
        return new getOdsValues_argsTupleScheme();
      }
    }

    private static class getOdsValues_argsTupleScheme extends TupleScheme<getOdsValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetEntity()) {
          oprot.writeString(struct.entity);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.entity = iprot.readString();
          struct.setEntityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getOdsValues_result implements org.apache.thrift.TBase<getOdsValues_result, getOdsValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsValues_resultTupleSchemeFactory());
    }

    public List<TimeValue> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeValue.class))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsValues_result.class, metaDataMap);
    }

    public getOdsValues_result() {
    }

    public getOdsValues_result(
      List<TimeValue> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsValues_result(getOdsValues_result other) {
      if (other.isSetSuccess()) {
        List<TimeValue> __this__success = new ArrayList<TimeValue>(other.success.size());
        for (TimeValue other_element : other.success) {
          __this__success.add(new TimeValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getOdsValues_result deepCopy() {
      return new getOdsValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TimeValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TimeValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TimeValue>();
      }
      this.success.add(elem);
    }

    public List<TimeValue> getSuccess() {
      return this.success;
    }

    public getOdsValues_result setSuccess(List<TimeValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getOdsValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TimeValue>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsValues_result)
        return this.equals((getOdsValues_result)that);
      return false;
    }

    public boolean equals(getOdsValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsValues_resultStandardSchemeFactory implements SchemeFactory {
      public getOdsValues_resultStandardScheme getScheme() {
        return new getOdsValues_resultStandardScheme();
      }
    }

    private static class getOdsValues_resultStandardScheme extends StandardScheme<getOdsValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new ArrayList<TimeValue>(_list256.size);
                  TimeValue _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = new TimeValue();
                    _elem257.read(iprot);
                    struct.success.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TimeValue _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsValues_resultTupleSchemeFactory implements SchemeFactory {
      public getOdsValues_resultTupleScheme getScheme() {
        return new getOdsValues_resultTupleScheme();
      }
    }

    private static class getOdsValues_resultTupleScheme extends TupleScheme<getOdsValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TimeValue _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TimeValue>(_list261.size);
            TimeValue _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = new TimeValue();
              _elem262.read(iprot);
              struct.success.add(_elem262);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsHistoricalData_args implements org.apache.thrift.TBase<setOdsHistoricalData_args, setOdsHistoricalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsHistoricalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsHistoricalData_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsHistoricalData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsHistoricalData_argsTupleSchemeFactory());
    }

    public List<ODSAppValue> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)-1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSAppValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsHistoricalData_args.class, metaDataMap);
    }

    public setOdsHistoricalData_args() {
    }

    public setOdsHistoricalData_args(
      List<ODSAppValue> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsHistoricalData_args(setOdsHistoricalData_args other) {
      if (other.isSetData()) {
        List<ODSAppValue> __this__data = new ArrayList<ODSAppValue>(other.data.size());
        for (ODSAppValue other_element : other.data) {
          __this__data.add(new ODSAppValue(other_element));
        }
        this.data = __this__data;
      }
    }

    public setOdsHistoricalData_args deepCopy() {
      return new setOdsHistoricalData_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSAppValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSAppValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSAppValue>();
      }
      this.data.add(elem);
    }

    public List<ODSAppValue> getData() {
      return this.data;
    }

    public setOdsHistoricalData_args setData(List<ODSAppValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSAppValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsHistoricalData_args)
        return this.equals((setOdsHistoricalData_args)that);
      return false;
    }

    public boolean equals(setOdsHistoricalData_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsHistoricalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsHistoricalData_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsHistoricalData_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsHistoricalData_argsStandardScheme getScheme() {
        return new setOdsHistoricalData_argsStandardScheme();
      }
    }

    private static class setOdsHistoricalData_argsStandardScheme extends StandardScheme<setOdsHistoricalData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSAppValue>(_list264.size);
                  ODSAppValue _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = new ODSAppValue();
                    _elem265.read(iprot);
                    struct.data.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSAppValue _iter267 : struct.data)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsHistoricalData_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsHistoricalData_argsTupleScheme getScheme() {
        return new setOdsHistoricalData_argsTupleScheme();
      }
    }

    private static class setOdsHistoricalData_argsTupleScheme extends TupleScheme<setOdsHistoricalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSAppValue _iter268 : struct.data)
            {
              _iter268.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSAppValue>(_list269.size);
            ODSAppValue _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new ODSAppValue();
              _elem270.read(iprot);
              struct.data.add(_elem270);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setOdsHistoricalData_result implements org.apache.thrift.TBase<setOdsHistoricalData_result, setOdsHistoricalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsHistoricalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsHistoricalData_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsHistoricalData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsHistoricalData_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsHistoricalData_result.class, metaDataMap);
    }

    public setOdsHistoricalData_result() {
    }

    public setOdsHistoricalData_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsHistoricalData_result(setOdsHistoricalData_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsHistoricalData_result deepCopy() {
      return new setOdsHistoricalData_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsHistoricalData_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsHistoricalData_result)
        return this.equals((setOdsHistoricalData_result)that);
      return false;
    }

    public boolean equals(setOdsHistoricalData_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsHistoricalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsHistoricalData_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsHistoricalData_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsHistoricalData_resultStandardScheme getScheme() {
        return new setOdsHistoricalData_resultStandardScheme();
      }
    }

    private static class setOdsHistoricalData_resultStandardScheme extends StandardScheme<setOdsHistoricalData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsHistoricalData_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsHistoricalData_resultTupleScheme getScheme() {
        return new setOdsHistoricalData_resultTupleScheme();
      }
    }

    private static class setOdsHistoricalData_resultTupleScheme extends TupleScheme<setOdsHistoricalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class deleteOdsHistoricalData_args implements org.apache.thrift.TBase<deleteOdsHistoricalData_args, deleteOdsHistoricalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOdsHistoricalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOdsHistoricalData_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOdsHistoricalData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOdsHistoricalData_argsTupleSchemeFactory());
    }

    public List<ODSHistoricalPurgeDefn> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)-1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSHistoricalPurgeDefn.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOdsHistoricalData_args.class, metaDataMap);
    }

    public deleteOdsHistoricalData_args() {
    }

    public deleteOdsHistoricalData_args(
      List<ODSHistoricalPurgeDefn> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOdsHistoricalData_args(deleteOdsHistoricalData_args other) {
      if (other.isSetData()) {
        List<ODSHistoricalPurgeDefn> __this__data = new ArrayList<ODSHistoricalPurgeDefn>(other.data.size());
        for (ODSHistoricalPurgeDefn other_element : other.data) {
          __this__data.add(new ODSHistoricalPurgeDefn(other_element));
        }
        this.data = __this__data;
      }
    }

    public deleteOdsHistoricalData_args deepCopy() {
      return new deleteOdsHistoricalData_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSHistoricalPurgeDefn> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSHistoricalPurgeDefn elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSHistoricalPurgeDefn>();
      }
      this.data.add(elem);
    }

    public List<ODSHistoricalPurgeDefn> getData() {
      return this.data;
    }

    public deleteOdsHistoricalData_args setData(List<ODSHistoricalPurgeDefn> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSHistoricalPurgeDefn>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOdsHistoricalData_args)
        return this.equals((deleteOdsHistoricalData_args)that);
      return false;
    }

    public boolean equals(deleteOdsHistoricalData_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOdsHistoricalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOdsHistoricalData_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOdsHistoricalData_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOdsHistoricalData_argsStandardScheme getScheme() {
        return new deleteOdsHistoricalData_argsStandardScheme();
      }
    }

    private static class deleteOdsHistoricalData_argsStandardScheme extends StandardScheme<deleteOdsHistoricalData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSHistoricalPurgeDefn>(_list272.size);
                  ODSHistoricalPurgeDefn _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = new ODSHistoricalPurgeDefn();
                    _elem273.read(iprot);
                    struct.data.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSHistoricalPurgeDefn _iter275 : struct.data)
            {
              _iter275.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOdsHistoricalData_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOdsHistoricalData_argsTupleScheme getScheme() {
        return new deleteOdsHistoricalData_argsTupleScheme();
      }
    }

    private static class deleteOdsHistoricalData_argsTupleScheme extends TupleScheme<deleteOdsHistoricalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSHistoricalPurgeDefn _iter276 : struct.data)
            {
              _iter276.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOdsHistoricalData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSHistoricalPurgeDefn>(_list277.size);
            ODSHistoricalPurgeDefn _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = new ODSHistoricalPurgeDefn();
              _elem278.read(iprot);
              struct.data.add(_elem278);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class deleteOdsHistoricalData_result implements org.apache.thrift.TBase<deleteOdsHistoricalData_result, deleteOdsHistoricalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOdsHistoricalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOdsHistoricalData_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOdsHistoricalData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOdsHistoricalData_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOdsHistoricalData_result.class, metaDataMap);
    }

    public deleteOdsHistoricalData_result() {
    }

    public deleteOdsHistoricalData_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOdsHistoricalData_result(deleteOdsHistoricalData_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public deleteOdsHistoricalData_result deepCopy() {
      return new deleteOdsHistoricalData_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public deleteOdsHistoricalData_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOdsHistoricalData_result)
        return this.equals((deleteOdsHistoricalData_result)that);
      return false;
    }

    public boolean equals(deleteOdsHistoricalData_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOdsHistoricalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOdsHistoricalData_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOdsHistoricalData_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOdsHistoricalData_resultStandardScheme getScheme() {
        return new deleteOdsHistoricalData_resultStandardScheme();
      }
    }

    private static class deleteOdsHistoricalData_resultStandardScheme extends StandardScheme<deleteOdsHistoricalData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOdsHistoricalData_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOdsHistoricalData_resultTupleScheme getScheme() {
        return new deleteOdsHistoricalData_resultTupleScheme();
      }
    }

    private static class deleteOdsHistoricalData_resultTupleScheme extends TupleScheme<deleteOdsHistoricalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOdsHistoricalData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getSnapshotWithFilters_args implements org.apache.thrift.TBase<getSnapshotWithFilters_args, getSnapshotWithFilters_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSnapshotWithFilters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnapshotWithFilters_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField FIND_MISSING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("findMissingValue", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField PERIOD_OVERRIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("periodOverride", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField ENTITY_IS_REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIsRegex", org.apache.thrift.protocol.TType.BOOL, (short)7);
    private static final org.apache.thrift.protocol.TField KEY_IS_REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("keyIsRegex", org.apache.thrift.protocol.TType.BOOL, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSnapshotWithFilters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSnapshotWithFilters_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long timeStamp; // required
    public ODSSnapshotFilter filter; // required
    public boolean findMissingValue; // required
    public int periodOverride; // required
    public boolean entityIsRegex; // required
    public boolean keyIsRegex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      TIME_STAMP((short)3, "timeStamp"),
      FILTER((short)4, "filter"),
      FIND_MISSING_VALUE((short)5, "findMissingValue"),
      PERIOD_OVERRIDE((short)6, "periodOverride"),
      ENTITY_IS_REGEX((short)7, "entityIsRegex"),
      KEY_IS_REGEX((short)8, "keyIsRegex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // TIME_STAMP
            return TIME_STAMP;
          case 4: // FILTER
            return FILTER;
          case 5: // FIND_MISSING_VALUE
            return FIND_MISSING_VALUE;
          case 6: // PERIOD_OVERRIDE
            return PERIOD_OVERRIDE;
          case 7: // ENTITY_IS_REGEX
            return ENTITY_IS_REGEX;
          case 8: // KEY_IS_REGEX
            return KEY_IS_REGEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __FINDMISSINGVALUE_ISSET_ID = 1;
    private static final int __PERIODOVERRIDE_ISSET_ID = 2;
    private static final int __ENTITYISREGEX_ISSET_ID = 3;
    private static final int __KEYISREGEX_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSSnapshotFilter.class)));
      tmpMap.put(_Fields.FIND_MISSING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("findMissingValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PERIOD_OVERRIDE, new org.apache.thrift.meta_data.FieldMetaData("periodOverride", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENTITY_IS_REGEX, new org.apache.thrift.meta_data.FieldMetaData("entityIsRegex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KEY_IS_REGEX, new org.apache.thrift.meta_data.FieldMetaData("keyIsRegex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnapshotWithFilters_args.class, metaDataMap);
    }

    public getSnapshotWithFilters_args() {
    }

    public getSnapshotWithFilters_args(
      List<String> entities,
      List<String> keys,
      long timeStamp,
      ODSSnapshotFilter filter,
      boolean findMissingValue,
      int periodOverride,
      boolean entityIsRegex,
      boolean keyIsRegex)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.timeStamp = timeStamp;
      setTimeStampIsSet(true);
      this.filter = filter;
      this.findMissingValue = findMissingValue;
      setFindMissingValueIsSet(true);
      this.periodOverride = periodOverride;
      setPeriodOverrideIsSet(true);
      this.entityIsRegex = entityIsRegex;
      setEntityIsRegexIsSet(true);
      this.keyIsRegex = keyIsRegex;
      setKeyIsRegexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnapshotWithFilters_args(getSnapshotWithFilters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.timeStamp = other.timeStamp;
      if (other.isSetFilter()) {
        this.filter = new ODSSnapshotFilter(other.filter);
      }
      this.findMissingValue = other.findMissingValue;
      this.periodOverride = other.periodOverride;
      this.entityIsRegex = other.entityIsRegex;
      this.keyIsRegex = other.keyIsRegex;
    }

    public getSnapshotWithFilters_args deepCopy() {
      return new getSnapshotWithFilters_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setTimeStampIsSet(false);
      this.timeStamp = 0;
      this.filter = null;
      setFindMissingValueIsSet(false);
      this.findMissingValue = false;
      setPeriodOverrideIsSet(false);
      this.periodOverride = 0;
      setEntityIsRegexIsSet(false);
      this.entityIsRegex = false;
      setKeyIsRegexIsSet(false);
      this.keyIsRegex = false;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getSnapshotWithFilters_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getSnapshotWithFilters_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getTimeStamp() {
      return this.timeStamp;
    }

    public getSnapshotWithFilters_args setTimeStamp(long timeStamp) {
      this.timeStamp = timeStamp;
      setTimeStampIsSet(true);
      return this;
    }

    public void unsetTimeStamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeStamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimeStampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public ODSSnapshotFilter getFilter() {
      return this.filter;
    }

    public getSnapshotWithFilters_args setFilter(ODSSnapshotFilter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public boolean isFindMissingValue() {
      return this.findMissingValue;
    }

    public getSnapshotWithFilters_args setFindMissingValue(boolean findMissingValue) {
      this.findMissingValue = findMissingValue;
      setFindMissingValueIsSet(true);
      return this;
    }

    public void unsetFindMissingValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINDMISSINGVALUE_ISSET_ID);
    }

    /** Returns true if field findMissingValue is set (has been assigned a value) and false otherwise */
    public boolean isSetFindMissingValue() {
      return EncodingUtils.testBit(__isset_bitfield, __FINDMISSINGVALUE_ISSET_ID);
    }

    public void setFindMissingValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINDMISSINGVALUE_ISSET_ID, value);
    }

    public int getPeriodOverride() {
      return this.periodOverride;
    }

    public getSnapshotWithFilters_args setPeriodOverride(int periodOverride) {
      this.periodOverride = periodOverride;
      setPeriodOverrideIsSet(true);
      return this;
    }

    public void unsetPeriodOverride() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERIODOVERRIDE_ISSET_ID);
    }

    /** Returns true if field periodOverride is set (has been assigned a value) and false otherwise */
    public boolean isSetPeriodOverride() {
      return EncodingUtils.testBit(__isset_bitfield, __PERIODOVERRIDE_ISSET_ID);
    }

    public void setPeriodOverrideIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERIODOVERRIDE_ISSET_ID, value);
    }

    public boolean isEntityIsRegex() {
      return this.entityIsRegex;
    }

    public getSnapshotWithFilters_args setEntityIsRegex(boolean entityIsRegex) {
      this.entityIsRegex = entityIsRegex;
      setEntityIsRegexIsSet(true);
      return this;
    }

    public void unsetEntityIsRegex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITYISREGEX_ISSET_ID);
    }

    /** Returns true if field entityIsRegex is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIsRegex() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTITYISREGEX_ISSET_ID);
    }

    public void setEntityIsRegexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITYISREGEX_ISSET_ID, value);
    }

    public boolean isKeyIsRegex() {
      return this.keyIsRegex;
    }

    public getSnapshotWithFilters_args setKeyIsRegex(boolean keyIsRegex) {
      this.keyIsRegex = keyIsRegex;
      setKeyIsRegexIsSet(true);
      return this;
    }

    public void unsetKeyIsRegex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEYISREGEX_ISSET_ID);
    }

    /** Returns true if field keyIsRegex is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyIsRegex() {
      return EncodingUtils.testBit(__isset_bitfield, __KEYISREGEX_ISSET_ID);
    }

    public void setKeyIsRegexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEYISREGEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case TIME_STAMP:
        if (value == null) {
          unsetTimeStamp();
        } else {
          setTimeStamp((Long)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((ODSSnapshotFilter)value);
        }
        break;

      case FIND_MISSING_VALUE:
        if (value == null) {
          unsetFindMissingValue();
        } else {
          setFindMissingValue((Boolean)value);
        }
        break;

      case PERIOD_OVERRIDE:
        if (value == null) {
          unsetPeriodOverride();
        } else {
          setPeriodOverride((Integer)value);
        }
        break;

      case ENTITY_IS_REGEX:
        if (value == null) {
          unsetEntityIsRegex();
        } else {
          setEntityIsRegex((Boolean)value);
        }
        break;

      case KEY_IS_REGEX:
        if (value == null) {
          unsetKeyIsRegex();
        } else {
          setKeyIsRegex((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case TIME_STAMP:
        return Long.valueOf(getTimeStamp());

      case FILTER:
        return getFilter();

      case FIND_MISSING_VALUE:
        return Boolean.valueOf(isFindMissingValue());

      case PERIOD_OVERRIDE:
        return Integer.valueOf(getPeriodOverride());

      case ENTITY_IS_REGEX:
        return Boolean.valueOf(isEntityIsRegex());

      case KEY_IS_REGEX:
        return Boolean.valueOf(isKeyIsRegex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case TIME_STAMP:
        return isSetTimeStamp();
      case FILTER:
        return isSetFilter();
      case FIND_MISSING_VALUE:
        return isSetFindMissingValue();
      case PERIOD_OVERRIDE:
        return isSetPeriodOverride();
      case ENTITY_IS_REGEX:
        return isSetEntityIsRegex();
      case KEY_IS_REGEX:
        return isSetKeyIsRegex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnapshotWithFilters_args)
        return this.equals((getSnapshotWithFilters_args)that);
      return false;
    }

    public boolean equals(getSnapshotWithFilters_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_timeStamp = true;
      boolean that_present_timeStamp = true;
      if (this_present_timeStamp || that_present_timeStamp) {
        if (!(this_present_timeStamp && that_present_timeStamp))
          return false;
        if (this.timeStamp != that.timeStamp)
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_findMissingValue = true;
      boolean that_present_findMissingValue = true;
      if (this_present_findMissingValue || that_present_findMissingValue) {
        if (!(this_present_findMissingValue && that_present_findMissingValue))
          return false;
        if (this.findMissingValue != that.findMissingValue)
          return false;
      }

      boolean this_present_periodOverride = true;
      boolean that_present_periodOverride = true;
      if (this_present_periodOverride || that_present_periodOverride) {
        if (!(this_present_periodOverride && that_present_periodOverride))
          return false;
        if (this.periodOverride != that.periodOverride)
          return false;
      }

      boolean this_present_entityIsRegex = true;
      boolean that_present_entityIsRegex = true;
      if (this_present_entityIsRegex || that_present_entityIsRegex) {
        if (!(this_present_entityIsRegex && that_present_entityIsRegex))
          return false;
        if (this.entityIsRegex != that.entityIsRegex)
          return false;
      }

      boolean this_present_keyIsRegex = true;
      boolean that_present_keyIsRegex = true;
      if (this_present_keyIsRegex || that_present_keyIsRegex) {
        if (!(this_present_keyIsRegex && that_present_keyIsRegex))
          return false;
        if (this.keyIsRegex != that.keyIsRegex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_timeStamp = true;
      list.add(present_timeStamp);
      if (present_timeStamp)
        list.add(timeStamp);

      boolean present_filter = true && (isSetFilter());
      list.add(present_filter);
      if (present_filter)
        list.add(filter);

      boolean present_findMissingValue = true;
      list.add(present_findMissingValue);
      if (present_findMissingValue)
        list.add(findMissingValue);

      boolean present_periodOverride = true;
      list.add(present_periodOverride);
      if (present_periodOverride)
        list.add(periodOverride);

      boolean present_entityIsRegex = true;
      list.add(present_entityIsRegex);
      if (present_entityIsRegex)
        list.add(entityIsRegex);

      boolean present_keyIsRegex = true;
      list.add(present_keyIsRegex);
      if (present_keyIsRegex)
        list.add(keyIsRegex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSnapshotWithFilters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeStamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFindMissingValue()).compareTo(other.isSetFindMissingValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindMissingValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findMissingValue, other.findMissingValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeriodOverride()).compareTo(other.isSetPeriodOverride());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeriodOverride()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.periodOverride, other.periodOverride);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIsRegex()).compareTo(other.isSetEntityIsRegex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIsRegex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIsRegex, other.entityIsRegex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyIsRegex()).compareTo(other.isSetKeyIsRegex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyIsRegex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyIsRegex, other.keyIsRegex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSnapshotWithFilters_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeStamp:");
      sb.append(this.timeStamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("findMissingValue:");
      sb.append(this.findMissingValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("periodOverride:");
      sb.append(this.periodOverride);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIsRegex:");
      sb.append(this.entityIsRegex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyIsRegex:");
      sb.append(this.keyIsRegex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filter != null) {
        filter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnapshotWithFilters_argsStandardSchemeFactory implements SchemeFactory {
      public getSnapshotWithFilters_argsStandardScheme getScheme() {
        return new getSnapshotWithFilters_argsStandardScheme();
      }
    }

    private static class getSnapshotWithFilters_argsStandardScheme extends StandardScheme<getSnapshotWithFilters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnapshotWithFilters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list280.size);
                  String _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = iprot.readString();
                    struct.entities.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list283 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list283.size);
                  String _elem284;
                  for (int _i285 = 0; _i285 < _list283.size; ++_i285)
                  {
                    _elem284 = iprot.readString();
                    struct.keys.add(_elem284);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_STAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeStamp = iprot.readI64();
                struct.setTimeStampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filter = new ODSSnapshotFilter();
                struct.filter.read(iprot);
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FIND_MISSING_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.findMissingValue = iprot.readBool();
                struct.setFindMissingValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PERIOD_OVERRIDE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.periodOverride = iprot.readI32();
                struct.setPeriodOverrideIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ENTITY_IS_REGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.entityIsRegex = iprot.readBool();
                struct.setEntityIsRegexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // KEY_IS_REGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.keyIsRegex = iprot.readBool();
                struct.setKeyIsRegexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnapshotWithFilters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter286 : struct.entities)
            {
              oprot.writeString(_iter286);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter287 : struct.keys)
            {
              oprot.writeString(_iter287);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI64(struct.timeStamp);
        oprot.writeFieldEnd();
        if (struct.filter != null) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          struct.filter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FIND_MISSING_VALUE_FIELD_DESC);
        oprot.writeBool(struct.findMissingValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PERIOD_OVERRIDE_FIELD_DESC);
        oprot.writeI32(struct.periodOverride);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENTITY_IS_REGEX_FIELD_DESC);
        oprot.writeBool(struct.entityIsRegex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEY_IS_REGEX_FIELD_DESC);
        oprot.writeBool(struct.keyIsRegex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnapshotWithFilters_argsTupleSchemeFactory implements SchemeFactory {
      public getSnapshotWithFilters_argsTupleScheme getScheme() {
        return new getSnapshotWithFilters_argsTupleScheme();
      }
    }

    private static class getSnapshotWithFilters_argsTupleScheme extends TupleScheme<getSnapshotWithFilters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnapshotWithFilters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetTimeStamp()) {
          optionals.set(2);
        }
        if (struct.isSetFilter()) {
          optionals.set(3);
        }
        if (struct.isSetFindMissingValue()) {
          optionals.set(4);
        }
        if (struct.isSetPeriodOverride()) {
          optionals.set(5);
        }
        if (struct.isSetEntityIsRegex()) {
          optionals.set(6);
        }
        if (struct.isSetKeyIsRegex()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter288 : struct.entities)
            {
              oprot.writeString(_iter288);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter289 : struct.keys)
            {
              oprot.writeString(_iter289);
            }
          }
        }
        if (struct.isSetTimeStamp()) {
          oprot.writeI64(struct.timeStamp);
        }
        if (struct.isSetFilter()) {
          struct.filter.write(oprot);
        }
        if (struct.isSetFindMissingValue()) {
          oprot.writeBool(struct.findMissingValue);
        }
        if (struct.isSetPeriodOverride()) {
          oprot.writeI32(struct.periodOverride);
        }
        if (struct.isSetEntityIsRegex()) {
          oprot.writeBool(struct.entityIsRegex);
        }
        if (struct.isSetKeyIsRegex()) {
          oprot.writeBool(struct.keyIsRegex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnapshotWithFilters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list290 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list290.size);
            String _elem291;
            for (int _i292 = 0; _i292 < _list290.size; ++_i292)
            {
              _elem291 = iprot.readString();
              struct.entities.add(_elem291);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list293.size);
            String _elem294;
            for (int _i295 = 0; _i295 < _list293.size; ++_i295)
            {
              _elem294 = iprot.readString();
              struct.keys.add(_elem294);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeStamp = iprot.readI64();
          struct.setTimeStampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.filter = new ODSSnapshotFilter();
          struct.filter.read(iprot);
          struct.setFilterIsSet(true);
        }
        if (incoming.get(4)) {
          struct.findMissingValue = iprot.readBool();
          struct.setFindMissingValueIsSet(true);
        }
        if (incoming.get(5)) {
          struct.periodOverride = iprot.readI32();
          struct.setPeriodOverrideIsSet(true);
        }
        if (incoming.get(6)) {
          struct.entityIsRegex = iprot.readBool();
          struct.setEntityIsRegexIsSet(true);
        }
        if (incoming.get(7)) {
          struct.keyIsRegex = iprot.readBool();
          struct.setKeyIsRegexIsSet(true);
        }
      }
    }

  }

  public static class getSnapshotWithFilters_result implements org.apache.thrift.TBase<getSnapshotWithFilters_result, getSnapshotWithFilters_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSnapshotWithFilters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnapshotWithFilters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSnapshotWithFilters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSnapshotWithFilters_resultTupleSchemeFactory());
    }

    public Map<String,List<ODSSnapshotValue>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSSnapshotValue.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnapshotWithFilters_result.class, metaDataMap);
    }

    public getSnapshotWithFilters_result() {
    }

    public getSnapshotWithFilters_result(
      Map<String,List<ODSSnapshotValue>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnapshotWithFilters_result(getSnapshotWithFilters_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<ODSSnapshotValue>> __this__success = new HashMap<String,List<ODSSnapshotValue>>(other.success.size());
        for (Map.Entry<String, List<ODSSnapshotValue>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<ODSSnapshotValue> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<ODSSnapshotValue> __this__success_copy_value = new ArrayList<ODSSnapshotValue>(other_element_value.size());
          for (ODSSnapshotValue other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new ODSSnapshotValue(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getSnapshotWithFilters_result deepCopy() {
      return new getSnapshotWithFilters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<ODSSnapshotValue> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<ODSSnapshotValue>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<ODSSnapshotValue>> getSuccess() {
      return this.success;
    }

    public getSnapshotWithFilters_result setSuccess(Map<String,List<ODSSnapshotValue>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<ODSSnapshotValue>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnapshotWithFilters_result)
        return this.equals((getSnapshotWithFilters_result)that);
      return false;
    }

    public boolean equals(getSnapshotWithFilters_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSnapshotWithFilters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSnapshotWithFilters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnapshotWithFilters_resultStandardSchemeFactory implements SchemeFactory {
      public getSnapshotWithFilters_resultStandardScheme getScheme() {
        return new getSnapshotWithFilters_resultStandardScheme();
      }
    }

    private static class getSnapshotWithFilters_resultStandardScheme extends StandardScheme<getSnapshotWithFilters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnapshotWithFilters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map296 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<ODSSnapshotValue>>(2*_map296.size);
                  String _key297;
                  List<ODSSnapshotValue> _val298;
                  for (int _i299 = 0; _i299 < _map296.size; ++_i299)
                  {
                    _key297 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list300 = iprot.readListBegin();
                      _val298 = new ArrayList<ODSSnapshotValue>(_list300.size);
                      ODSSnapshotValue _elem301;
                      for (int _i302 = 0; _i302 < _list300.size; ++_i302)
                      {
                        _elem301 = new ODSSnapshotValue();
                        _elem301.read(iprot);
                        _val298.add(_elem301);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key297, _val298);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnapshotWithFilters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<ODSSnapshotValue>> _iter303 : struct.success.entrySet())
            {
              oprot.writeString(_iter303.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter303.getValue().size()));
                for (ODSSnapshotValue _iter304 : _iter303.getValue())
                {
                  _iter304.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnapshotWithFilters_resultTupleSchemeFactory implements SchemeFactory {
      public getSnapshotWithFilters_resultTupleScheme getScheme() {
        return new getSnapshotWithFilters_resultTupleScheme();
      }
    }

    private static class getSnapshotWithFilters_resultTupleScheme extends TupleScheme<getSnapshotWithFilters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnapshotWithFilters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<ODSSnapshotValue>> _iter305 : struct.success.entrySet())
            {
              oprot.writeString(_iter305.getKey());
              {
                oprot.writeI32(_iter305.getValue().size());
                for (ODSSnapshotValue _iter306 : _iter305.getValue())
                {
                  _iter306.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnapshotWithFilters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map307 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<ODSSnapshotValue>>(2*_map307.size);
            String _key308;
            List<ODSSnapshotValue> _val309;
            for (int _i310 = 0; _i310 < _map307.size; ++_i310)
            {
              _key308 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val309 = new ArrayList<ODSSnapshotValue>(_list311.size);
                ODSSnapshotValue _elem312;
                for (int _i313 = 0; _i313 < _list311.size; ++_i313)
                {
                  _elem312 = new ODSSnapshotValue();
                  _elem312.read(iprot);
                  _val309.add(_elem312);
                }
              }
              struct.success.put(_key308, _val309);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSnapshotCompressed_args implements org.apache.thrift.TBase<getSnapshotCompressed_args, getSnapshotCompressed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSnapshotCompressed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnapshotCompressed_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField FIND_MISSING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("findMissingValue", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField PERIOD_OVERRIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("periodOverride", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField ENTITY_IS_REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIsRegex", org.apache.thrift.protocol.TType.BOOL, (short)7);
    private static final org.apache.thrift.protocol.TField KEY_IS_REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("keyIsRegex", org.apache.thrift.protocol.TType.BOOL, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSnapshotCompressed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSnapshotCompressed_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long timeStamp; // required
    public ODSSnapshotFilter filter; // required
    public boolean findMissingValue; // required
    public int periodOverride; // required
    public boolean entityIsRegex; // required
    public boolean keyIsRegex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      TIME_STAMP((short)3, "timeStamp"),
      FILTER((short)4, "filter"),
      FIND_MISSING_VALUE((short)5, "findMissingValue"),
      PERIOD_OVERRIDE((short)6, "periodOverride"),
      ENTITY_IS_REGEX((short)7, "entityIsRegex"),
      KEY_IS_REGEX((short)8, "keyIsRegex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // TIME_STAMP
            return TIME_STAMP;
          case 4: // FILTER
            return FILTER;
          case 5: // FIND_MISSING_VALUE
            return FIND_MISSING_VALUE;
          case 6: // PERIOD_OVERRIDE
            return PERIOD_OVERRIDE;
          case 7: // ENTITY_IS_REGEX
            return ENTITY_IS_REGEX;
          case 8: // KEY_IS_REGEX
            return KEY_IS_REGEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __FINDMISSINGVALUE_ISSET_ID = 1;
    private static final int __PERIODOVERRIDE_ISSET_ID = 2;
    private static final int __ENTITYISREGEX_ISSET_ID = 3;
    private static final int __KEYISREGEX_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSSnapshotFilter.class)));
      tmpMap.put(_Fields.FIND_MISSING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("findMissingValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PERIOD_OVERRIDE, new org.apache.thrift.meta_data.FieldMetaData("periodOverride", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENTITY_IS_REGEX, new org.apache.thrift.meta_data.FieldMetaData("entityIsRegex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KEY_IS_REGEX, new org.apache.thrift.meta_data.FieldMetaData("keyIsRegex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnapshotCompressed_args.class, metaDataMap);
    }

    public getSnapshotCompressed_args() {
    }

    public getSnapshotCompressed_args(
      List<String> entities,
      List<String> keys,
      long timeStamp,
      ODSSnapshotFilter filter,
      boolean findMissingValue,
      int periodOverride,
      boolean entityIsRegex,
      boolean keyIsRegex)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.timeStamp = timeStamp;
      setTimeStampIsSet(true);
      this.filter = filter;
      this.findMissingValue = findMissingValue;
      setFindMissingValueIsSet(true);
      this.periodOverride = periodOverride;
      setPeriodOverrideIsSet(true);
      this.entityIsRegex = entityIsRegex;
      setEntityIsRegexIsSet(true);
      this.keyIsRegex = keyIsRegex;
      setKeyIsRegexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnapshotCompressed_args(getSnapshotCompressed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.timeStamp = other.timeStamp;
      if (other.isSetFilter()) {
        this.filter = new ODSSnapshotFilter(other.filter);
      }
      this.findMissingValue = other.findMissingValue;
      this.periodOverride = other.periodOverride;
      this.entityIsRegex = other.entityIsRegex;
      this.keyIsRegex = other.keyIsRegex;
    }

    public getSnapshotCompressed_args deepCopy() {
      return new getSnapshotCompressed_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setTimeStampIsSet(false);
      this.timeStamp = 0;
      this.filter = null;
      setFindMissingValueIsSet(false);
      this.findMissingValue = false;
      setPeriodOverrideIsSet(false);
      this.periodOverride = 0;
      setEntityIsRegexIsSet(false);
      this.entityIsRegex = false;
      setKeyIsRegexIsSet(false);
      this.keyIsRegex = false;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getSnapshotCompressed_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getSnapshotCompressed_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getTimeStamp() {
      return this.timeStamp;
    }

    public getSnapshotCompressed_args setTimeStamp(long timeStamp) {
      this.timeStamp = timeStamp;
      setTimeStampIsSet(true);
      return this;
    }

    public void unsetTimeStamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeStamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimeStampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public ODSSnapshotFilter getFilter() {
      return this.filter;
    }

    public getSnapshotCompressed_args setFilter(ODSSnapshotFilter filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public boolean isFindMissingValue() {
      return this.findMissingValue;
    }

    public getSnapshotCompressed_args setFindMissingValue(boolean findMissingValue) {
      this.findMissingValue = findMissingValue;
      setFindMissingValueIsSet(true);
      return this;
    }

    public void unsetFindMissingValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINDMISSINGVALUE_ISSET_ID);
    }

    /** Returns true if field findMissingValue is set (has been assigned a value) and false otherwise */
    public boolean isSetFindMissingValue() {
      return EncodingUtils.testBit(__isset_bitfield, __FINDMISSINGVALUE_ISSET_ID);
    }

    public void setFindMissingValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINDMISSINGVALUE_ISSET_ID, value);
    }

    public int getPeriodOverride() {
      return this.periodOverride;
    }

    public getSnapshotCompressed_args setPeriodOverride(int periodOverride) {
      this.periodOverride = periodOverride;
      setPeriodOverrideIsSet(true);
      return this;
    }

    public void unsetPeriodOverride() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERIODOVERRIDE_ISSET_ID);
    }

    /** Returns true if field periodOverride is set (has been assigned a value) and false otherwise */
    public boolean isSetPeriodOverride() {
      return EncodingUtils.testBit(__isset_bitfield, __PERIODOVERRIDE_ISSET_ID);
    }

    public void setPeriodOverrideIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERIODOVERRIDE_ISSET_ID, value);
    }

    public boolean isEntityIsRegex() {
      return this.entityIsRegex;
    }

    public getSnapshotCompressed_args setEntityIsRegex(boolean entityIsRegex) {
      this.entityIsRegex = entityIsRegex;
      setEntityIsRegexIsSet(true);
      return this;
    }

    public void unsetEntityIsRegex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITYISREGEX_ISSET_ID);
    }

    /** Returns true if field entityIsRegex is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIsRegex() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTITYISREGEX_ISSET_ID);
    }

    public void setEntityIsRegexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITYISREGEX_ISSET_ID, value);
    }

    public boolean isKeyIsRegex() {
      return this.keyIsRegex;
    }

    public getSnapshotCompressed_args setKeyIsRegex(boolean keyIsRegex) {
      this.keyIsRegex = keyIsRegex;
      setKeyIsRegexIsSet(true);
      return this;
    }

    public void unsetKeyIsRegex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEYISREGEX_ISSET_ID);
    }

    /** Returns true if field keyIsRegex is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyIsRegex() {
      return EncodingUtils.testBit(__isset_bitfield, __KEYISREGEX_ISSET_ID);
    }

    public void setKeyIsRegexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEYISREGEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case TIME_STAMP:
        if (value == null) {
          unsetTimeStamp();
        } else {
          setTimeStamp((Long)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((ODSSnapshotFilter)value);
        }
        break;

      case FIND_MISSING_VALUE:
        if (value == null) {
          unsetFindMissingValue();
        } else {
          setFindMissingValue((Boolean)value);
        }
        break;

      case PERIOD_OVERRIDE:
        if (value == null) {
          unsetPeriodOverride();
        } else {
          setPeriodOverride((Integer)value);
        }
        break;

      case ENTITY_IS_REGEX:
        if (value == null) {
          unsetEntityIsRegex();
        } else {
          setEntityIsRegex((Boolean)value);
        }
        break;

      case KEY_IS_REGEX:
        if (value == null) {
          unsetKeyIsRegex();
        } else {
          setKeyIsRegex((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case TIME_STAMP:
        return Long.valueOf(getTimeStamp());

      case FILTER:
        return getFilter();

      case FIND_MISSING_VALUE:
        return Boolean.valueOf(isFindMissingValue());

      case PERIOD_OVERRIDE:
        return Integer.valueOf(getPeriodOverride());

      case ENTITY_IS_REGEX:
        return Boolean.valueOf(isEntityIsRegex());

      case KEY_IS_REGEX:
        return Boolean.valueOf(isKeyIsRegex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case TIME_STAMP:
        return isSetTimeStamp();
      case FILTER:
        return isSetFilter();
      case FIND_MISSING_VALUE:
        return isSetFindMissingValue();
      case PERIOD_OVERRIDE:
        return isSetPeriodOverride();
      case ENTITY_IS_REGEX:
        return isSetEntityIsRegex();
      case KEY_IS_REGEX:
        return isSetKeyIsRegex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnapshotCompressed_args)
        return this.equals((getSnapshotCompressed_args)that);
      return false;
    }

    public boolean equals(getSnapshotCompressed_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_timeStamp = true;
      boolean that_present_timeStamp = true;
      if (this_present_timeStamp || that_present_timeStamp) {
        if (!(this_present_timeStamp && that_present_timeStamp))
          return false;
        if (this.timeStamp != that.timeStamp)
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_findMissingValue = true;
      boolean that_present_findMissingValue = true;
      if (this_present_findMissingValue || that_present_findMissingValue) {
        if (!(this_present_findMissingValue && that_present_findMissingValue))
          return false;
        if (this.findMissingValue != that.findMissingValue)
          return false;
      }

      boolean this_present_periodOverride = true;
      boolean that_present_periodOverride = true;
      if (this_present_periodOverride || that_present_periodOverride) {
        if (!(this_present_periodOverride && that_present_periodOverride))
          return false;
        if (this.periodOverride != that.periodOverride)
          return false;
      }

      boolean this_present_entityIsRegex = true;
      boolean that_present_entityIsRegex = true;
      if (this_present_entityIsRegex || that_present_entityIsRegex) {
        if (!(this_present_entityIsRegex && that_present_entityIsRegex))
          return false;
        if (this.entityIsRegex != that.entityIsRegex)
          return false;
      }

      boolean this_present_keyIsRegex = true;
      boolean that_present_keyIsRegex = true;
      if (this_present_keyIsRegex || that_present_keyIsRegex) {
        if (!(this_present_keyIsRegex && that_present_keyIsRegex))
          return false;
        if (this.keyIsRegex != that.keyIsRegex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_timeStamp = true;
      list.add(present_timeStamp);
      if (present_timeStamp)
        list.add(timeStamp);

      boolean present_filter = true && (isSetFilter());
      list.add(present_filter);
      if (present_filter)
        list.add(filter);

      boolean present_findMissingValue = true;
      list.add(present_findMissingValue);
      if (present_findMissingValue)
        list.add(findMissingValue);

      boolean present_periodOverride = true;
      list.add(present_periodOverride);
      if (present_periodOverride)
        list.add(periodOverride);

      boolean present_entityIsRegex = true;
      list.add(present_entityIsRegex);
      if (present_entityIsRegex)
        list.add(entityIsRegex);

      boolean present_keyIsRegex = true;
      list.add(present_keyIsRegex);
      if (present_keyIsRegex)
        list.add(keyIsRegex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSnapshotCompressed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeStamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFindMissingValue()).compareTo(other.isSetFindMissingValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindMissingValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findMissingValue, other.findMissingValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeriodOverride()).compareTo(other.isSetPeriodOverride());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeriodOverride()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.periodOverride, other.periodOverride);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIsRegex()).compareTo(other.isSetEntityIsRegex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIsRegex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIsRegex, other.entityIsRegex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyIsRegex()).compareTo(other.isSetKeyIsRegex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyIsRegex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyIsRegex, other.keyIsRegex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSnapshotCompressed_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeStamp:");
      sb.append(this.timeStamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("findMissingValue:");
      sb.append(this.findMissingValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("periodOverride:");
      sb.append(this.periodOverride);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIsRegex:");
      sb.append(this.entityIsRegex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyIsRegex:");
      sb.append(this.keyIsRegex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filter != null) {
        filter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnapshotCompressed_argsStandardSchemeFactory implements SchemeFactory {
      public getSnapshotCompressed_argsStandardScheme getScheme() {
        return new getSnapshotCompressed_argsStandardScheme();
      }
    }

    private static class getSnapshotCompressed_argsStandardScheme extends StandardScheme<getSnapshotCompressed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnapshotCompressed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list314.size);
                  String _elem315;
                  for (int _i316 = 0; _i316 < _list314.size; ++_i316)
                  {
                    _elem315 = iprot.readString();
                    struct.entities.add(_elem315);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list317 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list317.size);
                  String _elem318;
                  for (int _i319 = 0; _i319 < _list317.size; ++_i319)
                  {
                    _elem318 = iprot.readString();
                    struct.keys.add(_elem318);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_STAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeStamp = iprot.readI64();
                struct.setTimeStampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filter = new ODSSnapshotFilter();
                struct.filter.read(iprot);
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FIND_MISSING_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.findMissingValue = iprot.readBool();
                struct.setFindMissingValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PERIOD_OVERRIDE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.periodOverride = iprot.readI32();
                struct.setPeriodOverrideIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ENTITY_IS_REGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.entityIsRegex = iprot.readBool();
                struct.setEntityIsRegexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // KEY_IS_REGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.keyIsRegex = iprot.readBool();
                struct.setKeyIsRegexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnapshotCompressed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter320 : struct.entities)
            {
              oprot.writeString(_iter320);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter321 : struct.keys)
            {
              oprot.writeString(_iter321);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI64(struct.timeStamp);
        oprot.writeFieldEnd();
        if (struct.filter != null) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          struct.filter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FIND_MISSING_VALUE_FIELD_DESC);
        oprot.writeBool(struct.findMissingValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PERIOD_OVERRIDE_FIELD_DESC);
        oprot.writeI32(struct.periodOverride);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENTITY_IS_REGEX_FIELD_DESC);
        oprot.writeBool(struct.entityIsRegex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEY_IS_REGEX_FIELD_DESC);
        oprot.writeBool(struct.keyIsRegex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnapshotCompressed_argsTupleSchemeFactory implements SchemeFactory {
      public getSnapshotCompressed_argsTupleScheme getScheme() {
        return new getSnapshotCompressed_argsTupleScheme();
      }
    }

    private static class getSnapshotCompressed_argsTupleScheme extends TupleScheme<getSnapshotCompressed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnapshotCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetTimeStamp()) {
          optionals.set(2);
        }
        if (struct.isSetFilter()) {
          optionals.set(3);
        }
        if (struct.isSetFindMissingValue()) {
          optionals.set(4);
        }
        if (struct.isSetPeriodOverride()) {
          optionals.set(5);
        }
        if (struct.isSetEntityIsRegex()) {
          optionals.set(6);
        }
        if (struct.isSetKeyIsRegex()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter322 : struct.entities)
            {
              oprot.writeString(_iter322);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter323 : struct.keys)
            {
              oprot.writeString(_iter323);
            }
          }
        }
        if (struct.isSetTimeStamp()) {
          oprot.writeI64(struct.timeStamp);
        }
        if (struct.isSetFilter()) {
          struct.filter.write(oprot);
        }
        if (struct.isSetFindMissingValue()) {
          oprot.writeBool(struct.findMissingValue);
        }
        if (struct.isSetPeriodOverride()) {
          oprot.writeI32(struct.periodOverride);
        }
        if (struct.isSetEntityIsRegex()) {
          oprot.writeBool(struct.entityIsRegex);
        }
        if (struct.isSetKeyIsRegex()) {
          oprot.writeBool(struct.keyIsRegex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnapshotCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list324 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list324.size);
            String _elem325;
            for (int _i326 = 0; _i326 < _list324.size; ++_i326)
            {
              _elem325 = iprot.readString();
              struct.entities.add(_elem325);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list327 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list327.size);
            String _elem328;
            for (int _i329 = 0; _i329 < _list327.size; ++_i329)
            {
              _elem328 = iprot.readString();
              struct.keys.add(_elem328);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeStamp = iprot.readI64();
          struct.setTimeStampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.filter = new ODSSnapshotFilter();
          struct.filter.read(iprot);
          struct.setFilterIsSet(true);
        }
        if (incoming.get(4)) {
          struct.findMissingValue = iprot.readBool();
          struct.setFindMissingValueIsSet(true);
        }
        if (incoming.get(5)) {
          struct.periodOverride = iprot.readI32();
          struct.setPeriodOverrideIsSet(true);
        }
        if (incoming.get(6)) {
          struct.entityIsRegex = iprot.readBool();
          struct.setEntityIsRegexIsSet(true);
        }
        if (incoming.get(7)) {
          struct.keyIsRegex = iprot.readBool();
          struct.setKeyIsRegexIsSet(true);
        }
      }
    }

  }

  public static class getSnapshotCompressed_result implements org.apache.thrift.TBase<getSnapshotCompressed_result, getSnapshotCompressed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSnapshotCompressed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnapshotCompressed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSnapshotCompressed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSnapshotCompressed_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnapshotCompressed_result.class, metaDataMap);
    }

    public getSnapshotCompressed_result() {
    }

    public getSnapshotCompressed_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnapshotCompressed_result(getSnapshotCompressed_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public getSnapshotCompressed_result deepCopy() {
      return new getSnapshotCompressed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getSnapshotCompressed_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnapshotCompressed_result)
        return this.equals((getSnapshotCompressed_result)that);
      return false;
    }

    public boolean equals(getSnapshotCompressed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSnapshotCompressed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSnapshotCompressed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnapshotCompressed_resultStandardSchemeFactory implements SchemeFactory {
      public getSnapshotCompressed_resultStandardScheme getScheme() {
        return new getSnapshotCompressed_resultStandardScheme();
      }
    }

    private static class getSnapshotCompressed_resultStandardScheme extends StandardScheme<getSnapshotCompressed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnapshotCompressed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map330 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map330.size);
                  String _key331;
                  String _val332;
                  for (int _i333 = 0; _i333 < _map330.size; ++_i333)
                  {
                    _key331 = iprot.readString();
                    _val332 = iprot.readString();
                    struct.success.put(_key331, _val332);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnapshotCompressed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter334 : struct.success.entrySet())
            {
              oprot.writeString(_iter334.getKey());
              oprot.writeString(_iter334.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnapshotCompressed_resultTupleSchemeFactory implements SchemeFactory {
      public getSnapshotCompressed_resultTupleScheme getScheme() {
        return new getSnapshotCompressed_resultTupleScheme();
      }
    }

    private static class getSnapshotCompressed_resultTupleScheme extends TupleScheme<getSnapshotCompressed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnapshotCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter335 : struct.success.entrySet())
            {
              oprot.writeString(_iter335.getKey());
              oprot.writeString(_iter335.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnapshotCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map336 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map336.size);
            String _key337;
            String _val338;
            for (int _i339 = 0; _i339 < _map336.size; ++_i339)
            {
              _key337 = iprot.readString();
              _val338 = iprot.readString();
              struct.success.put(_key337, _val338);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntityValues_args implements org.apache.thrift.TBase<getEntityValues_args, getEntityValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityValues_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityValues_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int window; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      WINDOW((short)6, "window"),
      AGGREGATION_TYPE((short)7, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // WINDOW
            return WINDOW;
          case 7: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __WINDOW_ISSET_ID = 2;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityValues_args.class, metaDataMap);
    }

    public getEntityValues_args() {
    }

    public getEntityValues_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int window,
      int aggregationType)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.window = window;
      setWindowIsSet(true);
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityValues_args(getEntityValues_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.window = other.window;
      this.aggregationType = other.aggregationType;
    }

    public getEntityValues_args deepCopy() {
      return new getEntityValues_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setWindowIsSet(false);
      this.window = 0;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getEntityValues_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getEntityValues_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getEntityValues_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getEntityValues_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getEntityValues_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getWindow() {
      return this.window;
    }

    public getEntityValues_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getEntityValues_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case WINDOW:
        return Integer.valueOf(getWindow());

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case WINDOW:
        return isSetWindow();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityValues_args)
        return this.equals((getEntityValues_args)that);
      return false;
    }

    public boolean equals(getEntityValues_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityValues_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityValues_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityValues_argsStandardScheme getScheme() {
        return new getEntityValues_argsStandardScheme();
      }
    }

    private static class getEntityValues_argsStandardScheme extends StandardScheme<getEntityValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list340.size);
                  String _elem341;
                  for (int _i342 = 0; _i342 < _list340.size; ++_i342)
                  {
                    _elem341 = iprot.readString();
                    struct.entities.add(_elem341);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list343 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list343.size);
                  String _elem344;
                  for (int _i345 = 0; _i345 < _list343.size; ++_i345)
                  {
                    _elem344 = iprot.readString();
                    struct.keys.add(_elem344);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter346 : struct.entities)
            {
              oprot.writeString(_iter346);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter347 : struct.keys)
            {
              oprot.writeString(_iter347);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityValues_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityValues_argsTupleScheme getScheme() {
        return new getEntityValues_argsTupleScheme();
      }
    }

    private static class getEntityValues_argsTupleScheme extends TupleScheme<getEntityValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter348 : struct.entities)
            {
              oprot.writeString(_iter348);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter349 : struct.keys)
            {
              oprot.writeString(_iter349);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list350 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list350.size);
            String _elem351;
            for (int _i352 = 0; _i352 < _list350.size; ++_i352)
            {
              _elem351 = iprot.readString();
              struct.entities.add(_elem351);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list353.size);
            String _elem354;
            for (int _i355 = 0; _i355 < _list353.size; ++_i355)
            {
              _elem354 = iprot.readString();
              struct.keys.add(_elem354);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getEntityValues_result implements org.apache.thrift.TBase<getEntityValues_result, getEntityValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityValues_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,List<TimeValue>>> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeValue.class))))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityValues_result.class, metaDataMap);
    }

    public getEntityValues_result() {
    }

    public getEntityValues_result(
      Map<String,Map<String,List<TimeValue>>> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityValues_result(getEntityValues_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,List<TimeValue>>> __this__success = new HashMap<String,Map<String,List<TimeValue>>>(other.success.size());
        for (Map.Entry<String, Map<String,List<TimeValue>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,List<TimeValue>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,List<TimeValue>> __this__success_copy_value = new HashMap<String,List<TimeValue>>(other_element_value.size());
          for (Map.Entry<String, List<TimeValue>> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            List<TimeValue> other_element_value_element_value = other_element_value_element.getValue();

            String __this__success_copy_value_copy_key = other_element_value_element_key;

            List<TimeValue> __this__success_copy_value_copy_value = new ArrayList<TimeValue>(other_element_value_element_value.size());
            for (TimeValue other_element_value_element_value_element : other_element_value_element_value) {
              __this__success_copy_value_copy_value.add(new TimeValue(other_element_value_element_value_element));
            }

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getEntityValues_result deepCopy() {
      return new getEntityValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,List<TimeValue>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,List<TimeValue>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,List<TimeValue>>> getSuccess() {
      return this.success;
    }

    public getEntityValues_result setSuccess(Map<String,Map<String,List<TimeValue>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getEntityValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,List<TimeValue>>>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityValues_result)
        return this.equals((getEntityValues_result)that);
      return false;
    }

    public boolean equals(getEntityValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityValues_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityValues_resultStandardScheme getScheme() {
        return new getEntityValues_resultStandardScheme();
      }
    }

    private static class getEntityValues_resultStandardScheme extends StandardScheme<getEntityValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map356 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,List<TimeValue>>>(2*_map356.size);
                  String _key357;
                  Map<String,List<TimeValue>> _val358;
                  for (int _i359 = 0; _i359 < _map356.size; ++_i359)
                  {
                    _key357 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map360 = iprot.readMapBegin();
                      _val358 = new HashMap<String,List<TimeValue>>(2*_map360.size);
                      String _key361;
                      List<TimeValue> _val362;
                      for (int _i363 = 0; _i363 < _map360.size; ++_i363)
                      {
                        _key361 = iprot.readString();
                        {
                          org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                          _val362 = new ArrayList<TimeValue>(_list364.size);
                          TimeValue _elem365;
                          for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                          {
                            _elem365 = new TimeValue();
                            _elem365.read(iprot);
                            _val362.add(_elem365);
                          }
                          iprot.readListEnd();
                        }
                        _val358.put(_key361, _val362);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key357, _val358);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,List<TimeValue>>> _iter367 : struct.success.entrySet())
            {
              oprot.writeString(_iter367.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter367.getValue().size()));
                for (Map.Entry<String, List<TimeValue>> _iter368 : _iter367.getValue().entrySet())
                {
                  oprot.writeString(_iter368.getKey());
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter368.getValue().size()));
                    for (TimeValue _iter369 : _iter368.getValue())
                    {
                      _iter369.write(oprot);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityValues_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityValues_resultTupleScheme getScheme() {
        return new getEntityValues_resultTupleScheme();
      }
    }

    private static class getEntityValues_resultTupleScheme extends TupleScheme<getEntityValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,List<TimeValue>>> _iter370 : struct.success.entrySet())
            {
              oprot.writeString(_iter370.getKey());
              {
                oprot.writeI32(_iter370.getValue().size());
                for (Map.Entry<String, List<TimeValue>> _iter371 : _iter370.getValue().entrySet())
                {
                  oprot.writeString(_iter371.getKey());
                  {
                    oprot.writeI32(_iter371.getValue().size());
                    for (TimeValue _iter372 : _iter371.getValue())
                    {
                      _iter372.write(oprot);
                    }
                  }
                }
              }
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map373 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,List<TimeValue>>>(2*_map373.size);
            String _key374;
            Map<String,List<TimeValue>> _val375;
            for (int _i376 = 0; _i376 < _map373.size; ++_i376)
            {
              _key374 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map377 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _val375 = new HashMap<String,List<TimeValue>>(2*_map377.size);
                String _key378;
                List<TimeValue> _val379;
                for (int _i380 = 0; _i380 < _map377.size; ++_i380)
                {
                  _key378 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list381 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    _val379 = new ArrayList<TimeValue>(_list381.size);
                    TimeValue _elem382;
                    for (int _i383 = 0; _i383 < _list381.size; ++_i383)
                    {
                      _elem382 = new TimeValue();
                      _elem382.read(iprot);
                      _val379.add(_elem382);
                    }
                  }
                  _val375.put(_key378, _val379);
                }
              }
              struct.success.put(_key374, _val375);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getTimeSeries_args implements org.apache.thrift.TBase<getTimeSeries_args, getTimeSeries_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimeSeries_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimeSeries_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimeSeries_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimeSeries_argsTupleSchemeFactory());
    }

    public GetTimeSeriesParams query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTimeSeriesParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimeSeries_args.class, metaDataMap);
    }

    public getTimeSeries_args() {
    }

    public getTimeSeries_args(
      GetTimeSeriesParams query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimeSeries_args(getTimeSeries_args other) {
      if (other.isSetQuery()) {
        this.query = new GetTimeSeriesParams(other.query);
      }
    }

    public getTimeSeries_args deepCopy() {
      return new getTimeSeries_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public GetTimeSeriesParams getQuery() {
      return this.query;
    }

    public getTimeSeries_args setQuery(GetTimeSeriesParams query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((GetTimeSeriesParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimeSeries_args)
        return this.equals((getTimeSeries_args)that);
      return false;
    }

    public boolean equals(getTimeSeries_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimeSeries_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimeSeries_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimeSeries_argsStandardSchemeFactory implements SchemeFactory {
      public getTimeSeries_argsStandardScheme getScheme() {
        return new getTimeSeries_argsStandardScheme();
      }
    }

    private static class getTimeSeries_argsStandardScheme extends StandardScheme<getTimeSeries_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimeSeries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new GetTimeSeriesParams();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimeSeries_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimeSeries_argsTupleSchemeFactory implements SchemeFactory {
      public getTimeSeries_argsTupleScheme getScheme() {
        return new getTimeSeries_argsTupleScheme();
      }
    }

    private static class getTimeSeries_argsTupleScheme extends TupleScheme<getTimeSeries_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimeSeries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimeSeries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new GetTimeSeriesParams();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class getTimeSeries_result implements org.apache.thrift.TBase<getTimeSeries_result, getTimeSeries_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimeSeries_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimeSeries_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimeSeries_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimeSeries_resultTupleSchemeFactory());
    }

    public GetTimeSeriesResults success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTimeSeriesResults.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimeSeries_result.class, metaDataMap);
    }

    public getTimeSeries_result() {
    }

    public getTimeSeries_result(
      GetTimeSeriesResults success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimeSeries_result(getTimeSeries_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetTimeSeriesResults(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getTimeSeries_result deepCopy() {
      return new getTimeSeries_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public GetTimeSeriesResults getSuccess() {
      return this.success;
    }

    public getTimeSeries_result setSuccess(GetTimeSeriesResults success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getTimeSeries_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetTimeSeriesResults)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimeSeries_result)
        return this.equals((getTimeSeries_result)that);
      return false;
    }

    public boolean equals(getTimeSeries_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimeSeries_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimeSeries_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimeSeries_resultStandardSchemeFactory implements SchemeFactory {
      public getTimeSeries_resultStandardScheme getScheme() {
        return new getTimeSeries_resultStandardScheme();
      }
    }

    private static class getTimeSeries_resultStandardScheme extends StandardScheme<getTimeSeries_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimeSeries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetTimeSeriesResults();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimeSeries_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimeSeries_resultTupleSchemeFactory implements SchemeFactory {
      public getTimeSeries_resultTupleScheme getScheme() {
        return new getTimeSeries_resultTupleScheme();
      }
    }

    private static class getTimeSeries_resultTupleScheme extends TupleScheme<getTimeSeries_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimeSeries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimeSeries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GetTimeSeriesResults();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getEntityValuesCompressed_args implements org.apache.thrift.TBase<getEntityValuesCompressed_args, getEntityValuesCompressed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityValuesCompressed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityValuesCompressed_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityValuesCompressed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityValuesCompressed_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int window; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      WINDOW((short)6, "window"),
      AGGREGATION_TYPE((short)7, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // WINDOW
            return WINDOW;
          case 7: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __WINDOW_ISSET_ID = 2;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityValuesCompressed_args.class, metaDataMap);
    }

    public getEntityValuesCompressed_args() {
    }

    public getEntityValuesCompressed_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int window,
      int aggregationType)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.window = window;
      setWindowIsSet(true);
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityValuesCompressed_args(getEntityValuesCompressed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.window = other.window;
      this.aggregationType = other.aggregationType;
    }

    public getEntityValuesCompressed_args deepCopy() {
      return new getEntityValuesCompressed_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setWindowIsSet(false);
      this.window = 0;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getEntityValuesCompressed_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getEntityValuesCompressed_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getEntityValuesCompressed_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getEntityValuesCompressed_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getEntityValuesCompressed_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getWindow() {
      return this.window;
    }

    public getEntityValuesCompressed_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getEntityValuesCompressed_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case WINDOW:
        return Integer.valueOf(getWindow());

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case WINDOW:
        return isSetWindow();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityValuesCompressed_args)
        return this.equals((getEntityValuesCompressed_args)that);
      return false;
    }

    public boolean equals(getEntityValuesCompressed_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityValuesCompressed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityValuesCompressed_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityValuesCompressed_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityValuesCompressed_argsStandardScheme getScheme() {
        return new getEntityValuesCompressed_argsStandardScheme();
      }
    }

    private static class getEntityValuesCompressed_argsStandardScheme extends StandardScheme<getEntityValuesCompressed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list384 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list384.size);
                  String _elem385;
                  for (int _i386 = 0; _i386 < _list384.size; ++_i386)
                  {
                    _elem385 = iprot.readString();
                    struct.entities.add(_elem385);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list387 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list387.size);
                  String _elem388;
                  for (int _i389 = 0; _i389 < _list387.size; ++_i389)
                  {
                    _elem388 = iprot.readString();
                    struct.keys.add(_elem388);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter390 : struct.entities)
            {
              oprot.writeString(_iter390);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter391 : struct.keys)
            {
              oprot.writeString(_iter391);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityValuesCompressed_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityValuesCompressed_argsTupleScheme getScheme() {
        return new getEntityValuesCompressed_argsTupleScheme();
      }
    }

    private static class getEntityValuesCompressed_argsTupleScheme extends TupleScheme<getEntityValuesCompressed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter392 : struct.entities)
            {
              oprot.writeString(_iter392);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter393 : struct.keys)
            {
              oprot.writeString(_iter393);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list394 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list394.size);
            String _elem395;
            for (int _i396 = 0; _i396 < _list394.size; ++_i396)
            {
              _elem395 = iprot.readString();
              struct.entities.add(_elem395);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list397 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list397.size);
            String _elem398;
            for (int _i399 = 0; _i399 < _list397.size; ++_i399)
            {
              _elem398 = iprot.readString();
              struct.keys.add(_elem398);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getEntityValuesCompressed_result implements org.apache.thrift.TBase<getEntityValuesCompressed_result, getEntityValuesCompressed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityValuesCompressed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityValuesCompressed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityValuesCompressed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityValuesCompressed_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,String>> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityValuesCompressed_result.class, metaDataMap);
    }

    public getEntityValuesCompressed_result() {
    }

    public getEntityValuesCompressed_result(
      Map<String,Map<String,String>> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityValuesCompressed_result(getEntityValuesCompressed_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,String>> __this__success = new HashMap<String,Map<String,String>>(other.success.size());
        for (Map.Entry<String, Map<String,String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,String> __this__success_copy_value = new HashMap<String,String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getEntityValuesCompressed_result deepCopy() {
      return new getEntityValuesCompressed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,String>> getSuccess() {
      return this.success;
    }

    public getEntityValuesCompressed_result setSuccess(Map<String,Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getEntityValuesCompressed_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,String>>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityValuesCompressed_result)
        return this.equals((getEntityValuesCompressed_result)that);
      return false;
    }

    public boolean equals(getEntityValuesCompressed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityValuesCompressed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityValuesCompressed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityValuesCompressed_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityValuesCompressed_resultStandardScheme getScheme() {
        return new getEntityValuesCompressed_resultStandardScheme();
      }
    }

    private static class getEntityValuesCompressed_resultStandardScheme extends StandardScheme<getEntityValuesCompressed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map400 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,String>>(2*_map400.size);
                  String _key401;
                  Map<String,String> _val402;
                  for (int _i403 = 0; _i403 < _map400.size; ++_i403)
                  {
                    _key401 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map404 = iprot.readMapBegin();
                      _val402 = new HashMap<String,String>(2*_map404.size);
                      String _key405;
                      String _val406;
                      for (int _i407 = 0; _i407 < _map404.size; ++_i407)
                      {
                        _key405 = iprot.readString();
                        _val406 = iprot.readString();
                        _val402.put(_key405, _val406);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key401, _val402);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,String>> _iter408 : struct.success.entrySet())
            {
              oprot.writeString(_iter408.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter408.getValue().size()));
                for (Map.Entry<String, String> _iter409 : _iter408.getValue().entrySet())
                {
                  oprot.writeString(_iter409.getKey());
                  oprot.writeString(_iter409.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityValuesCompressed_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityValuesCompressed_resultTupleScheme getScheme() {
        return new getEntityValuesCompressed_resultTupleScheme();
      }
    }

    private static class getEntityValuesCompressed_resultTupleScheme extends TupleScheme<getEntityValuesCompressed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,String>> _iter410 : struct.success.entrySet())
            {
              oprot.writeString(_iter410.getKey());
              {
                oprot.writeI32(_iter410.getValue().size());
                for (Map.Entry<String, String> _iter411 : _iter410.getValue().entrySet())
                {
                  oprot.writeString(_iter411.getKey());
                  oprot.writeString(_iter411.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map412 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,String>>(2*_map412.size);
            String _key413;
            Map<String,String> _val414;
            for (int _i415 = 0; _i415 < _map412.size; ++_i415)
            {
              _key413 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map416 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val414 = new HashMap<String,String>(2*_map416.size);
                String _key417;
                String _val418;
                for (int _i419 = 0; _i419 < _map416.size; ++_i419)
                {
                  _key417 = iprot.readString();
                  _val418 = iprot.readString();
                  _val414.put(_key417, _val418);
                }
              }
              struct.success.put(_key413, _val414);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getRegexEntityValues_args implements org.apache.thrift.TBase<getRegexEntityValues_args, getRegexEntityValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegexEntityValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegexEntityValues_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegexEntityValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegexEntityValues_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int window; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      WINDOW((short)6, "window"),
      AGGREGATION_TYPE((short)7, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // WINDOW
            return WINDOW;
          case 7: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __WINDOW_ISSET_ID = 2;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegexEntityValues_args.class, metaDataMap);
    }

    public getRegexEntityValues_args() {
    }

    public getRegexEntityValues_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int window,
      int aggregationType)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.window = window;
      setWindowIsSet(true);
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegexEntityValues_args(getRegexEntityValues_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.window = other.window;
      this.aggregationType = other.aggregationType;
    }

    public getRegexEntityValues_args deepCopy() {
      return new getRegexEntityValues_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setWindowIsSet(false);
      this.window = 0;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getRegexEntityValues_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getRegexEntityValues_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getRegexEntityValues_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getRegexEntityValues_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getRegexEntityValues_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getWindow() {
      return this.window;
    }

    public getRegexEntityValues_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getRegexEntityValues_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case WINDOW:
        return Integer.valueOf(getWindow());

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case WINDOW:
        return isSetWindow();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegexEntityValues_args)
        return this.equals((getRegexEntityValues_args)that);
      return false;
    }

    public boolean equals(getRegexEntityValues_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegexEntityValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegexEntityValues_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegexEntityValues_argsStandardSchemeFactory implements SchemeFactory {
      public getRegexEntityValues_argsStandardScheme getScheme() {
        return new getRegexEntityValues_argsStandardScheme();
      }
    }

    private static class getRegexEntityValues_argsStandardScheme extends StandardScheme<getRegexEntityValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegexEntityValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list420 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list420.size);
                  String _elem421;
                  for (int _i422 = 0; _i422 < _list420.size; ++_i422)
                  {
                    _elem421 = iprot.readString();
                    struct.entities.add(_elem421);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list423 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list423.size);
                  String _elem424;
                  for (int _i425 = 0; _i425 < _list423.size; ++_i425)
                  {
                    _elem424 = iprot.readString();
                    struct.keys.add(_elem424);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegexEntityValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter426 : struct.entities)
            {
              oprot.writeString(_iter426);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter427 : struct.keys)
            {
              oprot.writeString(_iter427);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegexEntityValues_argsTupleSchemeFactory implements SchemeFactory {
      public getRegexEntityValues_argsTupleScheme getScheme() {
        return new getRegexEntityValues_argsTupleScheme();
      }
    }

    private static class getRegexEntityValues_argsTupleScheme extends TupleScheme<getRegexEntityValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter428 : struct.entities)
            {
              oprot.writeString(_iter428);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter429 : struct.keys)
            {
              oprot.writeString(_iter429);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list430 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list430.size);
            String _elem431;
            for (int _i432 = 0; _i432 < _list430.size; ++_i432)
            {
              _elem431 = iprot.readString();
              struct.entities.add(_elem431);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list433 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list433.size);
            String _elem434;
            for (int _i435 = 0; _i435 < _list433.size; ++_i435)
            {
              _elem434 = iprot.readString();
              struct.keys.add(_elem434);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getRegexEntityValues_result implements org.apache.thrift.TBase<getRegexEntityValues_result, getRegexEntityValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegexEntityValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegexEntityValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegexEntityValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegexEntityValues_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,List<TimeValue>>> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeValue.class))))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegexEntityValues_result.class, metaDataMap);
    }

    public getRegexEntityValues_result() {
    }

    public getRegexEntityValues_result(
      Map<String,Map<String,List<TimeValue>>> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegexEntityValues_result(getRegexEntityValues_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,List<TimeValue>>> __this__success = new HashMap<String,Map<String,List<TimeValue>>>(other.success.size());
        for (Map.Entry<String, Map<String,List<TimeValue>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,List<TimeValue>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,List<TimeValue>> __this__success_copy_value = new HashMap<String,List<TimeValue>>(other_element_value.size());
          for (Map.Entry<String, List<TimeValue>> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            List<TimeValue> other_element_value_element_value = other_element_value_element.getValue();

            String __this__success_copy_value_copy_key = other_element_value_element_key;

            List<TimeValue> __this__success_copy_value_copy_value = new ArrayList<TimeValue>(other_element_value_element_value.size());
            for (TimeValue other_element_value_element_value_element : other_element_value_element_value) {
              __this__success_copy_value_copy_value.add(new TimeValue(other_element_value_element_value_element));
            }

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getRegexEntityValues_result deepCopy() {
      return new getRegexEntityValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,List<TimeValue>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,List<TimeValue>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,List<TimeValue>>> getSuccess() {
      return this.success;
    }

    public getRegexEntityValues_result setSuccess(Map<String,Map<String,List<TimeValue>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getRegexEntityValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,List<TimeValue>>>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegexEntityValues_result)
        return this.equals((getRegexEntityValues_result)that);
      return false;
    }

    public boolean equals(getRegexEntityValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegexEntityValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegexEntityValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegexEntityValues_resultStandardSchemeFactory implements SchemeFactory {
      public getRegexEntityValues_resultStandardScheme getScheme() {
        return new getRegexEntityValues_resultStandardScheme();
      }
    }

    private static class getRegexEntityValues_resultStandardScheme extends StandardScheme<getRegexEntityValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegexEntityValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map436 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,List<TimeValue>>>(2*_map436.size);
                  String _key437;
                  Map<String,List<TimeValue>> _val438;
                  for (int _i439 = 0; _i439 < _map436.size; ++_i439)
                  {
                    _key437 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map440 = iprot.readMapBegin();
                      _val438 = new HashMap<String,List<TimeValue>>(2*_map440.size);
                      String _key441;
                      List<TimeValue> _val442;
                      for (int _i443 = 0; _i443 < _map440.size; ++_i443)
                      {
                        _key441 = iprot.readString();
                        {
                          org.apache.thrift.protocol.TList _list444 = iprot.readListBegin();
                          _val442 = new ArrayList<TimeValue>(_list444.size);
                          TimeValue _elem445;
                          for (int _i446 = 0; _i446 < _list444.size; ++_i446)
                          {
                            _elem445 = new TimeValue();
                            _elem445.read(iprot);
                            _val442.add(_elem445);
                          }
                          iprot.readListEnd();
                        }
                        _val438.put(_key441, _val442);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key437, _val438);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegexEntityValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,List<TimeValue>>> _iter447 : struct.success.entrySet())
            {
              oprot.writeString(_iter447.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter447.getValue().size()));
                for (Map.Entry<String, List<TimeValue>> _iter448 : _iter447.getValue().entrySet())
                {
                  oprot.writeString(_iter448.getKey());
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter448.getValue().size()));
                    for (TimeValue _iter449 : _iter448.getValue())
                    {
                      _iter449.write(oprot);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegexEntityValues_resultTupleSchemeFactory implements SchemeFactory {
      public getRegexEntityValues_resultTupleScheme getScheme() {
        return new getRegexEntityValues_resultTupleScheme();
      }
    }

    private static class getRegexEntityValues_resultTupleScheme extends TupleScheme<getRegexEntityValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,List<TimeValue>>> _iter450 : struct.success.entrySet())
            {
              oprot.writeString(_iter450.getKey());
              {
                oprot.writeI32(_iter450.getValue().size());
                for (Map.Entry<String, List<TimeValue>> _iter451 : _iter450.getValue().entrySet())
                {
                  oprot.writeString(_iter451.getKey());
                  {
                    oprot.writeI32(_iter451.getValue().size());
                    for (TimeValue _iter452 : _iter451.getValue())
                    {
                      _iter452.write(oprot);
                    }
                  }
                }
              }
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map453 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,List<TimeValue>>>(2*_map453.size);
            String _key454;
            Map<String,List<TimeValue>> _val455;
            for (int _i456 = 0; _i456 < _map453.size; ++_i456)
            {
              _key454 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map457 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _val455 = new HashMap<String,List<TimeValue>>(2*_map457.size);
                String _key458;
                List<TimeValue> _val459;
                for (int _i460 = 0; _i460 < _map457.size; ++_i460)
                {
                  _key458 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list461 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    _val459 = new ArrayList<TimeValue>(_list461.size);
                    TimeValue _elem462;
                    for (int _i463 = 0; _i463 < _list461.size; ++_i463)
                    {
                      _elem462 = new TimeValue();
                      _elem462.read(iprot);
                      _val459.add(_elem462);
                    }
                  }
                  _val455.put(_key458, _val459);
                }
              }
              struct.success.put(_key454, _val455);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getRegexEntityValuesCompressed_args implements org.apache.thrift.TBase<getRegexEntityValuesCompressed_args, getRegexEntityValuesCompressed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegexEntityValuesCompressed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegexEntityValuesCompressed_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegexEntityValuesCompressed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegexEntityValuesCompressed_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int window; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      WINDOW((short)6, "window"),
      AGGREGATION_TYPE((short)7, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // WINDOW
            return WINDOW;
          case 7: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __WINDOW_ISSET_ID = 2;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegexEntityValuesCompressed_args.class, metaDataMap);
    }

    public getRegexEntityValuesCompressed_args() {
    }

    public getRegexEntityValuesCompressed_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int window,
      int aggregationType)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.window = window;
      setWindowIsSet(true);
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegexEntityValuesCompressed_args(getRegexEntityValuesCompressed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.window = other.window;
      this.aggregationType = other.aggregationType;
    }

    public getRegexEntityValuesCompressed_args deepCopy() {
      return new getRegexEntityValuesCompressed_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setWindowIsSet(false);
      this.window = 0;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getRegexEntityValuesCompressed_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getRegexEntityValuesCompressed_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getRegexEntityValuesCompressed_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getRegexEntityValuesCompressed_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getRegexEntityValuesCompressed_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getWindow() {
      return this.window;
    }

    public getRegexEntityValuesCompressed_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getRegexEntityValuesCompressed_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case WINDOW:
        return Integer.valueOf(getWindow());

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case WINDOW:
        return isSetWindow();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegexEntityValuesCompressed_args)
        return this.equals((getRegexEntityValuesCompressed_args)that);
      return false;
    }

    public boolean equals(getRegexEntityValuesCompressed_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegexEntityValuesCompressed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegexEntityValuesCompressed_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegexEntityValuesCompressed_argsStandardSchemeFactory implements SchemeFactory {
      public getRegexEntityValuesCompressed_argsStandardScheme getScheme() {
        return new getRegexEntityValuesCompressed_argsStandardScheme();
      }
    }

    private static class getRegexEntityValuesCompressed_argsStandardScheme extends StandardScheme<getRegexEntityValuesCompressed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegexEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list464 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list464.size);
                  String _elem465;
                  for (int _i466 = 0; _i466 < _list464.size; ++_i466)
                  {
                    _elem465 = iprot.readString();
                    struct.entities.add(_elem465);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list467 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list467.size);
                  String _elem468;
                  for (int _i469 = 0; _i469 < _list467.size; ++_i469)
                  {
                    _elem468 = iprot.readString();
                    struct.keys.add(_elem468);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegexEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter470 : struct.entities)
            {
              oprot.writeString(_iter470);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter471 : struct.keys)
            {
              oprot.writeString(_iter471);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegexEntityValuesCompressed_argsTupleSchemeFactory implements SchemeFactory {
      public getRegexEntityValuesCompressed_argsTupleScheme getScheme() {
        return new getRegexEntityValuesCompressed_argsTupleScheme();
      }
    }

    private static class getRegexEntityValuesCompressed_argsTupleScheme extends TupleScheme<getRegexEntityValuesCompressed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter472 : struct.entities)
            {
              oprot.writeString(_iter472);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter473 : struct.keys)
            {
              oprot.writeString(_iter473);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValuesCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list474 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list474.size);
            String _elem475;
            for (int _i476 = 0; _i476 < _list474.size; ++_i476)
            {
              _elem475 = iprot.readString();
              struct.entities.add(_elem475);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list477 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list477.size);
            String _elem478;
            for (int _i479 = 0; _i479 < _list477.size; ++_i479)
            {
              _elem478 = iprot.readString();
              struct.keys.add(_elem478);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getRegexEntityValuesCompressed_result implements org.apache.thrift.TBase<getRegexEntityValuesCompressed_result, getRegexEntityValuesCompressed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegexEntityValuesCompressed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegexEntityValuesCompressed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegexEntityValuesCompressed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegexEntityValuesCompressed_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,String>> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegexEntityValuesCompressed_result.class, metaDataMap);
    }

    public getRegexEntityValuesCompressed_result() {
    }

    public getRegexEntityValuesCompressed_result(
      Map<String,Map<String,String>> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegexEntityValuesCompressed_result(getRegexEntityValuesCompressed_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,String>> __this__success = new HashMap<String,Map<String,String>>(other.success.size());
        for (Map.Entry<String, Map<String,String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,String> __this__success_copy_value = new HashMap<String,String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getRegexEntityValuesCompressed_result deepCopy() {
      return new getRegexEntityValuesCompressed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,String>> getSuccess() {
      return this.success;
    }

    public getRegexEntityValuesCompressed_result setSuccess(Map<String,Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getRegexEntityValuesCompressed_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,String>>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegexEntityValuesCompressed_result)
        return this.equals((getRegexEntityValuesCompressed_result)that);
      return false;
    }

    public boolean equals(getRegexEntityValuesCompressed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegexEntityValuesCompressed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegexEntityValuesCompressed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegexEntityValuesCompressed_resultStandardSchemeFactory implements SchemeFactory {
      public getRegexEntityValuesCompressed_resultStandardScheme getScheme() {
        return new getRegexEntityValuesCompressed_resultStandardScheme();
      }
    }

    private static class getRegexEntityValuesCompressed_resultStandardScheme extends StandardScheme<getRegexEntityValuesCompressed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegexEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map480 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,String>>(2*_map480.size);
                  String _key481;
                  Map<String,String> _val482;
                  for (int _i483 = 0; _i483 < _map480.size; ++_i483)
                  {
                    _key481 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map484 = iprot.readMapBegin();
                      _val482 = new HashMap<String,String>(2*_map484.size);
                      String _key485;
                      String _val486;
                      for (int _i487 = 0; _i487 < _map484.size; ++_i487)
                      {
                        _key485 = iprot.readString();
                        _val486 = iprot.readString();
                        _val482.put(_key485, _val486);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key481, _val482);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegexEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,String>> _iter488 : struct.success.entrySet())
            {
              oprot.writeString(_iter488.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter488.getValue().size()));
                for (Map.Entry<String, String> _iter489 : _iter488.getValue().entrySet())
                {
                  oprot.writeString(_iter489.getKey());
                  oprot.writeString(_iter489.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegexEntityValuesCompressed_resultTupleSchemeFactory implements SchemeFactory {
      public getRegexEntityValuesCompressed_resultTupleScheme getScheme() {
        return new getRegexEntityValuesCompressed_resultTupleScheme();
      }
    }

    private static class getRegexEntityValuesCompressed_resultTupleScheme extends TupleScheme<getRegexEntityValuesCompressed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,String>> _iter490 : struct.success.entrySet())
            {
              oprot.writeString(_iter490.getKey());
              {
                oprot.writeI32(_iter490.getValue().size());
                for (Map.Entry<String, String> _iter491 : _iter490.getValue().entrySet())
                {
                  oprot.writeString(_iter491.getKey());
                  oprot.writeString(_iter491.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegexEntityValuesCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map492 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,String>>(2*_map492.size);
            String _key493;
            Map<String,String> _val494;
            for (int _i495 = 0; _i495 < _map492.size; ++_i495)
            {
              _key493 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map496 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val494 = new HashMap<String,String>(2*_map496.size);
                String _key497;
                String _val498;
                for (int _i499 = 0; _i499 < _map496.size; ++_i499)
                {
                  _key497 = iprot.readString();
                  _val498 = iprot.readString();
                  _val494.put(_key497, _val498);
                }
              }
              struct.success.put(_key493, _val494);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getEntityAggValues_args implements org.apache.thrift.TBase<getEntityAggValues_args, getEntityAggValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityAggValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityAggValues_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField BYPASS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("bypassLimit", org.apache.thrift.protocol.TType.BOOL, (short)8);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityAggValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityAggValues_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int type; // required
    public int window; // required
    public boolean bypassLimit; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      TYPE((short)6, "type"),
      WINDOW((short)7, "window"),
      BYPASS_LIMIT((short)8, "bypassLimit"),
      AGGREGATION_TYPE((short)9, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // TYPE
            return TYPE;
          case 7: // WINDOW
            return WINDOW;
          case 8: // BYPASS_LIMIT
            return BYPASS_LIMIT;
          case 9: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __WINDOW_ISSET_ID = 3;
    private static final int __BYPASSLIMIT_ISSET_ID = 4;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "OdsAdHocAggType")));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BYPASS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("bypassLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityAggValues_args.class, metaDataMap);
    }

    public getEntityAggValues_args() {
    }

    public getEntityAggValues_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int type,
      int window,
      boolean bypassLimit,
      int aggregationType)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.type = type;
      setTypeIsSet(true);
      this.window = window;
      setWindowIsSet(true);
      this.bypassLimit = bypassLimit;
      setBypassLimitIsSet(true);
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityAggValues_args(getEntityAggValues_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.type = other.type;
      this.window = other.window;
      this.bypassLimit = other.bypassLimit;
      this.aggregationType = other.aggregationType;
    }

    public getEntityAggValues_args deepCopy() {
      return new getEntityAggValues_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setTypeIsSet(false);
      this.type = 0;
      setWindowIsSet(false);
      this.window = 0;
      setBypassLimitIsSet(false);
      this.bypassLimit = false;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getEntityAggValues_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getEntityAggValues_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getEntityAggValues_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getEntityAggValues_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getEntityAggValues_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public getEntityAggValues_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getWindow() {
      return this.window;
    }

    public getEntityAggValues_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public boolean isBypassLimit() {
      return this.bypassLimit;
    }

    public getEntityAggValues_args setBypassLimit(boolean bypassLimit) {
      this.bypassLimit = bypassLimit;
      setBypassLimitIsSet(true);
      return this;
    }

    public void unsetBypassLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYPASSLIMIT_ISSET_ID);
    }

    /** Returns true if field bypassLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetBypassLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __BYPASSLIMIT_ISSET_ID);
    }

    public void setBypassLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYPASSLIMIT_ISSET_ID, value);
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getEntityAggValues_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case BYPASS_LIMIT:
        if (value == null) {
          unsetBypassLimit();
        } else {
          setBypassLimit((Boolean)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case TYPE:
        return Integer.valueOf(getType());

      case WINDOW:
        return Integer.valueOf(getWindow());

      case BYPASS_LIMIT:
        return Boolean.valueOf(isBypassLimit());

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case TYPE:
        return isSetType();
      case WINDOW:
        return isSetWindow();
      case BYPASS_LIMIT:
        return isSetBypassLimit();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityAggValues_args)
        return this.equals((getEntityAggValues_args)that);
      return false;
    }

    public boolean equals(getEntityAggValues_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_bypassLimit = true;
      boolean that_present_bypassLimit = true;
      if (this_present_bypassLimit || that_present_bypassLimit) {
        if (!(this_present_bypassLimit && that_present_bypassLimit))
          return false;
        if (this.bypassLimit != that.bypassLimit)
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_bypassLimit = true;
      list.add(present_bypassLimit);
      if (present_bypassLimit)
        list.add(bypassLimit);

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityAggValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBypassLimit()).compareTo(other.isSetBypassLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBypassLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bypassLimit, other.bypassLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityAggValues_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bypassLimit:");
      sb.append(this.bypassLimit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityAggValues_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityAggValues_argsStandardScheme getScheme() {
        return new getEntityAggValues_argsStandardScheme();
      }
    }

    private static class getEntityAggValues_argsStandardScheme extends StandardScheme<getEntityAggValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityAggValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list500.size);
                  String _elem501;
                  for (int _i502 = 0; _i502 < _list500.size; ++_i502)
                  {
                    _elem501 = iprot.readString();
                    struct.entities.add(_elem501);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list503 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list503.size);
                  String _elem504;
                  for (int _i505 = 0; _i505 < _list503.size; ++_i505)
                  {
                    _elem504 = iprot.readString();
                    struct.keys.add(_elem504);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // BYPASS_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.bypassLimit = iprot.readBool();
                struct.setBypassLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityAggValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter506 : struct.entities)
            {
              oprot.writeString(_iter506);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter507 : struct.keys)
            {
              oprot.writeString(_iter507);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BYPASS_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.bypassLimit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityAggValues_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityAggValues_argsTupleScheme getScheme() {
        return new getEntityAggValues_argsTupleScheme();
      }
    }

    private static class getEntityAggValues_argsTupleScheme extends TupleScheme<getEntityAggValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityAggValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetType()) {
          optionals.set(5);
        }
        if (struct.isSetWindow()) {
          optionals.set(6);
        }
        if (struct.isSetBypassLimit()) {
          optionals.set(7);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter508 : struct.entities)
            {
              oprot.writeString(_iter508);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter509 : struct.keys)
            {
              oprot.writeString(_iter509);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetBypassLimit()) {
          oprot.writeBool(struct.bypassLimit);
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityAggValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list510 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list510.size);
            String _elem511;
            for (int _i512 = 0; _i512 < _list510.size; ++_i512)
            {
              _elem511 = iprot.readString();
              struct.entities.add(_elem511);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list513.size);
            String _elem514;
            for (int _i515 = 0; _i515 < _list513.size; ++_i515)
            {
              _elem514 = iprot.readString();
              struct.keys.add(_elem514);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(7)) {
          struct.bypassLimit = iprot.readBool();
          struct.setBypassLimitIsSet(true);
        }
        if (incoming.get(8)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getEntityAggValues_result implements org.apache.thrift.TBase<getEntityAggValues_result, getEntityAggValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityAggValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityAggValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityAggValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityAggValues_resultTupleSchemeFactory());
    }

    public AggEntityValue success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AggEntityValue.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityAggValues_result.class, metaDataMap);
    }

    public getEntityAggValues_result() {
    }

    public getEntityAggValues_result(
      AggEntityValue success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityAggValues_result(getEntityAggValues_result other) {
      if (other.isSetSuccess()) {
        this.success = new AggEntityValue(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getEntityAggValues_result deepCopy() {
      return new getEntityAggValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public AggEntityValue getSuccess() {
      return this.success;
    }

    public getEntityAggValues_result setSuccess(AggEntityValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getEntityAggValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AggEntityValue)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityAggValues_result)
        return this.equals((getEntityAggValues_result)that);
      return false;
    }

    public boolean equals(getEntityAggValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityAggValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityAggValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityAggValues_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityAggValues_resultStandardScheme getScheme() {
        return new getEntityAggValues_resultStandardScheme();
      }
    }

    private static class getEntityAggValues_resultStandardScheme extends StandardScheme<getEntityAggValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityAggValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AggEntityValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityAggValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityAggValues_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityAggValues_resultTupleScheme getScheme() {
        return new getEntityAggValues_resultTupleScheme();
      }
    }

    private static class getEntityAggValues_resultTupleScheme extends TupleScheme<getEntityAggValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityAggValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityAggValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AggEntityValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getRegexEntityAggValues_args implements org.apache.thrift.TBase<getRegexEntityAggValues_args, getRegexEntityAggValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegexEntityAggValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegexEntityAggValues_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField BYPASS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("bypassLimit", org.apache.thrift.protocol.TType.BOOL, (short)8);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegexEntityAggValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegexEntityAggValues_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int type; // required
    public int window; // required
    public boolean bypassLimit; // required
    public int aggregationType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      TYPE((short)6, "type"),
      WINDOW((short)7, "window"),
      BYPASS_LIMIT((short)8, "bypassLimit"),
      AGGREGATION_TYPE((short)9, "aggregationType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // TYPE
            return TYPE;
          case 7: // WINDOW
            return WINDOW;
          case 8: // BYPASS_LIMIT
            return BYPASS_LIMIT;
          case 9: // AGGREGATION_TYPE
            return AGGREGATION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __WINDOW_ISSET_ID = 3;
    private static final int __BYPASSLIMIT_ISSET_ID = 4;
    private static final int __AGGREGATIONTYPE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "OdsAdHocAggType")));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BYPASS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("bypassLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegexEntityAggValues_args.class, metaDataMap);
    }

    public getRegexEntityAggValues_args() {
    }

    public getRegexEntityAggValues_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int type,
      int window,
      boolean bypassLimit,
      int aggregationType)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.type = type;
      setTypeIsSet(true);
      this.window = window;
      setWindowIsSet(true);
      this.bypassLimit = bypassLimit;
      setBypassLimitIsSet(true);
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegexEntityAggValues_args(getRegexEntityAggValues_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.type = other.type;
      this.window = other.window;
      this.bypassLimit = other.bypassLimit;
      this.aggregationType = other.aggregationType;
    }

    public getRegexEntityAggValues_args deepCopy() {
      return new getRegexEntityAggValues_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setTypeIsSet(false);
      this.type = 0;
      setWindowIsSet(false);
      this.window = 0;
      setBypassLimitIsSet(false);
      this.bypassLimit = false;
      setAggregationTypeIsSet(false);
      this.aggregationType = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getRegexEntityAggValues_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getRegexEntityAggValues_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getRegexEntityAggValues_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getRegexEntityAggValues_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getRegexEntityAggValues_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public getRegexEntityAggValues_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getWindow() {
      return this.window;
    }

    public getRegexEntityAggValues_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public boolean isBypassLimit() {
      return this.bypassLimit;
    }

    public getRegexEntityAggValues_args setBypassLimit(boolean bypassLimit) {
      this.bypassLimit = bypassLimit;
      setBypassLimitIsSet(true);
      return this;
    }

    public void unsetBypassLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYPASSLIMIT_ISSET_ID);
    }

    /** Returns true if field bypassLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetBypassLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __BYPASSLIMIT_ISSET_ID);
    }

    public void setBypassLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYPASSLIMIT_ISSET_ID, value);
    }

    public int getAggregationType() {
      return this.aggregationType;
    }

    public getRegexEntityAggValues_args setAggregationType(int aggregationType) {
      this.aggregationType = aggregationType;
      setAggregationTypeIsSet(true);
      return this;
    }

    public void unsetAggregationType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
    }

    public void setAggregationTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case BYPASS_LIMIT:
        if (value == null) {
          unsetBypassLimit();
        } else {
          setBypassLimit((Boolean)value);
        }
        break;

      case AGGREGATION_TYPE:
        if (value == null) {
          unsetAggregationType();
        } else {
          setAggregationType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case TYPE:
        return Integer.valueOf(getType());

      case WINDOW:
        return Integer.valueOf(getWindow());

      case BYPASS_LIMIT:
        return Boolean.valueOf(isBypassLimit());

      case AGGREGATION_TYPE:
        return Integer.valueOf(getAggregationType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case TYPE:
        return isSetType();
      case WINDOW:
        return isSetWindow();
      case BYPASS_LIMIT:
        return isSetBypassLimit();
      case AGGREGATION_TYPE:
        return isSetAggregationType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegexEntityAggValues_args)
        return this.equals((getRegexEntityAggValues_args)that);
      return false;
    }

    public boolean equals(getRegexEntityAggValues_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_bypassLimit = true;
      boolean that_present_bypassLimit = true;
      if (this_present_bypassLimit || that_present_bypassLimit) {
        if (!(this_present_bypassLimit && that_present_bypassLimit))
          return false;
        if (this.bypassLimit != that.bypassLimit)
          return false;
      }

      boolean this_present_aggregationType = true;
      boolean that_present_aggregationType = true;
      if (this_present_aggregationType || that_present_aggregationType) {
        if (!(this_present_aggregationType && that_present_aggregationType))
          return false;
        if (this.aggregationType != that.aggregationType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_bypassLimit = true;
      list.add(present_bypassLimit);
      if (present_bypassLimit)
        list.add(bypassLimit);

      boolean present_aggregationType = true;
      list.add(present_aggregationType);
      if (present_aggregationType)
        list.add(aggregationType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegexEntityAggValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBypassLimit()).compareTo(other.isSetBypassLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBypassLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bypassLimit, other.bypassLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegexEntityAggValues_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bypassLimit:");
      sb.append(this.bypassLimit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      sb.append(this.aggregationType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegexEntityAggValues_argsStandardSchemeFactory implements SchemeFactory {
      public getRegexEntityAggValues_argsStandardScheme getScheme() {
        return new getRegexEntityAggValues_argsStandardScheme();
      }
    }

    private static class getRegexEntityAggValues_argsStandardScheme extends StandardScheme<getRegexEntityAggValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegexEntityAggValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list516.size);
                  String _elem517;
                  for (int _i518 = 0; _i518 < _list516.size; ++_i518)
                  {
                    _elem517 = iprot.readString();
                    struct.entities.add(_elem517);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list519 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list519.size);
                  String _elem520;
                  for (int _i521 = 0; _i521 < _list519.size; ++_i521)
                  {
                    _elem520 = iprot.readString();
                    struct.keys.add(_elem520);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // BYPASS_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.bypassLimit = iprot.readBool();
                struct.setBypassLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // AGGREGATION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationType = iprot.readI32();
                struct.setAggregationTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegexEntityAggValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter522 : struct.entities)
            {
              oprot.writeString(_iter522);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter523 : struct.keys)
            {
              oprot.writeString(_iter523);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BYPASS_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.bypassLimit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegexEntityAggValues_argsTupleSchemeFactory implements SchemeFactory {
      public getRegexEntityAggValues_argsTupleScheme getScheme() {
        return new getRegexEntityAggValues_argsTupleScheme();
      }
    }

    private static class getRegexEntityAggValues_argsTupleScheme extends TupleScheme<getRegexEntityAggValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegexEntityAggValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetType()) {
          optionals.set(5);
        }
        if (struct.isSetWindow()) {
          optionals.set(6);
        }
        if (struct.isSetBypassLimit()) {
          optionals.set(7);
        }
        if (struct.isSetAggregationType()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter524 : struct.entities)
            {
              oprot.writeString(_iter524);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter525 : struct.keys)
            {
              oprot.writeString(_iter525);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetBypassLimit()) {
          oprot.writeBool(struct.bypassLimit);
        }
        if (struct.isSetAggregationType()) {
          oprot.writeI32(struct.aggregationType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegexEntityAggValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list526 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list526.size);
            String _elem527;
            for (int _i528 = 0; _i528 < _list526.size; ++_i528)
            {
              _elem527 = iprot.readString();
              struct.entities.add(_elem527);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list529.size);
            String _elem530;
            for (int _i531 = 0; _i531 < _list529.size; ++_i531)
            {
              _elem530 = iprot.readString();
              struct.keys.add(_elem530);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(7)) {
          struct.bypassLimit = iprot.readBool();
          struct.setBypassLimitIsSet(true);
        }
        if (incoming.get(8)) {
          struct.aggregationType = iprot.readI32();
          struct.setAggregationTypeIsSet(true);
        }
      }
    }

  }

  public static class getRegexEntityAggValues_result implements org.apache.thrift.TBase<getRegexEntityAggValues_result, getRegexEntityAggValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegexEntityAggValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegexEntityAggValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegexEntityAggValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegexEntityAggValues_resultTupleSchemeFactory());
    }

    public AggEntityValue success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AggEntityValue.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegexEntityAggValues_result.class, metaDataMap);
    }

    public getRegexEntityAggValues_result() {
    }

    public getRegexEntityAggValues_result(
      AggEntityValue success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegexEntityAggValues_result(getRegexEntityAggValues_result other) {
      if (other.isSetSuccess()) {
        this.success = new AggEntityValue(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getRegexEntityAggValues_result deepCopy() {
      return new getRegexEntityAggValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public AggEntityValue getSuccess() {
      return this.success;
    }

    public getRegexEntityAggValues_result setSuccess(AggEntityValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getRegexEntityAggValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AggEntityValue)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegexEntityAggValues_result)
        return this.equals((getRegexEntityAggValues_result)that);
      return false;
    }

    public boolean equals(getRegexEntityAggValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRegexEntityAggValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegexEntityAggValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegexEntityAggValues_resultStandardSchemeFactory implements SchemeFactory {
      public getRegexEntityAggValues_resultStandardScheme getScheme() {
        return new getRegexEntityAggValues_resultStandardScheme();
      }
    }

    private static class getRegexEntityAggValues_resultStandardScheme extends StandardScheme<getRegexEntityAggValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegexEntityAggValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AggEntityValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegexEntityAggValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegexEntityAggValues_resultTupleSchemeFactory implements SchemeFactory {
      public getRegexEntityAggValues_resultTupleScheme getScheme() {
        return new getRegexEntityAggValues_resultTupleScheme();
      }
    }

    private static class getRegexEntityAggValues_resultTupleScheme extends TupleScheme<getRegexEntityAggValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegexEntityAggValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegexEntityAggValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AggEntityValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getAggSources_args implements org.apache.thrift.TBase<getAggSources_args, getAggSources_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAggSources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAggSources_args");

    private static final org.apache.thrift.protocol.TField RGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("rgex", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAggSources_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAggSources_argsTupleSchemeFactory());
    }

    public boolean rgex; // required
    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    public int window; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RGEX((short)1, "rgex"),
      ENTITIES((short)2, "entities"),
      KEYS((short)3, "keys"),
      START((short)4, "start"),
      END_((short)5, "end_"),
      WINDOW((short)6, "window");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RGEX
            return RGEX;
          case 2: // ENTITIES
            return ENTITIES;
          case 3: // KEYS
            return KEYS;
          case 4: // START
            return START;
          case 5: // END_
            return END_;
          case 6: // WINDOW
            return WINDOW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RGEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __END__ISSET_ID = 2;
    private static final int __WINDOW_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RGEX, new org.apache.thrift.meta_data.FieldMetaData("rgex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAggSources_args.class, metaDataMap);
    }

    public getAggSources_args() {
    }

    public getAggSources_args(
      boolean rgex,
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      int window)
    {
      this();
      this.rgex = rgex;
      setRgexIsSet(true);
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.window = window;
      setWindowIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAggSources_args(getAggSources_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rgex = other.rgex;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      this.window = other.window;
    }

    public getAggSources_args deepCopy() {
      return new getAggSources_args(this);
    }

    @Override
    public void clear() {
      setRgexIsSet(false);
      this.rgex = false;
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      setWindowIsSet(false);
      this.window = 0;
    }

    public boolean isRgex() {
      return this.rgex;
    }

    public getAggSources_args setRgex(boolean rgex) {
      this.rgex = rgex;
      setRgexIsSet(true);
      return this;
    }

    public void unsetRgex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RGEX_ISSET_ID);
    }

    /** Returns true if field rgex is set (has been assigned a value) and false otherwise */
    public boolean isSetRgex() {
      return EncodingUtils.testBit(__isset_bitfield, __RGEX_ISSET_ID);
    }

    public void setRgexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RGEX_ISSET_ID, value);
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getAggSources_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getAggSources_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getAggSources_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getAggSources_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    public int getWindow() {
      return this.window;
    }

    public getAggSources_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RGEX:
        if (value == null) {
          unsetRgex();
        } else {
          setRgex((Boolean)value);
        }
        break;

      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RGEX:
        return Boolean.valueOf(isRgex());

      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case WINDOW:
        return Integer.valueOf(getWindow());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RGEX:
        return isSetRgex();
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case WINDOW:
        return isSetWindow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAggSources_args)
        return this.equals((getAggSources_args)that);
      return false;
    }

    public boolean equals(getAggSources_args that) {
      if (that == null)
        return false;

      boolean this_present_rgex = true;
      boolean that_present_rgex = true;
      if (this_present_rgex || that_present_rgex) {
        if (!(this_present_rgex && that_present_rgex))
          return false;
        if (this.rgex != that.rgex)
          return false;
      }

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rgex = true;
      list.add(present_rgex);
      if (present_rgex)
        list.add(rgex);

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAggSources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRgex()).compareTo(other.isSetRgex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRgex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rgex, other.rgex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAggSources_args(");
      boolean first = true;

      sb.append("rgex:");
      sb.append(this.rgex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAggSources_argsStandardSchemeFactory implements SchemeFactory {
      public getAggSources_argsStandardScheme getScheme() {
        return new getAggSources_argsStandardScheme();
      }
    }

    private static class getAggSources_argsStandardScheme extends StandardScheme<getAggSources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAggSources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.rgex = iprot.readBool();
                struct.setRgexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list532 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list532.size);
                  String _elem533;
                  for (int _i534 = 0; _i534 < _list532.size; ++_i534)
                  {
                    _elem533 = iprot.readString();
                    struct.entities.add(_elem533);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list535 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list535.size);
                  String _elem536;
                  for (int _i537 = 0; _i537 < _list535.size; ++_i537)
                  {
                    _elem536 = iprot.readString();
                    struct.keys.add(_elem536);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAggSources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RGEX_FIELD_DESC);
        oprot.writeBool(struct.rgex);
        oprot.writeFieldEnd();
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter538 : struct.entities)
            {
              oprot.writeString(_iter538);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter539 : struct.keys)
            {
              oprot.writeString(_iter539);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAggSources_argsTupleSchemeFactory implements SchemeFactory {
      public getAggSources_argsTupleScheme getScheme() {
        return new getAggSources_argsTupleScheme();
      }
    }

    private static class getAggSources_argsTupleScheme extends TupleScheme<getAggSources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAggSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRgex()) {
          optionals.set(0);
        }
        if (struct.isSetEntities()) {
          optionals.set(1);
        }
        if (struct.isSetKeys()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnd_()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRgex()) {
          oprot.writeBool(struct.rgex);
        }
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter540 : struct.entities)
            {
              oprot.writeString(_iter540);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter541 : struct.keys)
            {
              oprot.writeString(_iter541);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAggSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.rgex = iprot.readBool();
          struct.setRgexIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list542 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list542.size);
            String _elem543;
            for (int _i544 = 0; _i544 < _list542.size; ++_i544)
            {
              _elem543 = iprot.readString();
              struct.entities.add(_elem543);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list545 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list545.size);
            String _elem546;
            for (int _i547 = 0; _i547 < _list545.size; ++_i547)
            {
              _elem546 = iprot.readString();
              struct.keys.add(_elem546);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
      }
    }

  }

  public static class getAggSources_result implements org.apache.thrift.TBase<getAggSources_result, getAggSources_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAggSources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAggSources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAggSources_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAggSources_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAggSources_result.class, metaDataMap);
    }

    public getAggSources_result() {
    }

    public getAggSources_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAggSources_result(getAggSources_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAggSources_result deepCopy() {
      return new getAggSources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAggSources_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAggSources_result)
        return this.equals((getAggSources_result)that);
      return false;
    }

    public boolean equals(getAggSources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAggSources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAggSources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAggSources_resultStandardSchemeFactory implements SchemeFactory {
      public getAggSources_resultStandardScheme getScheme() {
        return new getAggSources_resultStandardScheme();
      }
    }

    private static class getAggSources_resultStandardScheme extends StandardScheme<getAggSources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAggSources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAggSources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAggSources_resultTupleSchemeFactory implements SchemeFactory {
      public getAggSources_resultTupleScheme getScheme() {
        return new getAggSources_resultTupleScheme();
      }
    }

    private static class getAggSources_resultTupleScheme extends TupleScheme<getAggSources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAggSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAggSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesByAggregationType_args implements org.apache.thrift.TBase<getOdsTimeSeriesByAggregationType_args, getOdsTimeSeriesByAggregationType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesByAggregationType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesByAggregationType_args");

    private static final org.apache.thrift.protocol.TField REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("regex", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField TRANSFORM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("transformConfig", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_BIT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationTypeBitMap", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField BEST_FIT_DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("bestFitDegree", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField TRANSFORM_DATA_SOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("transformDataSources", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField TOP_NOPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("topNOpts", org.apache.thrift.protocol.TType.STRUCT, (short)14);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesByAggregationType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesByAggregationType_argsTupleSchemeFactory());
    }

    public boolean regex; // required
    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int type; // required
    public int window; // required
    public String transformConfig; // required
    public int aggregationTypeBitMap; // required
    public int bestFitDegree; // required
    public String transformDataSources; // required
    public ODSTopN topNOpts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGEX((short)1, "regex"),
      ENTITIES((short)2, "entities"),
      KEYS((short)3, "keys"),
      START((short)4, "start"),
      END_((short)5, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)6, "table"),
      TYPE((short)8, "type"),
      WINDOW((short)9, "window"),
      TRANSFORM_CONFIG((short)10, "transformConfig"),
      AGGREGATION_TYPE_BIT_MAP((short)11, "aggregationTypeBitMap"),
      BEST_FIT_DEGREE((short)12, "bestFitDegree"),
      TRANSFORM_DATA_SOURCES((short)13, "transformDataSources"),
      TOP_NOPTS((short)14, "topNOpts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGEX
            return REGEX;
          case 2: // ENTITIES
            return ENTITIES;
          case 3: // KEYS
            return KEYS;
          case 4: // START
            return START;
          case 5: // END_
            return END_;
          case 6: // TABLE
            return TABLE;
          case 8: // TYPE
            return TYPE;
          case 9: // WINDOW
            return WINDOW;
          case 10: // TRANSFORM_CONFIG
            return TRANSFORM_CONFIG;
          case 11: // AGGREGATION_TYPE_BIT_MAP
            return AGGREGATION_TYPE_BIT_MAP;
          case 12: // BEST_FIT_DEGREE
            return BEST_FIT_DEGREE;
          case 13: // TRANSFORM_DATA_SOURCES
            return TRANSFORM_DATA_SOURCES;
          case 14: // TOP_NOPTS
            return TOP_NOPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __END__ISSET_ID = 2;
    private static final int __TYPE_ISSET_ID = 3;
    private static final int __WINDOW_ISSET_ID = 4;
    private static final int __AGGREGATIONTYPEBITMAP_ISSET_ID = 5;
    private static final int __BESTFITDEGREE_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGEX, new org.apache.thrift.meta_data.FieldMetaData("regex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "OdsAdHocAggType")));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TRANSFORM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("transformConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGGREGATION_TYPE_BIT_MAP, new org.apache.thrift.meta_data.FieldMetaData("aggregationTypeBitMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BEST_FIT_DEGREE, new org.apache.thrift.meta_data.FieldMetaData("bestFitDegree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TRANSFORM_DATA_SOURCES, new org.apache.thrift.meta_data.FieldMetaData("transformDataSources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOP_NOPTS, new org.apache.thrift.meta_data.FieldMetaData("topNOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSTopN.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesByAggregationType_args.class, metaDataMap);
    }

    public getOdsTimeSeriesByAggregationType_args() {
      this.transformDataSources = "";

    }

    public getOdsTimeSeriesByAggregationType_args(
      boolean regex,
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int type,
      int window,
      String transformConfig,
      int aggregationTypeBitMap,
      int bestFitDegree,
      String transformDataSources,
      ODSTopN topNOpts)
    {
      this();
      this.regex = regex;
      setRegexIsSet(true);
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.type = type;
      setTypeIsSet(true);
      this.window = window;
      setWindowIsSet(true);
      this.transformConfig = transformConfig;
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
      this.bestFitDegree = bestFitDegree;
      setBestFitDegreeIsSet(true);
      this.transformDataSources = transformDataSources;
      this.topNOpts = topNOpts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesByAggregationType_args(getOdsTimeSeriesByAggregationType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.regex = other.regex;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.type = other.type;
      this.window = other.window;
      if (other.isSetTransformConfig()) {
        this.transformConfig = other.transformConfig;
      }
      this.aggregationTypeBitMap = other.aggregationTypeBitMap;
      this.bestFitDegree = other.bestFitDegree;
      if (other.isSetTransformDataSources()) {
        this.transformDataSources = other.transformDataSources;
      }
      if (other.isSetTopNOpts()) {
        this.topNOpts = new ODSTopN(other.topNOpts);
      }
    }

    public getOdsTimeSeriesByAggregationType_args deepCopy() {
      return new getOdsTimeSeriesByAggregationType_args(this);
    }

    @Override
    public void clear() {
      setRegexIsSet(false);
      this.regex = false;
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setTypeIsSet(false);
      this.type = 0;
      setWindowIsSet(false);
      this.window = 0;
      this.transformConfig = null;
      setAggregationTypeBitMapIsSet(false);
      this.aggregationTypeBitMap = 0;
      setBestFitDegreeIsSet(false);
      this.bestFitDegree = 0;
      this.transformDataSources = "";

      this.topNOpts = null;
    }

    public boolean isRegex() {
      return this.regex;
    }

    public getOdsTimeSeriesByAggregationType_args setRegex(boolean regex) {
      this.regex = regex;
      setRegexIsSet(true);
      return this;
    }

    public void unsetRegex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGEX_ISSET_ID);
    }

    /** Returns true if field regex is set (has been assigned a value) and false otherwise */
    public boolean isSetRegex() {
      return EncodingUtils.testBit(__isset_bitfield, __REGEX_ISSET_ID);
    }

    public void setRegexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGEX_ISSET_ID, value);
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getOdsTimeSeriesByAggregationType_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getOdsTimeSeriesByAggregationType_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getOdsTimeSeriesByAggregationType_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getOdsTimeSeriesByAggregationType_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getOdsTimeSeriesByAggregationType_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public getOdsTimeSeriesByAggregationType_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getWindow() {
      return this.window;
    }

    public getOdsTimeSeriesByAggregationType_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public String getTransformConfig() {
      return this.transformConfig;
    }

    public getOdsTimeSeriesByAggregationType_args setTransformConfig(String transformConfig) {
      this.transformConfig = transformConfig;
      return this;
    }

    public void unsetTransformConfig() {
      this.transformConfig = null;
    }

    /** Returns true if field transformConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformConfig() {
      return this.transformConfig != null;
    }

    public void setTransformConfigIsSet(boolean value) {
      if (!value) {
        this.transformConfig = null;
      }
    }

    public int getAggregationTypeBitMap() {
      return this.aggregationTypeBitMap;
    }

    public getOdsTimeSeriesByAggregationType_args setAggregationTypeBitMap(int aggregationTypeBitMap) {
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
      return this;
    }

    public void unsetAggregationTypeBitMap() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    /** Returns true if field aggregationTypeBitMap is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationTypeBitMap() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    public void setAggregationTypeBitMapIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID, value);
    }

    public int getBestFitDegree() {
      return this.bestFitDegree;
    }

    public getOdsTimeSeriesByAggregationType_args setBestFitDegree(int bestFitDegree) {
      this.bestFitDegree = bestFitDegree;
      setBestFitDegreeIsSet(true);
      return this;
    }

    public void unsetBestFitDegree() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BESTFITDEGREE_ISSET_ID);
    }

    /** Returns true if field bestFitDegree is set (has been assigned a value) and false otherwise */
    public boolean isSetBestFitDegree() {
      return EncodingUtils.testBit(__isset_bitfield, __BESTFITDEGREE_ISSET_ID);
    }

    public void setBestFitDegreeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BESTFITDEGREE_ISSET_ID, value);
    }

    public String getTransformDataSources() {
      return this.transformDataSources;
    }

    public getOdsTimeSeriesByAggregationType_args setTransformDataSources(String transformDataSources) {
      this.transformDataSources = transformDataSources;
      return this;
    }

    public void unsetTransformDataSources() {
      this.transformDataSources = null;
    }

    /** Returns true if field transformDataSources is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformDataSources() {
      return this.transformDataSources != null;
    }

    public void setTransformDataSourcesIsSet(boolean value) {
      if (!value) {
        this.transformDataSources = null;
      }
    }

    public ODSTopN getTopNOpts() {
      return this.topNOpts;
    }

    public getOdsTimeSeriesByAggregationType_args setTopNOpts(ODSTopN topNOpts) {
      this.topNOpts = topNOpts;
      return this;
    }

    public void unsetTopNOpts() {
      this.topNOpts = null;
    }

    /** Returns true if field topNOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetTopNOpts() {
      return this.topNOpts != null;
    }

    public void setTopNOptsIsSet(boolean value) {
      if (!value) {
        this.topNOpts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGEX:
        if (value == null) {
          unsetRegex();
        } else {
          setRegex((Boolean)value);
        }
        break;

      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case TRANSFORM_CONFIG:
        if (value == null) {
          unsetTransformConfig();
        } else {
          setTransformConfig((String)value);
        }
        break;

      case AGGREGATION_TYPE_BIT_MAP:
        if (value == null) {
          unsetAggregationTypeBitMap();
        } else {
          setAggregationTypeBitMap((Integer)value);
        }
        break;

      case BEST_FIT_DEGREE:
        if (value == null) {
          unsetBestFitDegree();
        } else {
          setBestFitDegree((Integer)value);
        }
        break;

      case TRANSFORM_DATA_SOURCES:
        if (value == null) {
          unsetTransformDataSources();
        } else {
          setTransformDataSources((String)value);
        }
        break;

      case TOP_NOPTS:
        if (value == null) {
          unsetTopNOpts();
        } else {
          setTopNOpts((ODSTopN)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGEX:
        return Boolean.valueOf(isRegex());

      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case TYPE:
        return Integer.valueOf(getType());

      case WINDOW:
        return Integer.valueOf(getWindow());

      case TRANSFORM_CONFIG:
        return getTransformConfig();

      case AGGREGATION_TYPE_BIT_MAP:
        return Integer.valueOf(getAggregationTypeBitMap());

      case BEST_FIT_DEGREE:
        return Integer.valueOf(getBestFitDegree());

      case TRANSFORM_DATA_SOURCES:
        return getTransformDataSources();

      case TOP_NOPTS:
        return getTopNOpts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGEX:
        return isSetRegex();
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case TYPE:
        return isSetType();
      case WINDOW:
        return isSetWindow();
      case TRANSFORM_CONFIG:
        return isSetTransformConfig();
      case AGGREGATION_TYPE_BIT_MAP:
        return isSetAggregationTypeBitMap();
      case BEST_FIT_DEGREE:
        return isSetBestFitDegree();
      case TRANSFORM_DATA_SOURCES:
        return isSetTransformDataSources();
      case TOP_NOPTS:
        return isSetTopNOpts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesByAggregationType_args)
        return this.equals((getOdsTimeSeriesByAggregationType_args)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesByAggregationType_args that) {
      if (that == null)
        return false;

      boolean this_present_regex = true;
      boolean that_present_regex = true;
      if (this_present_regex || that_present_regex) {
        if (!(this_present_regex && that_present_regex))
          return false;
        if (this.regex != that.regex)
          return false;
      }

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_transformConfig = true && this.isSetTransformConfig();
      boolean that_present_transformConfig = true && that.isSetTransformConfig();
      if (this_present_transformConfig || that_present_transformConfig) {
        if (!(this_present_transformConfig && that_present_transformConfig))
          return false;
        if (!this.transformConfig.equals(that.transformConfig))
          return false;
      }

      boolean this_present_aggregationTypeBitMap = true;
      boolean that_present_aggregationTypeBitMap = true;
      if (this_present_aggregationTypeBitMap || that_present_aggregationTypeBitMap) {
        if (!(this_present_aggregationTypeBitMap && that_present_aggregationTypeBitMap))
          return false;
        if (this.aggregationTypeBitMap != that.aggregationTypeBitMap)
          return false;
      }

      boolean this_present_bestFitDegree = true;
      boolean that_present_bestFitDegree = true;
      if (this_present_bestFitDegree || that_present_bestFitDegree) {
        if (!(this_present_bestFitDegree && that_present_bestFitDegree))
          return false;
        if (this.bestFitDegree != that.bestFitDegree)
          return false;
      }

      boolean this_present_transformDataSources = true && this.isSetTransformDataSources();
      boolean that_present_transformDataSources = true && that.isSetTransformDataSources();
      if (this_present_transformDataSources || that_present_transformDataSources) {
        if (!(this_present_transformDataSources && that_present_transformDataSources))
          return false;
        if (!this.transformDataSources.equals(that.transformDataSources))
          return false;
      }

      boolean this_present_topNOpts = true && this.isSetTopNOpts();
      boolean that_present_topNOpts = true && that.isSetTopNOpts();
      if (this_present_topNOpts || that_present_topNOpts) {
        if (!(this_present_topNOpts && that_present_topNOpts))
          return false;
        if (!this.topNOpts.equals(that.topNOpts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_regex = true;
      list.add(present_regex);
      if (present_regex)
        list.add(regex);

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_transformConfig = true && (isSetTransformConfig());
      list.add(present_transformConfig);
      if (present_transformConfig)
        list.add(transformConfig);

      boolean present_aggregationTypeBitMap = true;
      list.add(present_aggregationTypeBitMap);
      if (present_aggregationTypeBitMap)
        list.add(aggregationTypeBitMap);

      boolean present_bestFitDegree = true;
      list.add(present_bestFitDegree);
      if (present_bestFitDegree)
        list.add(bestFitDegree);

      boolean present_transformDataSources = true && (isSetTransformDataSources());
      list.add(present_transformDataSources);
      if (present_transformDataSources)
        list.add(transformDataSources);

      boolean present_topNOpts = true && (isSetTopNOpts());
      list.add(present_topNOpts);
      if (present_topNOpts)
        list.add(topNOpts);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesByAggregationType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegex()).compareTo(other.isSetRegex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regex, other.regex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransformConfig()).compareTo(other.isSetTransformConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformConfig, other.transformConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationTypeBitMap()).compareTo(other.isSetAggregationTypeBitMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationTypeBitMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationTypeBitMap, other.aggregationTypeBitMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBestFitDegree()).compareTo(other.isSetBestFitDegree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBestFitDegree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestFitDegree, other.bestFitDegree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransformDataSources()).compareTo(other.isSetTransformDataSources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformDataSources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformDataSources, other.transformDataSources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopNOpts()).compareTo(other.isSetTopNOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopNOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topNOpts, other.topNOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesByAggregationType_args(");
      boolean first = true;

      sb.append("regex:");
      sb.append(this.regex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformConfig:");
      if (this.transformConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.transformConfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationTypeBitMap:");
      sb.append(this.aggregationTypeBitMap);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bestFitDegree:");
      sb.append(this.bestFitDegree);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformDataSources:");
      if (this.transformDataSources == null) {
        sb.append("null");
      } else {
        sb.append(this.transformDataSources);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topNOpts:");
      if (this.topNOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.topNOpts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topNOpts != null) {
        topNOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesByAggregationType_argsStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationType_argsStandardScheme getScheme() {
        return new getOdsTimeSeriesByAggregationType_argsStandardScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationType_argsStandardScheme extends StandardScheme<getOdsTimeSeriesByAggregationType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesByAggregationType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.regex = iprot.readBool();
                struct.setRegexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list548 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list548.size);
                  String _elem549;
                  for (int _i550 = 0; _i550 < _list548.size; ++_i550)
                  {
                    _elem549 = iprot.readString();
                    struct.entities.add(_elem549);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list551 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list551.size);
                  String _elem552;
                  for (int _i553 = 0; _i553 < _list551.size; ++_i553)
                  {
                    _elem552 = iprot.readString();
                    struct.keys.add(_elem552);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // TRANSFORM_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transformConfig = iprot.readString();
                struct.setTransformConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // AGGREGATION_TYPE_BIT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationTypeBitMap = iprot.readI32();
                struct.setAggregationTypeBitMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // BEST_FIT_DEGREE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bestFitDegree = iprot.readI32();
                struct.setBestFitDegreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // TRANSFORM_DATA_SOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transformDataSources = iprot.readString();
                struct.setTransformDataSourcesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // TOP_NOPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topNOpts = new ODSTopN();
                struct.topNOpts.read(iprot);
                struct.setTopNOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesByAggregationType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGEX_FIELD_DESC);
        oprot.writeBool(struct.regex);
        oprot.writeFieldEnd();
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter554 : struct.entities)
            {
              oprot.writeString(_iter554);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter555 : struct.keys)
            {
              oprot.writeString(_iter555);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        if (struct.transformConfig != null) {
          oprot.writeFieldBegin(TRANSFORM_CONFIG_FIELD_DESC);
          oprot.writeString(struct.transformConfig);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGGREGATION_TYPE_BIT_MAP_FIELD_DESC);
        oprot.writeI32(struct.aggregationTypeBitMap);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BEST_FIT_DEGREE_FIELD_DESC);
        oprot.writeI32(struct.bestFitDegree);
        oprot.writeFieldEnd();
        if (struct.transformDataSources != null) {
          oprot.writeFieldBegin(TRANSFORM_DATA_SOURCES_FIELD_DESC);
          oprot.writeString(struct.transformDataSources);
          oprot.writeFieldEnd();
        }
        if (struct.topNOpts != null) {
          oprot.writeFieldBegin(TOP_NOPTS_FIELD_DESC);
          struct.topNOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesByAggregationType_argsTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationType_argsTupleScheme getScheme() {
        return new getOdsTimeSeriesByAggregationType_argsTupleScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationType_argsTupleScheme extends TupleScheme<getOdsTimeSeriesByAggregationType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegex()) {
          optionals.set(0);
        }
        if (struct.isSetEntities()) {
          optionals.set(1);
        }
        if (struct.isSetKeys()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnd_()) {
          optionals.set(4);
        }
        if (struct.isSetTable()) {
          optionals.set(5);
        }
        if (struct.isSetType()) {
          optionals.set(6);
        }
        if (struct.isSetWindow()) {
          optionals.set(7);
        }
        if (struct.isSetTransformConfig()) {
          optionals.set(8);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          optionals.set(9);
        }
        if (struct.isSetBestFitDegree()) {
          optionals.set(10);
        }
        if (struct.isSetTransformDataSources()) {
          optionals.set(11);
        }
        if (struct.isSetTopNOpts()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetRegex()) {
          oprot.writeBool(struct.regex);
        }
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter556 : struct.entities)
            {
              oprot.writeString(_iter556);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter557 : struct.keys)
            {
              oprot.writeString(_iter557);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetTransformConfig()) {
          oprot.writeString(struct.transformConfig);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          oprot.writeI32(struct.aggregationTypeBitMap);
        }
        if (struct.isSetBestFitDegree()) {
          oprot.writeI32(struct.bestFitDegree);
        }
        if (struct.isSetTransformDataSources()) {
          oprot.writeString(struct.transformDataSources);
        }
        if (struct.isSetTopNOpts()) {
          struct.topNOpts.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.regex = iprot.readBool();
          struct.setRegexIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list558 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list558.size);
            String _elem559;
            for (int _i560 = 0; _i560 < _list558.size; ++_i560)
            {
              _elem559 = iprot.readString();
              struct.entities.add(_elem559);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list561 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list561.size);
            String _elem562;
            for (int _i563 = 0; _i563 < _list561.size; ++_i563)
            {
              _elem562 = iprot.readString();
              struct.keys.add(_elem562);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(5)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(8)) {
          struct.transformConfig = iprot.readString();
          struct.setTransformConfigIsSet(true);
        }
        if (incoming.get(9)) {
          struct.aggregationTypeBitMap = iprot.readI32();
          struct.setAggregationTypeBitMapIsSet(true);
        }
        if (incoming.get(10)) {
          struct.bestFitDegree = iprot.readI32();
          struct.setBestFitDegreeIsSet(true);
        }
        if (incoming.get(11)) {
          struct.transformDataSources = iprot.readString();
          struct.setTransformDataSourcesIsSet(true);
        }
        if (incoming.get(12)) {
          struct.topNOpts = new ODSTopN();
          struct.topNOpts.read(iprot);
          struct.setTopNOptsIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesByAggregationType_result implements org.apache.thrift.TBase<getOdsTimeSeriesByAggregationType_result, getOdsTimeSeriesByAggregationType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesByAggregationType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesByAggregationType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesByAggregationType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesByAggregationType_resultTupleSchemeFactory());
    }

    public Map<OdsAggregationType,TransformResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsAggregationType.class), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesByAggregationType_result.class, metaDataMap);
    }

    public getOdsTimeSeriesByAggregationType_result() {
    }

    public getOdsTimeSeriesByAggregationType_result(
      Map<OdsAggregationType,TransformResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesByAggregationType_result(getOdsTimeSeriesByAggregationType_result other) {
      if (other.isSetSuccess()) {
        Map<OdsAggregationType,TransformResult> __this__success = new HashMap<OdsAggregationType,TransformResult>(other.success.size());
        for (Map.Entry<OdsAggregationType, TransformResult> other_element : other.success.entrySet()) {

          OdsAggregationType other_element_key = other_element.getKey();
          TransformResult other_element_value = other_element.getValue();

          OdsAggregationType __this__success_copy_key = other_element_key;

          TransformResult __this__success_copy_value = new TransformResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getOdsTimeSeriesByAggregationType_result deepCopy() {
      return new getOdsTimeSeriesByAggregationType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(OdsAggregationType key, TransformResult val) {
      if (this.success == null) {
        this.success = new HashMap<OdsAggregationType,TransformResult>();
      }
      this.success.put(key, val);
    }

    public Map<OdsAggregationType,TransformResult> getSuccess() {
      return this.success;
    }

    public getOdsTimeSeriesByAggregationType_result setSuccess(Map<OdsAggregationType,TransformResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<OdsAggregationType,TransformResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesByAggregationType_result)
        return this.equals((getOdsTimeSeriesByAggregationType_result)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesByAggregationType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesByAggregationType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesByAggregationType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesByAggregationType_resultStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationType_resultStandardScheme getScheme() {
        return new getOdsTimeSeriesByAggregationType_resultStandardScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationType_resultStandardScheme extends StandardScheme<getOdsTimeSeriesByAggregationType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesByAggregationType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map564 = iprot.readMapBegin();
                  struct.success = new HashMap<OdsAggregationType,TransformResult>(2*_map564.size);
                  OdsAggregationType _key565;
                  TransformResult _val566;
                  for (int _i567 = 0; _i567 < _map564.size; ++_i567)
                  {
                    _key565 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
                    _val566 = new TransformResult();
                    _val566.read(iprot);
                    struct.success.put(_key565, _val566);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesByAggregationType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<OdsAggregationType, TransformResult> _iter568 : struct.success.entrySet())
            {
              oprot.writeI32(_iter568.getKey().getValue());
              _iter568.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesByAggregationType_resultTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationType_resultTupleScheme getScheme() {
        return new getOdsTimeSeriesByAggregationType_resultTupleScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationType_resultTupleScheme extends TupleScheme<getOdsTimeSeriesByAggregationType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<OdsAggregationType, TransformResult> _iter569 : struct.success.entrySet())
            {
              oprot.writeI32(_iter569.getKey().getValue());
              _iter569.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map570 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<OdsAggregationType,TransformResult>(2*_map570.size);
            OdsAggregationType _key571;
            TransformResult _val572;
            for (int _i573 = 0; _i573 < _map570.size; ++_i573)
            {
              _key571 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
              _val572 = new TransformResult();
              _val572.read(iprot);
              struct.success.put(_key571, _val572);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesByAggregationTypeCompressed_args implements org.apache.thrift.TBase<getOdsTimeSeriesByAggregationTypeCompressed_args, getOdsTimeSeriesByAggregationTypeCompressed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesByAggregationTypeCompressed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesByAggregationTypeCompressed_args");

    private static final org.apache.thrift.protocol.TField REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField("regex", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField TRANSFORM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("transformConfig", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_BIT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationTypeBitMap", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField BEST_FIT_DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("bestFitDegree", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField TRANSFORM_DATA_SOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("transformDataSources", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField TOP_NOPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("topNOpts", org.apache.thrift.protocol.TType.STRUCT, (short)14);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesByAggregationTypeCompressed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesByAggregationTypeCompressed_argsTupleSchemeFactory());
    }

    public boolean regex; // required
    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int type; // required
    public int window; // required
    public String transformConfig; // required
    public int aggregationTypeBitMap; // required
    public int bestFitDegree; // required
    public String transformDataSources; // required
    public ODSTopN topNOpts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGEX((short)1, "regex"),
      ENTITIES((short)2, "entities"),
      KEYS((short)3, "keys"),
      START((short)4, "start"),
      END_((short)5, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)6, "table"),
      TYPE((short)8, "type"),
      WINDOW((short)9, "window"),
      TRANSFORM_CONFIG((short)10, "transformConfig"),
      AGGREGATION_TYPE_BIT_MAP((short)11, "aggregationTypeBitMap"),
      BEST_FIT_DEGREE((short)12, "bestFitDegree"),
      TRANSFORM_DATA_SOURCES((short)13, "transformDataSources"),
      TOP_NOPTS((short)14, "topNOpts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGEX
            return REGEX;
          case 2: // ENTITIES
            return ENTITIES;
          case 3: // KEYS
            return KEYS;
          case 4: // START
            return START;
          case 5: // END_
            return END_;
          case 6: // TABLE
            return TABLE;
          case 8: // TYPE
            return TYPE;
          case 9: // WINDOW
            return WINDOW;
          case 10: // TRANSFORM_CONFIG
            return TRANSFORM_CONFIG;
          case 11: // AGGREGATION_TYPE_BIT_MAP
            return AGGREGATION_TYPE_BIT_MAP;
          case 12: // BEST_FIT_DEGREE
            return BEST_FIT_DEGREE;
          case 13: // TRANSFORM_DATA_SOURCES
            return TRANSFORM_DATA_SOURCES;
          case 14: // TOP_NOPTS
            return TOP_NOPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __END__ISSET_ID = 2;
    private static final int __TYPE_ISSET_ID = 3;
    private static final int __WINDOW_ISSET_ID = 4;
    private static final int __AGGREGATIONTYPEBITMAP_ISSET_ID = 5;
    private static final int __BESTFITDEGREE_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGEX, new org.apache.thrift.meta_data.FieldMetaData("regex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "OdsAdHocAggType")));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TRANSFORM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("transformConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGGREGATION_TYPE_BIT_MAP, new org.apache.thrift.meta_data.FieldMetaData("aggregationTypeBitMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BEST_FIT_DEGREE, new org.apache.thrift.meta_data.FieldMetaData("bestFitDegree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TRANSFORM_DATA_SOURCES, new org.apache.thrift.meta_data.FieldMetaData("transformDataSources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOP_NOPTS, new org.apache.thrift.meta_data.FieldMetaData("topNOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSTopN.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesByAggregationTypeCompressed_args.class, metaDataMap);
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args() {
      this.transformDataSources = "";

    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args(
      boolean regex,
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int type,
      int window,
      String transformConfig,
      int aggregationTypeBitMap,
      int bestFitDegree,
      String transformDataSources,
      ODSTopN topNOpts)
    {
      this();
      this.regex = regex;
      setRegexIsSet(true);
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.type = type;
      setTypeIsSet(true);
      this.window = window;
      setWindowIsSet(true);
      this.transformConfig = transformConfig;
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
      this.bestFitDegree = bestFitDegree;
      setBestFitDegreeIsSet(true);
      this.transformDataSources = transformDataSources;
      this.topNOpts = topNOpts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesByAggregationTypeCompressed_args(getOdsTimeSeriesByAggregationTypeCompressed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.regex = other.regex;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.type = other.type;
      this.window = other.window;
      if (other.isSetTransformConfig()) {
        this.transformConfig = other.transformConfig;
      }
      this.aggregationTypeBitMap = other.aggregationTypeBitMap;
      this.bestFitDegree = other.bestFitDegree;
      if (other.isSetTransformDataSources()) {
        this.transformDataSources = other.transformDataSources;
      }
      if (other.isSetTopNOpts()) {
        this.topNOpts = new ODSTopN(other.topNOpts);
      }
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args deepCopy() {
      return new getOdsTimeSeriesByAggregationTypeCompressed_args(this);
    }

    @Override
    public void clear() {
      setRegexIsSet(false);
      this.regex = false;
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setTypeIsSet(false);
      this.type = 0;
      setWindowIsSet(false);
      this.window = 0;
      this.transformConfig = null;
      setAggregationTypeBitMapIsSet(false);
      this.aggregationTypeBitMap = 0;
      setBestFitDegreeIsSet(false);
      this.bestFitDegree = 0;
      this.transformDataSources = "";

      this.topNOpts = null;
    }

    public boolean isRegex() {
      return this.regex;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setRegex(boolean regex) {
      this.regex = regex;
      setRegexIsSet(true);
      return this;
    }

    public void unsetRegex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGEX_ISSET_ID);
    }

    /** Returns true if field regex is set (has been assigned a value) and false otherwise */
    public boolean isSetRegex() {
      return EncodingUtils.testBit(__isset_bitfield, __REGEX_ISSET_ID);
    }

    public void setRegexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGEX_ISSET_ID, value);
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getOdsTimeSeriesByAggregationTypeCompressed_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getWindow() {
      return this.window;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public String getTransformConfig() {
      return this.transformConfig;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setTransformConfig(String transformConfig) {
      this.transformConfig = transformConfig;
      return this;
    }

    public void unsetTransformConfig() {
      this.transformConfig = null;
    }

    /** Returns true if field transformConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformConfig() {
      return this.transformConfig != null;
    }

    public void setTransformConfigIsSet(boolean value) {
      if (!value) {
        this.transformConfig = null;
      }
    }

    public int getAggregationTypeBitMap() {
      return this.aggregationTypeBitMap;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setAggregationTypeBitMap(int aggregationTypeBitMap) {
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
      return this;
    }

    public void unsetAggregationTypeBitMap() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    /** Returns true if field aggregationTypeBitMap is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationTypeBitMap() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    public void setAggregationTypeBitMapIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID, value);
    }

    public int getBestFitDegree() {
      return this.bestFitDegree;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setBestFitDegree(int bestFitDegree) {
      this.bestFitDegree = bestFitDegree;
      setBestFitDegreeIsSet(true);
      return this;
    }

    public void unsetBestFitDegree() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BESTFITDEGREE_ISSET_ID);
    }

    /** Returns true if field bestFitDegree is set (has been assigned a value) and false otherwise */
    public boolean isSetBestFitDegree() {
      return EncodingUtils.testBit(__isset_bitfield, __BESTFITDEGREE_ISSET_ID);
    }

    public void setBestFitDegreeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BESTFITDEGREE_ISSET_ID, value);
    }

    public String getTransformDataSources() {
      return this.transformDataSources;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setTransformDataSources(String transformDataSources) {
      this.transformDataSources = transformDataSources;
      return this;
    }

    public void unsetTransformDataSources() {
      this.transformDataSources = null;
    }

    /** Returns true if field transformDataSources is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformDataSources() {
      return this.transformDataSources != null;
    }

    public void setTransformDataSourcesIsSet(boolean value) {
      if (!value) {
        this.transformDataSources = null;
      }
    }

    public ODSTopN getTopNOpts() {
      return this.topNOpts;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_args setTopNOpts(ODSTopN topNOpts) {
      this.topNOpts = topNOpts;
      return this;
    }

    public void unsetTopNOpts() {
      this.topNOpts = null;
    }

    /** Returns true if field topNOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetTopNOpts() {
      return this.topNOpts != null;
    }

    public void setTopNOptsIsSet(boolean value) {
      if (!value) {
        this.topNOpts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGEX:
        if (value == null) {
          unsetRegex();
        } else {
          setRegex((Boolean)value);
        }
        break;

      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case TRANSFORM_CONFIG:
        if (value == null) {
          unsetTransformConfig();
        } else {
          setTransformConfig((String)value);
        }
        break;

      case AGGREGATION_TYPE_BIT_MAP:
        if (value == null) {
          unsetAggregationTypeBitMap();
        } else {
          setAggregationTypeBitMap((Integer)value);
        }
        break;

      case BEST_FIT_DEGREE:
        if (value == null) {
          unsetBestFitDegree();
        } else {
          setBestFitDegree((Integer)value);
        }
        break;

      case TRANSFORM_DATA_SOURCES:
        if (value == null) {
          unsetTransformDataSources();
        } else {
          setTransformDataSources((String)value);
        }
        break;

      case TOP_NOPTS:
        if (value == null) {
          unsetTopNOpts();
        } else {
          setTopNOpts((ODSTopN)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGEX:
        return Boolean.valueOf(isRegex());

      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case TYPE:
        return Integer.valueOf(getType());

      case WINDOW:
        return Integer.valueOf(getWindow());

      case TRANSFORM_CONFIG:
        return getTransformConfig();

      case AGGREGATION_TYPE_BIT_MAP:
        return Integer.valueOf(getAggregationTypeBitMap());

      case BEST_FIT_DEGREE:
        return Integer.valueOf(getBestFitDegree());

      case TRANSFORM_DATA_SOURCES:
        return getTransformDataSources();

      case TOP_NOPTS:
        return getTopNOpts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGEX:
        return isSetRegex();
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case TYPE:
        return isSetType();
      case WINDOW:
        return isSetWindow();
      case TRANSFORM_CONFIG:
        return isSetTransformConfig();
      case AGGREGATION_TYPE_BIT_MAP:
        return isSetAggregationTypeBitMap();
      case BEST_FIT_DEGREE:
        return isSetBestFitDegree();
      case TRANSFORM_DATA_SOURCES:
        return isSetTransformDataSources();
      case TOP_NOPTS:
        return isSetTopNOpts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesByAggregationTypeCompressed_args)
        return this.equals((getOdsTimeSeriesByAggregationTypeCompressed_args)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesByAggregationTypeCompressed_args that) {
      if (that == null)
        return false;

      boolean this_present_regex = true;
      boolean that_present_regex = true;
      if (this_present_regex || that_present_regex) {
        if (!(this_present_regex && that_present_regex))
          return false;
        if (this.regex != that.regex)
          return false;
      }

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_transformConfig = true && this.isSetTransformConfig();
      boolean that_present_transformConfig = true && that.isSetTransformConfig();
      if (this_present_transformConfig || that_present_transformConfig) {
        if (!(this_present_transformConfig && that_present_transformConfig))
          return false;
        if (!this.transformConfig.equals(that.transformConfig))
          return false;
      }

      boolean this_present_aggregationTypeBitMap = true;
      boolean that_present_aggregationTypeBitMap = true;
      if (this_present_aggregationTypeBitMap || that_present_aggregationTypeBitMap) {
        if (!(this_present_aggregationTypeBitMap && that_present_aggregationTypeBitMap))
          return false;
        if (this.aggregationTypeBitMap != that.aggregationTypeBitMap)
          return false;
      }

      boolean this_present_bestFitDegree = true;
      boolean that_present_bestFitDegree = true;
      if (this_present_bestFitDegree || that_present_bestFitDegree) {
        if (!(this_present_bestFitDegree && that_present_bestFitDegree))
          return false;
        if (this.bestFitDegree != that.bestFitDegree)
          return false;
      }

      boolean this_present_transformDataSources = true && this.isSetTransformDataSources();
      boolean that_present_transformDataSources = true && that.isSetTransformDataSources();
      if (this_present_transformDataSources || that_present_transformDataSources) {
        if (!(this_present_transformDataSources && that_present_transformDataSources))
          return false;
        if (!this.transformDataSources.equals(that.transformDataSources))
          return false;
      }

      boolean this_present_topNOpts = true && this.isSetTopNOpts();
      boolean that_present_topNOpts = true && that.isSetTopNOpts();
      if (this_present_topNOpts || that_present_topNOpts) {
        if (!(this_present_topNOpts && that_present_topNOpts))
          return false;
        if (!this.topNOpts.equals(that.topNOpts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_regex = true;
      list.add(present_regex);
      if (present_regex)
        list.add(regex);

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_transformConfig = true && (isSetTransformConfig());
      list.add(present_transformConfig);
      if (present_transformConfig)
        list.add(transformConfig);

      boolean present_aggregationTypeBitMap = true;
      list.add(present_aggregationTypeBitMap);
      if (present_aggregationTypeBitMap)
        list.add(aggregationTypeBitMap);

      boolean present_bestFitDegree = true;
      list.add(present_bestFitDegree);
      if (present_bestFitDegree)
        list.add(bestFitDegree);

      boolean present_transformDataSources = true && (isSetTransformDataSources());
      list.add(present_transformDataSources);
      if (present_transformDataSources)
        list.add(transformDataSources);

      boolean present_topNOpts = true && (isSetTopNOpts());
      list.add(present_topNOpts);
      if (present_topNOpts)
        list.add(topNOpts);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesByAggregationTypeCompressed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegex()).compareTo(other.isSetRegex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regex, other.regex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransformConfig()).compareTo(other.isSetTransformConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformConfig, other.transformConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationTypeBitMap()).compareTo(other.isSetAggregationTypeBitMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationTypeBitMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationTypeBitMap, other.aggregationTypeBitMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBestFitDegree()).compareTo(other.isSetBestFitDegree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBestFitDegree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestFitDegree, other.bestFitDegree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransformDataSources()).compareTo(other.isSetTransformDataSources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformDataSources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformDataSources, other.transformDataSources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopNOpts()).compareTo(other.isSetTopNOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopNOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topNOpts, other.topNOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesByAggregationTypeCompressed_args(");
      boolean first = true;

      sb.append("regex:");
      sb.append(this.regex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformConfig:");
      if (this.transformConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.transformConfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationTypeBitMap:");
      sb.append(this.aggregationTypeBitMap);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bestFitDegree:");
      sb.append(this.bestFitDegree);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transformDataSources:");
      if (this.transformDataSources == null) {
        sb.append("null");
      } else {
        sb.append(this.transformDataSources);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topNOpts:");
      if (this.topNOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.topNOpts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topNOpts != null) {
        topNOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_argsStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationTypeCompressed_argsStandardScheme getScheme() {
        return new getOdsTimeSeriesByAggregationTypeCompressed_argsStandardScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_argsStandardScheme extends StandardScheme<getOdsTimeSeriesByAggregationTypeCompressed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesByAggregationTypeCompressed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGEX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.regex = iprot.readBool();
                struct.setRegexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list574.size);
                  String _elem575;
                  for (int _i576 = 0; _i576 < _list574.size; ++_i576)
                  {
                    _elem575 = iprot.readString();
                    struct.entities.add(_elem575);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list577 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list577.size);
                  String _elem578;
                  for (int _i579 = 0; _i579 < _list577.size; ++_i579)
                  {
                    _elem578 = iprot.readString();
                    struct.keys.add(_elem578);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // TRANSFORM_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transformConfig = iprot.readString();
                struct.setTransformConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // AGGREGATION_TYPE_BIT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationTypeBitMap = iprot.readI32();
                struct.setAggregationTypeBitMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // BEST_FIT_DEGREE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bestFitDegree = iprot.readI32();
                struct.setBestFitDegreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // TRANSFORM_DATA_SOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transformDataSources = iprot.readString();
                struct.setTransformDataSourcesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // TOP_NOPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topNOpts = new ODSTopN();
                struct.topNOpts.read(iprot);
                struct.setTopNOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesByAggregationTypeCompressed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGEX_FIELD_DESC);
        oprot.writeBool(struct.regex);
        oprot.writeFieldEnd();
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter580 : struct.entities)
            {
              oprot.writeString(_iter580);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter581 : struct.keys)
            {
              oprot.writeString(_iter581);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        if (struct.transformConfig != null) {
          oprot.writeFieldBegin(TRANSFORM_CONFIG_FIELD_DESC);
          oprot.writeString(struct.transformConfig);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGGREGATION_TYPE_BIT_MAP_FIELD_DESC);
        oprot.writeI32(struct.aggregationTypeBitMap);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BEST_FIT_DEGREE_FIELD_DESC);
        oprot.writeI32(struct.bestFitDegree);
        oprot.writeFieldEnd();
        if (struct.transformDataSources != null) {
          oprot.writeFieldBegin(TRANSFORM_DATA_SOURCES_FIELD_DESC);
          oprot.writeString(struct.transformDataSources);
          oprot.writeFieldEnd();
        }
        if (struct.topNOpts != null) {
          oprot.writeFieldBegin(TOP_NOPTS_FIELD_DESC);
          struct.topNOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_argsTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationTypeCompressed_argsTupleScheme getScheme() {
        return new getOdsTimeSeriesByAggregationTypeCompressed_argsTupleScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_argsTupleScheme extends TupleScheme<getOdsTimeSeriesByAggregationTypeCompressed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationTypeCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegex()) {
          optionals.set(0);
        }
        if (struct.isSetEntities()) {
          optionals.set(1);
        }
        if (struct.isSetKeys()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnd_()) {
          optionals.set(4);
        }
        if (struct.isSetTable()) {
          optionals.set(5);
        }
        if (struct.isSetType()) {
          optionals.set(6);
        }
        if (struct.isSetWindow()) {
          optionals.set(7);
        }
        if (struct.isSetTransformConfig()) {
          optionals.set(8);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          optionals.set(9);
        }
        if (struct.isSetBestFitDegree()) {
          optionals.set(10);
        }
        if (struct.isSetTransformDataSources()) {
          optionals.set(11);
        }
        if (struct.isSetTopNOpts()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetRegex()) {
          oprot.writeBool(struct.regex);
        }
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter582 : struct.entities)
            {
              oprot.writeString(_iter582);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter583 : struct.keys)
            {
              oprot.writeString(_iter583);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetTransformConfig()) {
          oprot.writeString(struct.transformConfig);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          oprot.writeI32(struct.aggregationTypeBitMap);
        }
        if (struct.isSetBestFitDegree()) {
          oprot.writeI32(struct.bestFitDegree);
        }
        if (struct.isSetTransformDataSources()) {
          oprot.writeString(struct.transformDataSources);
        }
        if (struct.isSetTopNOpts()) {
          struct.topNOpts.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationTypeCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.regex = iprot.readBool();
          struct.setRegexIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list584 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list584.size);
            String _elem585;
            for (int _i586 = 0; _i586 < _list584.size; ++_i586)
            {
              _elem585 = iprot.readString();
              struct.entities.add(_elem585);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list587.size);
            String _elem588;
            for (int _i589 = 0; _i589 < _list587.size; ++_i589)
            {
              _elem588 = iprot.readString();
              struct.keys.add(_elem588);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(5)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(8)) {
          struct.transformConfig = iprot.readString();
          struct.setTransformConfigIsSet(true);
        }
        if (incoming.get(9)) {
          struct.aggregationTypeBitMap = iprot.readI32();
          struct.setAggregationTypeBitMapIsSet(true);
        }
        if (incoming.get(10)) {
          struct.bestFitDegree = iprot.readI32();
          struct.setBestFitDegreeIsSet(true);
        }
        if (incoming.get(11)) {
          struct.transformDataSources = iprot.readString();
          struct.setTransformDataSourcesIsSet(true);
        }
        if (incoming.get(12)) {
          struct.topNOpts = new ODSTopN();
          struct.topNOpts.read(iprot);
          struct.setTopNOptsIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesByAggregationTypeCompressed_result implements org.apache.thrift.TBase<getOdsTimeSeriesByAggregationTypeCompressed_result, getOdsTimeSeriesByAggregationTypeCompressed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesByAggregationTypeCompressed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesByAggregationTypeCompressed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesByAggregationTypeCompressed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesByAggregationTypeCompressed_resultTupleSchemeFactory());
    }

    public Map<OdsAggregationType,TransformResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsAggregationType.class), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesByAggregationTypeCompressed_result.class, metaDataMap);
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_result() {
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_result(
      Map<OdsAggregationType,TransformResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesByAggregationTypeCompressed_result(getOdsTimeSeriesByAggregationTypeCompressed_result other) {
      if (other.isSetSuccess()) {
        Map<OdsAggregationType,TransformResult> __this__success = new HashMap<OdsAggregationType,TransformResult>(other.success.size());
        for (Map.Entry<OdsAggregationType, TransformResult> other_element : other.success.entrySet()) {

          OdsAggregationType other_element_key = other_element.getKey();
          TransformResult other_element_value = other_element.getValue();

          OdsAggregationType __this__success_copy_key = other_element_key;

          TransformResult __this__success_copy_value = new TransformResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_result deepCopy() {
      return new getOdsTimeSeriesByAggregationTypeCompressed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(OdsAggregationType key, TransformResult val) {
      if (this.success == null) {
        this.success = new HashMap<OdsAggregationType,TransformResult>();
      }
      this.success.put(key, val);
    }

    public Map<OdsAggregationType,TransformResult> getSuccess() {
      return this.success;
    }

    public getOdsTimeSeriesByAggregationTypeCompressed_result setSuccess(Map<OdsAggregationType,TransformResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<OdsAggregationType,TransformResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesByAggregationTypeCompressed_result)
        return this.equals((getOdsTimeSeriesByAggregationTypeCompressed_result)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesByAggregationTypeCompressed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesByAggregationTypeCompressed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesByAggregationTypeCompressed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_resultStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationTypeCompressed_resultStandardScheme getScheme() {
        return new getOdsTimeSeriesByAggregationTypeCompressed_resultStandardScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_resultStandardScheme extends StandardScheme<getOdsTimeSeriesByAggregationTypeCompressed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesByAggregationTypeCompressed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map590 = iprot.readMapBegin();
                  struct.success = new HashMap<OdsAggregationType,TransformResult>(2*_map590.size);
                  OdsAggregationType _key591;
                  TransformResult _val592;
                  for (int _i593 = 0; _i593 < _map590.size; ++_i593)
                  {
                    _key591 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
                    _val592 = new TransformResult();
                    _val592.read(iprot);
                    struct.success.put(_key591, _val592);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesByAggregationTypeCompressed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<OdsAggregationType, TransformResult> _iter594 : struct.success.entrySet())
            {
              oprot.writeI32(_iter594.getKey().getValue());
              _iter594.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_resultTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesByAggregationTypeCompressed_resultTupleScheme getScheme() {
        return new getOdsTimeSeriesByAggregationTypeCompressed_resultTupleScheme();
      }
    }

    private static class getOdsTimeSeriesByAggregationTypeCompressed_resultTupleScheme extends TupleScheme<getOdsTimeSeriesByAggregationTypeCompressed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationTypeCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<OdsAggregationType, TransformResult> _iter595 : struct.success.entrySet())
            {
              oprot.writeI32(_iter595.getKey().getValue());
              _iter595.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesByAggregationTypeCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map596 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<OdsAggregationType,TransformResult>(2*_map596.size);
            OdsAggregationType _key597;
            TransformResult _val598;
            for (int _i599 = 0; _i599 < _map596.size; ++_i599)
            {
              _key597 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
              _val598 = new TransformResult();
              _val598.read(iprot);
              struct.success.put(_key597, _val598);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesSimple_args implements org.apache.thrift.TBase<getOdsTimeSeriesSimple_args, getOdsTimeSeriesSimple_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesSimple_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesSimple_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_BIT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationTypeBitMap", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesSimple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesSimple_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int window; // required
    public int aggregationTypeBitMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      WINDOW((short)6, "window"),
      AGGREGATION_TYPE_BIT_MAP((short)7, "aggregationTypeBitMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // WINDOW
            return WINDOW;
          case 7: // AGGREGATION_TYPE_BIT_MAP
            return AGGREGATION_TYPE_BIT_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __WINDOW_ISSET_ID = 2;
    private static final int __AGGREGATIONTYPEBITMAP_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AGGREGATION_TYPE_BIT_MAP, new org.apache.thrift.meta_data.FieldMetaData("aggregationTypeBitMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesSimple_args.class, metaDataMap);
    }

    public getOdsTimeSeriesSimple_args() {
    }

    public getOdsTimeSeriesSimple_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int window,
      int aggregationTypeBitMap)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.window = window;
      setWindowIsSet(true);
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesSimple_args(getOdsTimeSeriesSimple_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.window = other.window;
      this.aggregationTypeBitMap = other.aggregationTypeBitMap;
    }

    public getOdsTimeSeriesSimple_args deepCopy() {
      return new getOdsTimeSeriesSimple_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setWindowIsSet(false);
      this.window = 0;
      setAggregationTypeBitMapIsSet(false);
      this.aggregationTypeBitMap = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getOdsTimeSeriesSimple_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getOdsTimeSeriesSimple_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getOdsTimeSeriesSimple_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getOdsTimeSeriesSimple_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getOdsTimeSeriesSimple_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getWindow() {
      return this.window;
    }

    public getOdsTimeSeriesSimple_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getAggregationTypeBitMap() {
      return this.aggregationTypeBitMap;
    }

    public getOdsTimeSeriesSimple_args setAggregationTypeBitMap(int aggregationTypeBitMap) {
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
      return this;
    }

    public void unsetAggregationTypeBitMap() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    /** Returns true if field aggregationTypeBitMap is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationTypeBitMap() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    public void setAggregationTypeBitMapIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case AGGREGATION_TYPE_BIT_MAP:
        if (value == null) {
          unsetAggregationTypeBitMap();
        } else {
          setAggregationTypeBitMap((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case WINDOW:
        return Integer.valueOf(getWindow());

      case AGGREGATION_TYPE_BIT_MAP:
        return Integer.valueOf(getAggregationTypeBitMap());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case WINDOW:
        return isSetWindow();
      case AGGREGATION_TYPE_BIT_MAP:
        return isSetAggregationTypeBitMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesSimple_args)
        return this.equals((getOdsTimeSeriesSimple_args)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesSimple_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_aggregationTypeBitMap = true;
      boolean that_present_aggregationTypeBitMap = true;
      if (this_present_aggregationTypeBitMap || that_present_aggregationTypeBitMap) {
        if (!(this_present_aggregationTypeBitMap && that_present_aggregationTypeBitMap))
          return false;
        if (this.aggregationTypeBitMap != that.aggregationTypeBitMap)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_aggregationTypeBitMap = true;
      list.add(present_aggregationTypeBitMap);
      if (present_aggregationTypeBitMap)
        list.add(aggregationTypeBitMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesSimple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationTypeBitMap()).compareTo(other.isSetAggregationTypeBitMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationTypeBitMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationTypeBitMap, other.aggregationTypeBitMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesSimple_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationTypeBitMap:");
      sb.append(this.aggregationTypeBitMap);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesSimple_argsStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimple_argsStandardScheme getScheme() {
        return new getOdsTimeSeriesSimple_argsStandardScheme();
      }
    }

    private static class getOdsTimeSeriesSimple_argsStandardScheme extends StandardScheme<getOdsTimeSeriesSimple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesSimple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list600 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list600.size);
                  String _elem601;
                  for (int _i602 = 0; _i602 < _list600.size; ++_i602)
                  {
                    _elem601 = iprot.readString();
                    struct.entities.add(_elem601);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list603 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list603.size);
                  String _elem604;
                  for (int _i605 = 0; _i605 < _list603.size; ++_i605)
                  {
                    _elem604 = iprot.readString();
                    struct.keys.add(_elem604);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGGREGATION_TYPE_BIT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationTypeBitMap = iprot.readI32();
                struct.setAggregationTypeBitMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesSimple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter606 : struct.entities)
            {
              oprot.writeString(_iter606);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter607 : struct.keys)
            {
              oprot.writeString(_iter607);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_BIT_MAP_FIELD_DESC);
        oprot.writeI32(struct.aggregationTypeBitMap);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesSimple_argsTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimple_argsTupleScheme getScheme() {
        return new getOdsTimeSeriesSimple_argsTupleScheme();
      }
    }

    private static class getOdsTimeSeriesSimple_argsTupleScheme extends TupleScheme<getOdsTimeSeriesSimple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter608 : struct.entities)
            {
              oprot.writeString(_iter608);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter609 : struct.keys)
            {
              oprot.writeString(_iter609);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          oprot.writeI32(struct.aggregationTypeBitMap);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list610 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list610.size);
            String _elem611;
            for (int _i612 = 0; _i612 < _list610.size; ++_i612)
            {
              _elem611 = iprot.readString();
              struct.entities.add(_elem611);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list613 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list613.size);
            String _elem614;
            for (int _i615 = 0; _i615 < _list613.size; ++_i615)
            {
              _elem614 = iprot.readString();
              struct.keys.add(_elem614);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggregationTypeBitMap = iprot.readI32();
          struct.setAggregationTypeBitMapIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesSimple_result implements org.apache.thrift.TBase<getOdsTimeSeriesSimple_result, getOdsTimeSeriesSimple_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesSimple_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesSimple_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesSimple_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesSimple_resultTupleSchemeFactory());
    }

    public Map<OdsAggregationType,OdsGetResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsAggregationType.class), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsGetResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesSimple_result.class, metaDataMap);
    }

    public getOdsTimeSeriesSimple_result() {
    }

    public getOdsTimeSeriesSimple_result(
      Map<OdsAggregationType,OdsGetResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesSimple_result(getOdsTimeSeriesSimple_result other) {
      if (other.isSetSuccess()) {
        Map<OdsAggregationType,OdsGetResult> __this__success = new HashMap<OdsAggregationType,OdsGetResult>(other.success.size());
        for (Map.Entry<OdsAggregationType, OdsGetResult> other_element : other.success.entrySet()) {

          OdsAggregationType other_element_key = other_element.getKey();
          OdsGetResult other_element_value = other_element.getValue();

          OdsAggregationType __this__success_copy_key = other_element_key;

          OdsGetResult __this__success_copy_value = new OdsGetResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getOdsTimeSeriesSimple_result deepCopy() {
      return new getOdsTimeSeriesSimple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(OdsAggregationType key, OdsGetResult val) {
      if (this.success == null) {
        this.success = new HashMap<OdsAggregationType,OdsGetResult>();
      }
      this.success.put(key, val);
    }

    public Map<OdsAggregationType,OdsGetResult> getSuccess() {
      return this.success;
    }

    public getOdsTimeSeriesSimple_result setSuccess(Map<OdsAggregationType,OdsGetResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<OdsAggregationType,OdsGetResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesSimple_result)
        return this.equals((getOdsTimeSeriesSimple_result)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesSimple_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesSimple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesSimple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesSimple_resultStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimple_resultStandardScheme getScheme() {
        return new getOdsTimeSeriesSimple_resultStandardScheme();
      }
    }

    private static class getOdsTimeSeriesSimple_resultStandardScheme extends StandardScheme<getOdsTimeSeriesSimple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesSimple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map616 = iprot.readMapBegin();
                  struct.success = new HashMap<OdsAggregationType,OdsGetResult>(2*_map616.size);
                  OdsAggregationType _key617;
                  OdsGetResult _val618;
                  for (int _i619 = 0; _i619 < _map616.size; ++_i619)
                  {
                    _key617 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
                    _val618 = new OdsGetResult();
                    _val618.read(iprot);
                    struct.success.put(_key617, _val618);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesSimple_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<OdsAggregationType, OdsGetResult> _iter620 : struct.success.entrySet())
            {
              oprot.writeI32(_iter620.getKey().getValue());
              _iter620.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesSimple_resultTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimple_resultTupleScheme getScheme() {
        return new getOdsTimeSeriesSimple_resultTupleScheme();
      }
    }

    private static class getOdsTimeSeriesSimple_resultTupleScheme extends TupleScheme<getOdsTimeSeriesSimple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<OdsAggregationType, OdsGetResult> _iter621 : struct.success.entrySet())
            {
              oprot.writeI32(_iter621.getKey().getValue());
              _iter621.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map622 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<OdsAggregationType,OdsGetResult>(2*_map622.size);
            OdsAggregationType _key623;
            OdsGetResult _val624;
            for (int _i625 = 0; _i625 < _map622.size; ++_i625)
            {
              _key623 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
              _val624 = new OdsGetResult();
              _val624.read(iprot);
              struct.success.put(_key623, _val624);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTimeSeriesByAggType_args implements org.apache.thrift.TBase<getTimeSeriesByAggType_args, getTimeSeriesByAggType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimeSeriesByAggType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimeSeriesByAggType_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimeSeriesByAggType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimeSeriesByAggType_argsTupleSchemeFactory());
    }

    public GetTimeSeriesByAggTypeParams query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTimeSeriesByAggTypeParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimeSeriesByAggType_args.class, metaDataMap);
    }

    public getTimeSeriesByAggType_args() {
    }

    public getTimeSeriesByAggType_args(
      GetTimeSeriesByAggTypeParams query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimeSeriesByAggType_args(getTimeSeriesByAggType_args other) {
      if (other.isSetQuery()) {
        this.query = new GetTimeSeriesByAggTypeParams(other.query);
      }
    }

    public getTimeSeriesByAggType_args deepCopy() {
      return new getTimeSeriesByAggType_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public GetTimeSeriesByAggTypeParams getQuery() {
      return this.query;
    }

    public getTimeSeriesByAggType_args setQuery(GetTimeSeriesByAggTypeParams query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((GetTimeSeriesByAggTypeParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimeSeriesByAggType_args)
        return this.equals((getTimeSeriesByAggType_args)that);
      return false;
    }

    public boolean equals(getTimeSeriesByAggType_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimeSeriesByAggType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimeSeriesByAggType_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimeSeriesByAggType_argsStandardSchemeFactory implements SchemeFactory {
      public getTimeSeriesByAggType_argsStandardScheme getScheme() {
        return new getTimeSeriesByAggType_argsStandardScheme();
      }
    }

    private static class getTimeSeriesByAggType_argsStandardScheme extends StandardScheme<getTimeSeriesByAggType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimeSeriesByAggType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new GetTimeSeriesByAggTypeParams();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimeSeriesByAggType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimeSeriesByAggType_argsTupleSchemeFactory implements SchemeFactory {
      public getTimeSeriesByAggType_argsTupleScheme getScheme() {
        return new getTimeSeriesByAggType_argsTupleScheme();
      }
    }

    private static class getTimeSeriesByAggType_argsTupleScheme extends TupleScheme<getTimeSeriesByAggType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimeSeriesByAggType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimeSeriesByAggType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new GetTimeSeriesByAggTypeParams();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class getTimeSeriesByAggType_result implements org.apache.thrift.TBase<getTimeSeriesByAggType_result, getTimeSeriesByAggType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimeSeriesByAggType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimeSeriesByAggType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimeSeriesByAggType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimeSeriesByAggType_resultTupleSchemeFactory());
    }

    public GetTimeSeriesByAggTypeResults success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTimeSeriesByAggTypeResults.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimeSeriesByAggType_result.class, metaDataMap);
    }

    public getTimeSeriesByAggType_result() {
    }

    public getTimeSeriesByAggType_result(
      GetTimeSeriesByAggTypeResults success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimeSeriesByAggType_result(getTimeSeriesByAggType_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetTimeSeriesByAggTypeResults(other.success);
      }
    }

    public getTimeSeriesByAggType_result deepCopy() {
      return new getTimeSeriesByAggType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetTimeSeriesByAggTypeResults getSuccess() {
      return this.success;
    }

    public getTimeSeriesByAggType_result setSuccess(GetTimeSeriesByAggTypeResults success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetTimeSeriesByAggTypeResults)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimeSeriesByAggType_result)
        return this.equals((getTimeSeriesByAggType_result)that);
      return false;
    }

    public boolean equals(getTimeSeriesByAggType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimeSeriesByAggType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimeSeriesByAggType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimeSeriesByAggType_resultStandardSchemeFactory implements SchemeFactory {
      public getTimeSeriesByAggType_resultStandardScheme getScheme() {
        return new getTimeSeriesByAggType_resultStandardScheme();
      }
    }

    private static class getTimeSeriesByAggType_resultStandardScheme extends StandardScheme<getTimeSeriesByAggType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimeSeriesByAggType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetTimeSeriesByAggTypeResults();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimeSeriesByAggType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimeSeriesByAggType_resultTupleSchemeFactory implements SchemeFactory {
      public getTimeSeriesByAggType_resultTupleScheme getScheme() {
        return new getTimeSeriesByAggType_resultTupleScheme();
      }
    }

    private static class getTimeSeriesByAggType_resultTupleScheme extends TupleScheme<getTimeSeriesByAggType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimeSeriesByAggType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimeSeriesByAggType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetTimeSeriesByAggTypeResults();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesSimpleCompressed_args implements org.apache.thrift.TBase<getOdsTimeSeriesSimpleCompressed_args, getOdsTimeSeriesSimpleCompressed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesSimpleCompressed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesSimpleCompressed_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END__FIELD_DESC = new org.apache.thrift.protocol.TField("end_", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_BIT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationTypeBitMap", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesSimpleCompressed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesSimpleCompressed_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public List<String> keys; // required
    public long start; // required
    public long end_; // required
    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable table; // required
    public int window; // required
    public int aggregationTypeBitMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      KEYS((short)2, "keys"),
      START((short)3, "start"),
      END_((short)4, "end_"),
      /**
       * 
       * @see OdsDataTable
       */
      TABLE((short)5, "table"),
      WINDOW((short)6, "window"),
      AGGREGATION_TYPE_BIT_MAP((short)7, "aggregationTypeBitMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // KEYS
            return KEYS;
          case 3: // START
            return START;
          case 4: // END_
            return END_;
          case 5: // TABLE
            return TABLE;
          case 6: // WINDOW
            return WINDOW;
          case 7: // AGGREGATION_TYPE_BIT_MAP
            return AGGREGATION_TYPE_BIT_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __END__ISSET_ID = 1;
    private static final int __WINDOW_ISSET_ID = 2;
    private static final int __AGGREGATIONTYPEBITMAP_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_, new org.apache.thrift.meta_data.FieldMetaData("end_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
      tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AGGREGATION_TYPE_BIT_MAP, new org.apache.thrift.meta_data.FieldMetaData("aggregationTypeBitMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesSimpleCompressed_args.class, metaDataMap);
    }

    public getOdsTimeSeriesSimpleCompressed_args() {
    }

    public getOdsTimeSeriesSimpleCompressed_args(
      List<String> entities,
      List<String> keys,
      long start,
      long end_,
      OdsDataTable table,
      int window,
      int aggregationTypeBitMap)
    {
      this();
      this.entities = entities;
      this.keys = keys;
      this.start = start;
      setStartIsSet(true);
      this.end_ = end_;
      setEnd_IsSet(true);
      this.table = table;
      this.window = window;
      setWindowIsSet(true);
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesSimpleCompressed_args(getOdsTimeSeriesSimpleCompressed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.start = other.start;
      this.end_ = other.end_;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      this.window = other.window;
      this.aggregationTypeBitMap = other.aggregationTypeBitMap;
    }

    public getOdsTimeSeriesSimpleCompressed_args deepCopy() {
      return new getOdsTimeSeriesSimpleCompressed_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      this.keys = null;
      setStartIsSet(false);
      this.start = 0;
      setEnd_IsSet(false);
      this.end_ = 0;
      this.table = null;
      setWindowIsSet(false);
      this.window = 0;
      setAggregationTypeBitMapIsSet(false);
      this.aggregationTypeBitMap = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getOdsTimeSeriesSimpleCompressed_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getOdsTimeSeriesSimpleCompressed_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public getOdsTimeSeriesSimpleCompressed_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnd_() {
      return this.end_;
    }

    public getOdsTimeSeriesSimpleCompressed_args setEnd_(long end_) {
      this.end_ = end_;
      setEnd_IsSet(true);
      return this;
    }

    public void unsetEnd_() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END__ISSET_ID);
    }

    /** Returns true if field end_ is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_() {
      return EncodingUtils.testBit(__isset_bitfield, __END__ISSET_ID);
    }

    public void setEnd_IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END__ISSET_ID, value);
    }

    /**
     * 
     * @see OdsDataTable
     */
    public OdsDataTable getTable() {
      return this.table;
    }

    /**
     * 
     * @see OdsDataTable
     */
    public getOdsTimeSeriesSimpleCompressed_args setTable(OdsDataTable table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public int getWindow() {
      return this.window;
    }

    public getOdsTimeSeriesSimpleCompressed_args setWindow(int window) {
      this.window = window;
      setWindowIsSet(true);
      return this;
    }

    public void unsetWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    /** Returns true if field window is set (has been assigned a value) and false otherwise */
    public boolean isSetWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
    }

    public void setWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
    }

    public int getAggregationTypeBitMap() {
      return this.aggregationTypeBitMap;
    }

    public getOdsTimeSeriesSimpleCompressed_args setAggregationTypeBitMap(int aggregationTypeBitMap) {
      this.aggregationTypeBitMap = aggregationTypeBitMap;
      setAggregationTypeBitMapIsSet(true);
      return this;
    }

    public void unsetAggregationTypeBitMap() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    /** Returns true if field aggregationTypeBitMap is set (has been assigned a value) and false otherwise */
    public boolean isSetAggregationTypeBitMap() {
      return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID);
    }

    public void setAggregationTypeBitMapIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPEBITMAP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case END_:
        if (value == null) {
          unsetEnd_();
        } else {
          setEnd_((Long)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((OdsDataTable)value);
        }
        break;

      case WINDOW:
        if (value == null) {
          unsetWindow();
        } else {
          setWindow((Integer)value);
        }
        break;

      case AGGREGATION_TYPE_BIT_MAP:
        if (value == null) {
          unsetAggregationTypeBitMap();
        } else {
          setAggregationTypeBitMap((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case KEYS:
        return getKeys();

      case START:
        return Long.valueOf(getStart());

      case END_:
        return Long.valueOf(getEnd_());

      case TABLE:
        return getTable();

      case WINDOW:
        return Integer.valueOf(getWindow());

      case AGGREGATION_TYPE_BIT_MAP:
        return Integer.valueOf(getAggregationTypeBitMap());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case KEYS:
        return isSetKeys();
      case START:
        return isSetStart();
      case END_:
        return isSetEnd_();
      case TABLE:
        return isSetTable();
      case WINDOW:
        return isSetWindow();
      case AGGREGATION_TYPE_BIT_MAP:
        return isSetAggregationTypeBitMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesSimpleCompressed_args)
        return this.equals((getOdsTimeSeriesSimpleCompressed_args)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesSimpleCompressed_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_end_ = true;
      boolean that_present_end_ = true;
      if (this_present_end_ || that_present_end_) {
        if (!(this_present_end_ && that_present_end_))
          return false;
        if (this.end_ != that.end_)
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_window = true;
      boolean that_present_window = true;
      if (this_present_window || that_present_window) {
        if (!(this_present_window && that_present_window))
          return false;
        if (this.window != that.window)
          return false;
      }

      boolean this_present_aggregationTypeBitMap = true;
      boolean that_present_aggregationTypeBitMap = true;
      if (this_present_aggregationTypeBitMap || that_present_aggregationTypeBitMap) {
        if (!(this_present_aggregationTypeBitMap && that_present_aggregationTypeBitMap))
          return false;
        if (this.aggregationTypeBitMap != that.aggregationTypeBitMap)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_end_ = true;
      list.add(present_end_);
      if (present_end_)
        list.add(end_);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table.getValue());

      boolean present_window = true;
      list.add(present_window);
      if (present_window)
        list.add(window);

      boolean present_aggregationTypeBitMap = true;
      list.add(present_aggregationTypeBitMap);
      if (present_aggregationTypeBitMap)
        list.add(aggregationTypeBitMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesSimpleCompressed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_()).compareTo(other.isSetEnd_());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_, other.end_);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggregationTypeBitMap()).compareTo(other.isSetAggregationTypeBitMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggregationTypeBitMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationTypeBitMap, other.aggregationTypeBitMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesSimpleCompressed_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_:");
      sb.append(this.end_);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("window:");
      sb.append(this.window);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggregationTypeBitMap:");
      sb.append(this.aggregationTypeBitMap);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesSimpleCompressed_argsStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimpleCompressed_argsStandardScheme getScheme() {
        return new getOdsTimeSeriesSimpleCompressed_argsStandardScheme();
      }
    }

    private static class getOdsTimeSeriesSimpleCompressed_argsStandardScheme extends StandardScheme<getOdsTimeSeriesSimpleCompressed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesSimpleCompressed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list626 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list626.size);
                  String _elem627;
                  for (int _i628 = 0; _i628 < _list626.size; ++_i628)
                  {
                    _elem627 = iprot.readString();
                    struct.entities.add(_elem627);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list629 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list629.size);
                  String _elem630;
                  for (int _i631 = 0; _i631 < _list629.size; ++_i631)
                  {
                    _elem630 = iprot.readString();
                    struct.keys.add(_elem630);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ = iprot.readI64();
                struct.setEnd_IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.window = iprot.readI32();
                struct.setWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGGREGATION_TYPE_BIT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.aggregationTypeBitMap = iprot.readI32();
                struct.setAggregationTypeBitMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesSimpleCompressed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter632 : struct.entities)
            {
              oprot.writeString(_iter632);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter633 : struct.keys)
            {
              oprot.writeString(_iter633);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END__FIELD_DESC);
        oprot.writeI64(struct.end_);
        oprot.writeFieldEnd();
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeI32(struct.table.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WINDOW_FIELD_DESC);
        oprot.writeI32(struct.window);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AGGREGATION_TYPE_BIT_MAP_FIELD_DESC);
        oprot.writeI32(struct.aggregationTypeBitMap);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesSimpleCompressed_argsTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimpleCompressed_argsTupleScheme getScheme() {
        return new getOdsTimeSeriesSimpleCompressed_argsTupleScheme();
      }
    }

    private static class getOdsTimeSeriesSimpleCompressed_argsTupleScheme extends TupleScheme<getOdsTimeSeriesSimpleCompressed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimpleCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_()) {
          optionals.set(3);
        }
        if (struct.isSetTable()) {
          optionals.set(4);
        }
        if (struct.isSetWindow()) {
          optionals.set(5);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter634 : struct.entities)
            {
              oprot.writeString(_iter634);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter635 : struct.keys)
            {
              oprot.writeString(_iter635);
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnd_()) {
          oprot.writeI64(struct.end_);
        }
        if (struct.isSetTable()) {
          oprot.writeI32(struct.table.getValue());
        }
        if (struct.isSetWindow()) {
          oprot.writeI32(struct.window);
        }
        if (struct.isSetAggregationTypeBitMap()) {
          oprot.writeI32(struct.aggregationTypeBitMap);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimpleCompressed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list636 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list636.size);
            String _elem637;
            for (int _i638 = 0; _i638 < _list636.size; ++_i638)
            {
              _elem637 = iprot.readString();
              struct.entities.add(_elem637);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list639 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list639.size);
            String _elem640;
            for (int _i641 = 0; _i641 < _list639.size; ++_i641)
            {
              _elem640 = iprot.readString();
              struct.keys.add(_elem640);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ = iprot.readI64();
          struct.setEnd_IsSet(true);
        }
        if (incoming.get(4)) {
          struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
          struct.setTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.window = iprot.readI32();
          struct.setWindowIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggregationTypeBitMap = iprot.readI32();
          struct.setAggregationTypeBitMapIsSet(true);
        }
      }
    }

  }

  public static class getOdsTimeSeriesSimpleCompressed_result implements org.apache.thrift.TBase<getOdsTimeSeriesSimpleCompressed_result, getOdsTimeSeriesSimpleCompressed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOdsTimeSeriesSimpleCompressed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOdsTimeSeriesSimpleCompressed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOdsTimeSeriesSimpleCompressed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOdsTimeSeriesSimpleCompressed_resultTupleSchemeFactory());
    }

    public Map<OdsAggregationType,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsAggregationType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOdsTimeSeriesSimpleCompressed_result.class, metaDataMap);
    }

    public getOdsTimeSeriesSimpleCompressed_result() {
    }

    public getOdsTimeSeriesSimpleCompressed_result(
      Map<OdsAggregationType,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOdsTimeSeriesSimpleCompressed_result(getOdsTimeSeriesSimpleCompressed_result other) {
      if (other.isSetSuccess()) {
        Map<OdsAggregationType,String> __this__success = new HashMap<OdsAggregationType,String>(other.success.size());
        for (Map.Entry<OdsAggregationType, String> other_element : other.success.entrySet()) {

          OdsAggregationType other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          OdsAggregationType __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getOdsTimeSeriesSimpleCompressed_result deepCopy() {
      return new getOdsTimeSeriesSimpleCompressed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(OdsAggregationType key, String val) {
      if (this.success == null) {
        this.success = new HashMap<OdsAggregationType,String>();
      }
      this.success.put(key, val);
    }

    public Map<OdsAggregationType,String> getSuccess() {
      return this.success;
    }

    public getOdsTimeSeriesSimpleCompressed_result setSuccess(Map<OdsAggregationType,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<OdsAggregationType,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOdsTimeSeriesSimpleCompressed_result)
        return this.equals((getOdsTimeSeriesSimpleCompressed_result)that);
      return false;
    }

    public boolean equals(getOdsTimeSeriesSimpleCompressed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOdsTimeSeriesSimpleCompressed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOdsTimeSeriesSimpleCompressed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOdsTimeSeriesSimpleCompressed_resultStandardSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimpleCompressed_resultStandardScheme getScheme() {
        return new getOdsTimeSeriesSimpleCompressed_resultStandardScheme();
      }
    }

    private static class getOdsTimeSeriesSimpleCompressed_resultStandardScheme extends StandardScheme<getOdsTimeSeriesSimpleCompressed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOdsTimeSeriesSimpleCompressed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map642 = iprot.readMapBegin();
                  struct.success = new HashMap<OdsAggregationType,String>(2*_map642.size);
                  OdsAggregationType _key643;
                  String _val644;
                  for (int _i645 = 0; _i645 < _map642.size; ++_i645)
                  {
                    _key643 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
                    _val644 = iprot.readString();
                    struct.success.put(_key643, _val644);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOdsTimeSeriesSimpleCompressed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<OdsAggregationType, String> _iter646 : struct.success.entrySet())
            {
              oprot.writeI32(_iter646.getKey().getValue());
              oprot.writeString(_iter646.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOdsTimeSeriesSimpleCompressed_resultTupleSchemeFactory implements SchemeFactory {
      public getOdsTimeSeriesSimpleCompressed_resultTupleScheme getScheme() {
        return new getOdsTimeSeriesSimpleCompressed_resultTupleScheme();
      }
    }

    private static class getOdsTimeSeriesSimpleCompressed_resultTupleScheme extends TupleScheme<getOdsTimeSeriesSimpleCompressed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimpleCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<OdsAggregationType, String> _iter647 : struct.success.entrySet())
            {
              oprot.writeI32(_iter647.getKey().getValue());
              oprot.writeString(_iter647.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOdsTimeSeriesSimpleCompressed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map648 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<OdsAggregationType,String>(2*_map648.size);
            OdsAggregationType _key649;
            String _val650;
            for (int _i651 = 0; _i651 < _map648.size; ++_i651)
            {
              _key649 = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
              _val650 = iprot.readString();
              struct.success.put(_key649, _val650);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAdvancedTransformQuery_args implements org.apache.thrift.TBase<getAdvancedTransformQuery_args, getAdvancedTransformQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdvancedTransformQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdvancedTransformQuery_args");

    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("dataJSON", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONFIG_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("configJSON", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdvancedTransformQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdvancedTransformQuery_argsTupleSchemeFactory());
    }

    public long start_date; // required
    public long end_date; // required
    public String dataJSON; // required
    public String configJSON; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_DATE((short)1, "start_date"),
      END_DATE((short)2, "end_date"),
      DATA_JSON((short)3, "dataJSON"),
      CONFIG_JSON((short)4, "configJSON");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_DATE
            return START_DATE;
          case 2: // END_DATE
            return END_DATE;
          case 3: // DATA_JSON
            return DATA_JSON;
          case 4: // CONFIG_JSON
            return CONFIG_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_DATE_ISSET_ID = 0;
    private static final int __END_DATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DATA_JSON, new org.apache.thrift.meta_data.FieldMetaData("dataJSON", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONFIG_JSON, new org.apache.thrift.meta_data.FieldMetaData("configJSON", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdvancedTransformQuery_args.class, metaDataMap);
    }

    public getAdvancedTransformQuery_args() {
    }

    public getAdvancedTransformQuery_args(
      long start_date,
      long end_date,
      String dataJSON,
      String configJSON)
    {
      this();
      this.start_date = start_date;
      setStart_dateIsSet(true);
      this.end_date = end_date;
      setEnd_dateIsSet(true);
      this.dataJSON = dataJSON;
      this.configJSON = configJSON;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdvancedTransformQuery_args(getAdvancedTransformQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.start_date = other.start_date;
      this.end_date = other.end_date;
      if (other.isSetDataJSON()) {
        this.dataJSON = other.dataJSON;
      }
      if (other.isSetConfigJSON()) {
        this.configJSON = other.configJSON;
      }
    }

    public getAdvancedTransformQuery_args deepCopy() {
      return new getAdvancedTransformQuery_args(this);
    }

    @Override
    public void clear() {
      setStart_dateIsSet(false);
      this.start_date = 0;
      setEnd_dateIsSet(false);
      this.end_date = 0;
      this.dataJSON = null;
      this.configJSON = null;
    }

    public long getStart_date() {
      return this.start_date;
    }

    public getAdvancedTransformQuery_args setStart_date(long start_date) {
      this.start_date = start_date;
      setStart_dateIsSet(true);
      return this;
    }

    public void unsetStart_date() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_DATE_ISSET_ID);
    }

    /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
    public boolean isSetStart_date() {
      return EncodingUtils.testBit(__isset_bitfield, __START_DATE_ISSET_ID);
    }

    public void setStart_dateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_DATE_ISSET_ID, value);
    }

    public long getEnd_date() {
      return this.end_date;
    }

    public getAdvancedTransformQuery_args setEnd_date(long end_date) {
      this.end_date = end_date;
      setEnd_dateIsSet(true);
      return this;
    }

    public void unsetEnd_date() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_DATE_ISSET_ID);
    }

    /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_date() {
      return EncodingUtils.testBit(__isset_bitfield, __END_DATE_ISSET_ID);
    }

    public void setEnd_dateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_DATE_ISSET_ID, value);
    }

    public String getDataJSON() {
      return this.dataJSON;
    }

    public getAdvancedTransformQuery_args setDataJSON(String dataJSON) {
      this.dataJSON = dataJSON;
      return this;
    }

    public void unsetDataJSON() {
      this.dataJSON = null;
    }

    /** Returns true if field dataJSON is set (has been assigned a value) and false otherwise */
    public boolean isSetDataJSON() {
      return this.dataJSON != null;
    }

    public void setDataJSONIsSet(boolean value) {
      if (!value) {
        this.dataJSON = null;
      }
    }

    public String getConfigJSON() {
      return this.configJSON;
    }

    public getAdvancedTransformQuery_args setConfigJSON(String configJSON) {
      this.configJSON = configJSON;
      return this;
    }

    public void unsetConfigJSON() {
      this.configJSON = null;
    }

    /** Returns true if field configJSON is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigJSON() {
      return this.configJSON != null;
    }

    public void setConfigJSONIsSet(boolean value) {
      if (!value) {
        this.configJSON = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_DATE:
        if (value == null) {
          unsetStart_date();
        } else {
          setStart_date((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEnd_date();
        } else {
          setEnd_date((Long)value);
        }
        break;

      case DATA_JSON:
        if (value == null) {
          unsetDataJSON();
        } else {
          setDataJSON((String)value);
        }
        break;

      case CONFIG_JSON:
        if (value == null) {
          unsetConfigJSON();
        } else {
          setConfigJSON((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_DATE:
        return Long.valueOf(getStart_date());

      case END_DATE:
        return Long.valueOf(getEnd_date());

      case DATA_JSON:
        return getDataJSON();

      case CONFIG_JSON:
        return getConfigJSON();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_DATE:
        return isSetStart_date();
      case END_DATE:
        return isSetEnd_date();
      case DATA_JSON:
        return isSetDataJSON();
      case CONFIG_JSON:
        return isSetConfigJSON();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdvancedTransformQuery_args)
        return this.equals((getAdvancedTransformQuery_args)that);
      return false;
    }

    public boolean equals(getAdvancedTransformQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_start_date = true;
      boolean that_present_start_date = true;
      if (this_present_start_date || that_present_start_date) {
        if (!(this_present_start_date && that_present_start_date))
          return false;
        if (this.start_date != that.start_date)
          return false;
      }

      boolean this_present_end_date = true;
      boolean that_present_end_date = true;
      if (this_present_end_date || that_present_end_date) {
        if (!(this_present_end_date && that_present_end_date))
          return false;
        if (this.end_date != that.end_date)
          return false;
      }

      boolean this_present_dataJSON = true && this.isSetDataJSON();
      boolean that_present_dataJSON = true && that.isSetDataJSON();
      if (this_present_dataJSON || that_present_dataJSON) {
        if (!(this_present_dataJSON && that_present_dataJSON))
          return false;
        if (!this.dataJSON.equals(that.dataJSON))
          return false;
      }

      boolean this_present_configJSON = true && this.isSetConfigJSON();
      boolean that_present_configJSON = true && that.isSetConfigJSON();
      if (this_present_configJSON || that_present_configJSON) {
        if (!(this_present_configJSON && that_present_configJSON))
          return false;
        if (!this.configJSON.equals(that.configJSON))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_start_date = true;
      list.add(present_start_date);
      if (present_start_date)
        list.add(start_date);

      boolean present_end_date = true;
      list.add(present_end_date);
      if (present_end_date)
        list.add(end_date);

      boolean present_dataJSON = true && (isSetDataJSON());
      list.add(present_dataJSON);
      if (present_dataJSON)
        list.add(dataJSON);

      boolean present_configJSON = true && (isSetConfigJSON());
      list.add(present_configJSON);
      if (present_configJSON)
        list.add(configJSON);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAdvancedTransformQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataJSON()).compareTo(other.isSetDataJSON());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataJSON()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataJSON, other.dataJSON);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigJSON()).compareTo(other.isSetConfigJSON());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigJSON()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configJSON, other.configJSON);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdvancedTransformQuery_args(");
      boolean first = true;

      sb.append("start_date:");
      sb.append(this.start_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_date:");
      sb.append(this.end_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataJSON:");
      if (this.dataJSON == null) {
        sb.append("null");
      } else {
        sb.append(this.dataJSON);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configJSON:");
      if (this.configJSON == null) {
        sb.append("null");
      } else {
        sb.append(this.configJSON);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdvancedTransformQuery_argsStandardSchemeFactory implements SchemeFactory {
      public getAdvancedTransformQuery_argsStandardScheme getScheme() {
        return new getAdvancedTransformQuery_argsStandardScheme();
      }
    }

    private static class getAdvancedTransformQuery_argsStandardScheme extends StandardScheme<getAdvancedTransformQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdvancedTransformQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start_date = iprot.readI64();
                struct.setStart_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_date = iprot.readI64();
                struct.setEnd_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataJSON = iprot.readString();
                struct.setDataJSONIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONFIG_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configJSON = iprot.readString();
                struct.setConfigJSONIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdvancedTransformQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.start_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.end_date);
        oprot.writeFieldEnd();
        if (struct.dataJSON != null) {
          oprot.writeFieldBegin(DATA_JSON_FIELD_DESC);
          oprot.writeString(struct.dataJSON);
          oprot.writeFieldEnd();
        }
        if (struct.configJSON != null) {
          oprot.writeFieldBegin(CONFIG_JSON_FIELD_DESC);
          oprot.writeString(struct.configJSON);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdvancedTransformQuery_argsTupleSchemeFactory implements SchemeFactory {
      public getAdvancedTransformQuery_argsTupleScheme getScheme() {
        return new getAdvancedTransformQuery_argsTupleScheme();
      }
    }

    private static class getAdvancedTransformQuery_argsTupleScheme extends TupleScheme<getAdvancedTransformQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdvancedTransformQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStart_date()) {
          optionals.set(0);
        }
        if (struct.isSetEnd_date()) {
          optionals.set(1);
        }
        if (struct.isSetDataJSON()) {
          optionals.set(2);
        }
        if (struct.isSetConfigJSON()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStart_date()) {
          oprot.writeI64(struct.start_date);
        }
        if (struct.isSetEnd_date()) {
          oprot.writeI64(struct.end_date);
        }
        if (struct.isSetDataJSON()) {
          oprot.writeString(struct.dataJSON);
        }
        if (struct.isSetConfigJSON()) {
          oprot.writeString(struct.configJSON);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdvancedTransformQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.start_date = iprot.readI64();
          struct.setStart_dateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.end_date = iprot.readI64();
          struct.setEnd_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataJSON = iprot.readString();
          struct.setDataJSONIsSet(true);
        }
        if (incoming.get(3)) {
          struct.configJSON = iprot.readString();
          struct.setConfigJSONIsSet(true);
        }
      }
    }

  }

  public static class getAdvancedTransformQuery_result implements org.apache.thrift.TBase<getAdvancedTransformQuery_result, getAdvancedTransformQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdvancedTransformQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdvancedTransformQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdvancedTransformQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdvancedTransformQuery_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdvancedTransformQuery_result.class, metaDataMap);
    }

    public getAdvancedTransformQuery_result() {
    }

    public getAdvancedTransformQuery_result(
      List<String> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdvancedTransformQuery_result(getAdvancedTransformQuery_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getAdvancedTransformQuery_result deepCopy() {
      return new getAdvancedTransformQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAdvancedTransformQuery_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getAdvancedTransformQuery_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdvancedTransformQuery_result)
        return this.equals((getAdvancedTransformQuery_result)that);
      return false;
    }

    public boolean equals(getAdvancedTransformQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAdvancedTransformQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdvancedTransformQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdvancedTransformQuery_resultStandardSchemeFactory implements SchemeFactory {
      public getAdvancedTransformQuery_resultStandardScheme getScheme() {
        return new getAdvancedTransformQuery_resultStandardScheme();
      }
    }

    private static class getAdvancedTransformQuery_resultStandardScheme extends StandardScheme<getAdvancedTransformQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdvancedTransformQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list652 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list652.size);
                  String _elem653;
                  for (int _i654 = 0; _i654 < _list652.size; ++_i654)
                  {
                    _elem653 = iprot.readString();
                    struct.success.add(_elem653);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdvancedTransformQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter655 : struct.success)
            {
              oprot.writeString(_iter655);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdvancedTransformQuery_resultTupleSchemeFactory implements SchemeFactory {
      public getAdvancedTransformQuery_resultTupleScheme getScheme() {
        return new getAdvancedTransformQuery_resultTupleScheme();
      }
    }

    private static class getAdvancedTransformQuery_resultTupleScheme extends TupleScheme<getAdvancedTransformQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdvancedTransformQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter656 : struct.success)
            {
              oprot.writeString(_iter656);
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdvancedTransformQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list657 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list657.size);
            String _elem658;
            for (int _i659 = 0; _i659 < _list657.size; ++_i659)
            {
              _elem658 = iprot.readString();
              struct.success.add(_elem658);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getTopNActiveKeyPrefix_args implements org.apache.thrift.TBase<getTopNActiveKeyPrefix_args, getTopNActiveKeyPrefix_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopNActiveKeyPrefix_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopNActiveKeyPrefix_args");

    private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopNActiveKeyPrefix_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopNActiveKeyPrefix_argsTupleSchemeFactory());
    }

    public int n; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N((short)1, "n");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N
            return N;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __N_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopNActiveKeyPrefix_args.class, metaDataMap);
    }

    public getTopNActiveKeyPrefix_args() {
    }

    public getTopNActiveKeyPrefix_args(
      int n)
    {
      this();
      this.n = n;
      setNIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopNActiveKeyPrefix_args(getTopNActiveKeyPrefix_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.n = other.n;
    }

    public getTopNActiveKeyPrefix_args deepCopy() {
      return new getTopNActiveKeyPrefix_args(this);
    }

    @Override
    public void clear() {
      setNIsSet(false);
      this.n = 0;
    }

    public int getN() {
      return this.n;
    }

    public getTopNActiveKeyPrefix_args setN(int n) {
      this.n = n;
      setNIsSet(true);
      return this;
    }

    public void unsetN() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __N_ISSET_ID);
    }

    /** Returns true if field n is set (has been assigned a value) and false otherwise */
    public boolean isSetN() {
      return EncodingUtils.testBit(__isset_bitfield, __N_ISSET_ID);
    }

    public void setNIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __N_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case N:
        if (value == null) {
          unsetN();
        } else {
          setN((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case N:
        return Integer.valueOf(getN());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case N:
        return isSetN();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopNActiveKeyPrefix_args)
        return this.equals((getTopNActiveKeyPrefix_args)that);
      return false;
    }

    public boolean equals(getTopNActiveKeyPrefix_args that) {
      if (that == null)
        return false;

      boolean this_present_n = true;
      boolean that_present_n = true;
      if (this_present_n || that_present_n) {
        if (!(this_present_n && that_present_n))
          return false;
        if (this.n != that.n)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_n = true;
      list.add(present_n);
      if (present_n)
        list.add(n);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTopNActiveKeyPrefix_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetN()).compareTo(other.isSetN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetN()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, other.n);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopNActiveKeyPrefix_args(");
      boolean first = true;

      sb.append("n:");
      sb.append(this.n);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopNActiveKeyPrefix_argsStandardSchemeFactory implements SchemeFactory {
      public getTopNActiveKeyPrefix_argsStandardScheme getScheme() {
        return new getTopNActiveKeyPrefix_argsStandardScheme();
      }
    }

    private static class getTopNActiveKeyPrefix_argsStandardScheme extends StandardScheme<getTopNActiveKeyPrefix_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopNActiveKeyPrefix_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.n = iprot.readI32();
                struct.setNIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopNActiveKeyPrefix_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(N_FIELD_DESC);
        oprot.writeI32(struct.n);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopNActiveKeyPrefix_argsTupleSchemeFactory implements SchemeFactory {
      public getTopNActiveKeyPrefix_argsTupleScheme getScheme() {
        return new getTopNActiveKeyPrefix_argsTupleScheme();
      }
    }

    private static class getTopNActiveKeyPrefix_argsTupleScheme extends TupleScheme<getTopNActiveKeyPrefix_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopNActiveKeyPrefix_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetN()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetN()) {
          oprot.writeI32(struct.n);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopNActiveKeyPrefix_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.n = iprot.readI32();
          struct.setNIsSet(true);
        }
      }
    }

  }

  public static class getTopNActiveKeyPrefix_result implements org.apache.thrift.TBase<getTopNActiveKeyPrefix_result, getTopNActiveKeyPrefix_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopNActiveKeyPrefix_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopNActiveKeyPrefix_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopNActiveKeyPrefix_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopNActiveKeyPrefix_resultTupleSchemeFactory());
    }

    public List<KeyStat> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyStat.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopNActiveKeyPrefix_result.class, metaDataMap);
    }

    public getTopNActiveKeyPrefix_result() {
    }

    public getTopNActiveKeyPrefix_result(
      List<KeyStat> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopNActiveKeyPrefix_result(getTopNActiveKeyPrefix_result other) {
      if (other.isSetSuccess()) {
        List<KeyStat> __this__success = new ArrayList<KeyStat>(other.success.size());
        for (KeyStat other_element : other.success) {
          __this__success.add(new KeyStat(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTopNActiveKeyPrefix_result deepCopy() {
      return new getTopNActiveKeyPrefix_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<KeyStat> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(KeyStat elem) {
      if (this.success == null) {
        this.success = new ArrayList<KeyStat>();
      }
      this.success.add(elem);
    }

    public List<KeyStat> getSuccess() {
      return this.success;
    }

    public getTopNActiveKeyPrefix_result setSuccess(List<KeyStat> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<KeyStat>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopNActiveKeyPrefix_result)
        return this.equals((getTopNActiveKeyPrefix_result)that);
      return false;
    }

    public boolean equals(getTopNActiveKeyPrefix_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTopNActiveKeyPrefix_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopNActiveKeyPrefix_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopNActiveKeyPrefix_resultStandardSchemeFactory implements SchemeFactory {
      public getTopNActiveKeyPrefix_resultStandardScheme getScheme() {
        return new getTopNActiveKeyPrefix_resultStandardScheme();
      }
    }

    private static class getTopNActiveKeyPrefix_resultStandardScheme extends StandardScheme<getTopNActiveKeyPrefix_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopNActiveKeyPrefix_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list660 = iprot.readListBegin();
                  struct.success = new ArrayList<KeyStat>(_list660.size);
                  KeyStat _elem661;
                  for (int _i662 = 0; _i662 < _list660.size; ++_i662)
                  {
                    _elem661 = new KeyStat();
                    _elem661.read(iprot);
                    struct.success.add(_elem661);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopNActiveKeyPrefix_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (KeyStat _iter663 : struct.success)
            {
              _iter663.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopNActiveKeyPrefix_resultTupleSchemeFactory implements SchemeFactory {
      public getTopNActiveKeyPrefix_resultTupleScheme getScheme() {
        return new getTopNActiveKeyPrefix_resultTupleScheme();
      }
    }

    private static class getTopNActiveKeyPrefix_resultTupleScheme extends TupleScheme<getTopNActiveKeyPrefix_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopNActiveKeyPrefix_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (KeyStat _iter664 : struct.success)
            {
              _iter664.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopNActiveKeyPrefix_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list665 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<KeyStat>(_list665.size);
            KeyStat _elem666;
            for (int _i667 = 0; _i667 < _list665.size; ++_i667)
            {
              _elem666 = new KeyStat();
              _elem666.read(iprot);
              struct.success.add(_elem666);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setMultipleOdsValues_args implements org.apache.thrift.TBase<setMultipleOdsValues_args, setMultipleOdsValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<setMultipleOdsValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMultipleOdsValues_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMultipleOdsValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMultipleOdsValues_argsTupleSchemeFactory());
    }

    public List<ODSValue> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMultipleOdsValues_args.class, metaDataMap);
    }

    public setMultipleOdsValues_args() {
    }

    public setMultipleOdsValues_args(
      List<ODSValue> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMultipleOdsValues_args(setMultipleOdsValues_args other) {
      if (other.isSetData()) {
        List<ODSValue> __this__data = new ArrayList<ODSValue>(other.data.size());
        for (ODSValue other_element : other.data) {
          __this__data.add(new ODSValue(other_element));
        }
        this.data = __this__data;
      }
    }

    public setMultipleOdsValues_args deepCopy() {
      return new setMultipleOdsValues_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSValue> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSValue elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSValue>();
      }
      this.data.add(elem);
    }

    public List<ODSValue> getData() {
      return this.data;
    }

    public setMultipleOdsValues_args setData(List<ODSValue> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMultipleOdsValues_args)
        return this.equals((setMultipleOdsValues_args)that);
      return false;
    }

    public boolean equals(setMultipleOdsValues_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setMultipleOdsValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMultipleOdsValues_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMultipleOdsValues_argsStandardSchemeFactory implements SchemeFactory {
      public setMultipleOdsValues_argsStandardScheme getScheme() {
        return new setMultipleOdsValues_argsStandardScheme();
      }
    }

    private static class setMultipleOdsValues_argsStandardScheme extends StandardScheme<setMultipleOdsValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMultipleOdsValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list668 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSValue>(_list668.size);
                  ODSValue _elem669;
                  for (int _i670 = 0; _i670 < _list668.size; ++_i670)
                  {
                    _elem669 = new ODSValue();
                    _elem669.read(iprot);
                    struct.data.add(_elem669);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMultipleOdsValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSValue _iter671 : struct.data)
            {
              _iter671.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMultipleOdsValues_argsTupleSchemeFactory implements SchemeFactory {
      public setMultipleOdsValues_argsTupleScheme getScheme() {
        return new setMultipleOdsValues_argsTupleScheme();
      }
    }

    private static class setMultipleOdsValues_argsTupleScheme extends TupleScheme<setMultipleOdsValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMultipleOdsValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSValue _iter672 : struct.data)
            {
              _iter672.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMultipleOdsValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list673 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSValue>(_list673.size);
            ODSValue _elem674;
            for (int _i675 = 0; _i675 < _list673.size; ++_i675)
            {
              _elem674 = new ODSValue();
              _elem674.read(iprot);
              struct.data.add(_elem674);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setMultipleOdsValues_result implements org.apache.thrift.TBase<setMultipleOdsValues_result, setMultipleOdsValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<setMultipleOdsValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMultipleOdsValues_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMultipleOdsValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMultipleOdsValues_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMultipleOdsValues_result.class, metaDataMap);
    }

    public setMultipleOdsValues_result() {
    }

    public setMultipleOdsValues_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMultipleOdsValues_result(setMultipleOdsValues_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setMultipleOdsValues_result deepCopy() {
      return new setMultipleOdsValues_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setMultipleOdsValues_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMultipleOdsValues_result)
        return this.equals((setMultipleOdsValues_result)that);
      return false;
    }

    public boolean equals(setMultipleOdsValues_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setMultipleOdsValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMultipleOdsValues_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMultipleOdsValues_resultStandardSchemeFactory implements SchemeFactory {
      public setMultipleOdsValues_resultStandardScheme getScheme() {
        return new setMultipleOdsValues_resultStandardScheme();
      }
    }

    private static class setMultipleOdsValues_resultStandardScheme extends StandardScheme<setMultipleOdsValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMultipleOdsValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMultipleOdsValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMultipleOdsValues_resultTupleSchemeFactory implements SchemeFactory {
      public setMultipleOdsValues_resultTupleScheme getScheme() {
        return new setMultipleOdsValues_resultTupleScheme();
      }
    }

    private static class setMultipleOdsValues_resultTupleScheme extends TupleScheme<setMultipleOdsValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMultipleOdsValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMultipleOdsValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setODSData_args implements org.apache.thrift.TBase<setODSData_args, setODSData_args._Fields>, java.io.Serializable, Cloneable, Comparable<setODSData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setODSData_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setODSData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setODSData_argsTupleSchemeFactory());
    }

    public List<ODSData> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setODSData_args.class, metaDataMap);
    }

    public setODSData_args() {
    }

    public setODSData_args(
      List<ODSData> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setODSData_args(setODSData_args other) {
      if (other.isSetData()) {
        List<ODSData> __this__data = new ArrayList<ODSData>(other.data.size());
        for (ODSData other_element : other.data) {
          __this__data.add(new ODSData(other_element));
        }
        this.data = __this__data;
      }
    }

    public setODSData_args deepCopy() {
      return new setODSData_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSData> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSData elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSData>();
      }
      this.data.add(elem);
    }

    public List<ODSData> getData() {
      return this.data;
    }

    public setODSData_args setData(List<ODSData> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setODSData_args)
        return this.equals((setODSData_args)that);
      return false;
    }

    public boolean equals(setODSData_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setODSData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setODSData_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setODSData_argsStandardSchemeFactory implements SchemeFactory {
      public setODSData_argsStandardScheme getScheme() {
        return new setODSData_argsStandardScheme();
      }
    }

    private static class setODSData_argsStandardScheme extends StandardScheme<setODSData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setODSData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list676 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSData>(_list676.size);
                  ODSData _elem677;
                  for (int _i678 = 0; _i678 < _list676.size; ++_i678)
                  {
                    _elem677 = new ODSData();
                    _elem677.read(iprot);
                    struct.data.add(_elem677);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setODSData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSData _iter679 : struct.data)
            {
              _iter679.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setODSData_argsTupleSchemeFactory implements SchemeFactory {
      public setODSData_argsTupleScheme getScheme() {
        return new setODSData_argsTupleScheme();
      }
    }

    private static class setODSData_argsTupleScheme extends TupleScheme<setODSData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setODSData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSData _iter680 : struct.data)
            {
              _iter680.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setODSData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list681 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSData>(_list681.size);
            ODSData _elem682;
            for (int _i683 = 0; _i683 < _list681.size; ++_i683)
            {
              _elem682 = new ODSData();
              _elem682.read(iprot);
              struct.data.add(_elem682);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setODSData_result implements org.apache.thrift.TBase<setODSData_result, setODSData_result._Fields>, java.io.Serializable, Cloneable, Comparable<setODSData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setODSData_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setODSData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setODSData_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setODSData_result.class, metaDataMap);
    }

    public setODSData_result() {
    }

    public setODSData_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setODSData_result(setODSData_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setODSData_result deepCopy() {
      return new setODSData_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setODSData_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setODSData_result)
        return this.equals((setODSData_result)that);
      return false;
    }

    public boolean equals(setODSData_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setODSData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setODSData_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setODSData_resultStandardSchemeFactory implements SchemeFactory {
      public setODSData_resultStandardScheme getScheme() {
        return new setODSData_resultStandardScheme();
      }
    }

    private static class setODSData_resultStandardScheme extends StandardScheme<setODSData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setODSData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setODSData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setODSData_resultTupleSchemeFactory implements SchemeFactory {
      public setODSData_resultTupleScheme getScheme() {
        return new setODSData_resultTupleScheme();
      }
    }

    private static class setODSData_resultTupleScheme extends TupleScheme<setODSData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setODSData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setODSData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsFbagentHostData_args implements org.apache.thrift.TBase<setOdsFbagentHostData_args, setOdsFbagentHostData_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsFbagentHostData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsFbagentHostData_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsFbagentHostData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsFbagentHostData_argsTupleSchemeFactory());
    }

    public List<ODSFbagentData> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSFbagentData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsFbagentHostData_args.class, metaDataMap);
    }

    public setOdsFbagentHostData_args() {
    }

    public setOdsFbagentHostData_args(
      List<ODSFbagentData> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsFbagentHostData_args(setOdsFbagentHostData_args other) {
      if (other.isSetData()) {
        List<ODSFbagentData> __this__data = new ArrayList<ODSFbagentData>(other.data.size());
        for (ODSFbagentData other_element : other.data) {
          __this__data.add(new ODSFbagentData(other_element));
        }
        this.data = __this__data;
      }
    }

    public setOdsFbagentHostData_args deepCopy() {
      return new setOdsFbagentHostData_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSFbagentData> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSFbagentData elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSFbagentData>();
      }
      this.data.add(elem);
    }

    public List<ODSFbagentData> getData() {
      return this.data;
    }

    public setOdsFbagentHostData_args setData(List<ODSFbagentData> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSFbagentData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsFbagentHostData_args)
        return this.equals((setOdsFbagentHostData_args)that);
      return false;
    }

    public boolean equals(setOdsFbagentHostData_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsFbagentHostData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsFbagentHostData_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsFbagentHostData_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsFbagentHostData_argsStandardScheme getScheme() {
        return new setOdsFbagentHostData_argsStandardScheme();
      }
    }

    private static class setOdsFbagentHostData_argsStandardScheme extends StandardScheme<setOdsFbagentHostData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsFbagentHostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list684 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSFbagentData>(_list684.size);
                  ODSFbagentData _elem685;
                  for (int _i686 = 0; _i686 < _list684.size; ++_i686)
                  {
                    _elem685 = new ODSFbagentData();
                    _elem685.read(iprot);
                    struct.data.add(_elem685);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsFbagentHostData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSFbagentData _iter687 : struct.data)
            {
              _iter687.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsFbagentHostData_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsFbagentHostData_argsTupleScheme getScheme() {
        return new setOdsFbagentHostData_argsTupleScheme();
      }
    }

    private static class setOdsFbagentHostData_argsTupleScheme extends TupleScheme<setOdsFbagentHostData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentHostData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSFbagentData _iter688 : struct.data)
            {
              _iter688.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentHostData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list689 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSFbagentData>(_list689.size);
            ODSFbagentData _elem690;
            for (int _i691 = 0; _i691 < _list689.size; ++_i691)
            {
              _elem690 = new ODSFbagentData();
              _elem690.read(iprot);
              struct.data.add(_elem690);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class setOdsFbagentHostData_result implements org.apache.thrift.TBase<setOdsFbagentHostData_result, setOdsFbagentHostData_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsFbagentHostData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsFbagentHostData_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsFbagentHostData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsFbagentHostData_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsFbagentHostData_result.class, metaDataMap);
    }

    public setOdsFbagentHostData_result() {
    }

    public setOdsFbagentHostData_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsFbagentHostData_result(setOdsFbagentHostData_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsFbagentHostData_result deepCopy() {
      return new setOdsFbagentHostData_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsFbagentHostData_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsFbagentHostData_result)
        return this.equals((setOdsFbagentHostData_result)that);
      return false;
    }

    public boolean equals(setOdsFbagentHostData_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsFbagentHostData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsFbagentHostData_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsFbagentHostData_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsFbagentHostData_resultStandardScheme getScheme() {
        return new setOdsFbagentHostData_resultStandardScheme();
      }
    }

    private static class setOdsFbagentHostData_resultStandardScheme extends StandardScheme<setOdsFbagentHostData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsFbagentHostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsFbagentHostData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsFbagentHostData_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsFbagentHostData_resultTupleScheme getScheme() {
        return new setOdsFbagentHostData_resultTupleScheme();
      }
    }

    private static class setOdsFbagentHostData_resultTupleScheme extends TupleScheme<setOdsFbagentHostData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentHostData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentHostData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class setOdsFbagentData_args implements org.apache.thrift.TBase<setOdsFbagentData_args, setOdsFbagentData_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsFbagentData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsFbagentData_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SKIPHOSTDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("skiphostdata", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsFbagentData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsFbagentData_argsTupleSchemeFactory());
    }

    public List<ODSFbagentData> data; // required
    public boolean skiphostdata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data"),
      SKIPHOSTDATA((short)2, "skiphostdata");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          case 2: // SKIPHOSTDATA
            return SKIPHOSTDATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SKIPHOSTDATA_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ODSFbagentData.class))));
      tmpMap.put(_Fields.SKIPHOSTDATA, new org.apache.thrift.meta_data.FieldMetaData("skiphostdata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsFbagentData_args.class, metaDataMap);
    }

    public setOdsFbagentData_args() {
    }

    public setOdsFbagentData_args(
      List<ODSFbagentData> data,
      boolean skiphostdata)
    {
      this();
      this.data = data;
      this.skiphostdata = skiphostdata;
      setSkiphostdataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsFbagentData_args(setOdsFbagentData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetData()) {
        List<ODSFbagentData> __this__data = new ArrayList<ODSFbagentData>(other.data.size());
        for (ODSFbagentData other_element : other.data) {
          __this__data.add(new ODSFbagentData(other_element));
        }
        this.data = __this__data;
      }
      this.skiphostdata = other.skiphostdata;
    }

    public setOdsFbagentData_args deepCopy() {
      return new setOdsFbagentData_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
      setSkiphostdataIsSet(false);
      this.skiphostdata = false;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<ODSFbagentData> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(ODSFbagentData elem) {
      if (this.data == null) {
        this.data = new ArrayList<ODSFbagentData>();
      }
      this.data.add(elem);
    }

    public List<ODSFbagentData> getData() {
      return this.data;
    }

    public setOdsFbagentData_args setData(List<ODSFbagentData> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public boolean isSkiphostdata() {
      return this.skiphostdata;
    }

    public setOdsFbagentData_args setSkiphostdata(boolean skiphostdata) {
      this.skiphostdata = skiphostdata;
      setSkiphostdataIsSet(true);
      return this;
    }

    public void unsetSkiphostdata() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIPHOSTDATA_ISSET_ID);
    }

    /** Returns true if field skiphostdata is set (has been assigned a value) and false otherwise */
    public boolean isSetSkiphostdata() {
      return EncodingUtils.testBit(__isset_bitfield, __SKIPHOSTDATA_ISSET_ID);
    }

    public void setSkiphostdataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIPHOSTDATA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<ODSFbagentData>)value);
        }
        break;

      case SKIPHOSTDATA:
        if (value == null) {
          unsetSkiphostdata();
        } else {
          setSkiphostdata((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      case SKIPHOSTDATA:
        return Boolean.valueOf(isSkiphostdata());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      case SKIPHOSTDATA:
        return isSetSkiphostdata();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsFbagentData_args)
        return this.equals((setOdsFbagentData_args)that);
      return false;
    }

    public boolean equals(setOdsFbagentData_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_skiphostdata = true;
      boolean that_present_skiphostdata = true;
      if (this_present_skiphostdata || that_present_skiphostdata) {
        if (!(this_present_skiphostdata && that_present_skiphostdata))
          return false;
        if (this.skiphostdata != that.skiphostdata)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      boolean present_skiphostdata = true;
      list.add(present_skiphostdata);
      if (present_skiphostdata)
        list.add(skiphostdata);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsFbagentData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSkiphostdata()).compareTo(other.isSetSkiphostdata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkiphostdata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skiphostdata, other.skiphostdata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsFbagentData_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("skiphostdata:");
      sb.append(this.skiphostdata);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsFbagentData_argsStandardSchemeFactory implements SchemeFactory {
      public setOdsFbagentData_argsStandardScheme getScheme() {
        return new setOdsFbagentData_argsStandardScheme();
      }
    }

    private static class setOdsFbagentData_argsStandardScheme extends StandardScheme<setOdsFbagentData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsFbagentData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list692 = iprot.readListBegin();
                  struct.data = new ArrayList<ODSFbagentData>(_list692.size);
                  ODSFbagentData _elem693;
                  for (int _i694 = 0; _i694 < _list692.size; ++_i694)
                  {
                    _elem693 = new ODSFbagentData();
                    _elem693.read(iprot);
                    struct.data.add(_elem693);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SKIPHOSTDATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.skiphostdata = iprot.readBool();
                struct.setSkiphostdataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsFbagentData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (ODSFbagentData _iter695 : struct.data)
            {
              _iter695.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SKIPHOSTDATA_FIELD_DESC);
        oprot.writeBool(struct.skiphostdata);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsFbagentData_argsTupleSchemeFactory implements SchemeFactory {
      public setOdsFbagentData_argsTupleScheme getScheme() {
        return new setOdsFbagentData_argsTupleScheme();
      }
    }

    private static class setOdsFbagentData_argsTupleScheme extends TupleScheme<setOdsFbagentData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        if (struct.isSetSkiphostdata()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (ODSFbagentData _iter696 : struct.data)
            {
              _iter696.write(oprot);
            }
          }
        }
        if (struct.isSetSkiphostdata()) {
          oprot.writeBool(struct.skiphostdata);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list697 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.data = new ArrayList<ODSFbagentData>(_list697.size);
            ODSFbagentData _elem698;
            for (int _i699 = 0; _i699 < _list697.size; ++_i699)
            {
              _elem698 = new ODSFbagentData();
              _elem698.read(iprot);
              struct.data.add(_elem698);
            }
          }
          struct.setDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.skiphostdata = iprot.readBool();
          struct.setSkiphostdataIsSet(true);
        }
      }
    }

  }

  public static class setOdsFbagentData_result implements org.apache.thrift.TBase<setOdsFbagentData_result, setOdsFbagentData_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOdsFbagentData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOdsFbagentData_result");

    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOdsFbagentData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOdsFbagentData_resultTupleSchemeFactory());
    }

    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOdsFbagentData_result.class, metaDataMap);
    }

    public setOdsFbagentData_result() {
    }

    public setOdsFbagentData_result(
      OdsException oe)
    {
      this();
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOdsFbagentData_result(setOdsFbagentData_result other) {
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public setOdsFbagentData_result deepCopy() {
      return new setOdsFbagentData_result(this);
    }

    @Override
    public void clear() {
      this.oe = null;
    }

    public OdsException getOe() {
      return this.oe;
    }

    public setOdsFbagentData_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOdsFbagentData_result)
        return this.equals((setOdsFbagentData_result)that);
      return false;
    }

    public boolean equals(setOdsFbagentData_result that) {
      if (that == null)
        return false;

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOdsFbagentData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOdsFbagentData_result(");
      boolean first = true;

      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOdsFbagentData_resultStandardSchemeFactory implements SchemeFactory {
      public setOdsFbagentData_resultStandardScheme getScheme() {
        return new setOdsFbagentData_resultStandardScheme();
      }
    }

    private static class setOdsFbagentData_resultStandardScheme extends StandardScheme<setOdsFbagentData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOdsFbagentData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOdsFbagentData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOdsFbagentData_resultTupleSchemeFactory implements SchemeFactory {
      public setOdsFbagentData_resultTupleScheme getScheme() {
        return new setOdsFbagentData_resultTupleScheme();
      }
    }

    private static class setOdsFbagentData_resultTupleScheme extends TupleScheme<setOdsFbagentData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOdsFbagentData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getEntityNames_args implements org.apache.thrift.TBase<getEntityNames_args, getEntityNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityNames_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityNames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityNames_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityNames_args.class, metaDataMap);
    }

    public getEntityNames_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityNames_args(getEntityNames_args other) {
    }

    public getEntityNames_args deepCopy() {
      return new getEntityNames_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityNames_args)
        return this.equals((getEntityNames_args)that);
      return false;
    }

    public boolean equals(getEntityNames_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityNames_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityNames_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityNames_argsStandardScheme getScheme() {
        return new getEntityNames_argsStandardScheme();
      }
    }

    private static class getEntityNames_argsStandardScheme extends StandardScheme<getEntityNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityNames_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityNames_argsTupleScheme getScheme() {
        return new getEntityNames_argsTupleScheme();
      }
    }

    private static class getEntityNames_argsTupleScheme extends TupleScheme<getEntityNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getEntityNames_result implements org.apache.thrift.TBase<getEntityNames_result, getEntityNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityNames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityNames_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityNames_result.class, metaDataMap);
    }

    public getEntityNames_result() {
    }

    public getEntityNames_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityNames_result(getEntityNames_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getEntityNames_result deepCopy() {
      return new getEntityNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getEntityNames_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityNames_result)
        return this.equals((getEntityNames_result)that);
      return false;
    }

    public boolean equals(getEntityNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityNames_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityNames_resultStandardScheme getScheme() {
        return new getEntityNames_resultStandardScheme();
      }
    }

    private static class getEntityNames_resultStandardScheme extends StandardScheme<getEntityNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list700 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list700.size);
                  String _elem701;
                  for (int _i702 = 0; _i702 < _list700.size; ++_i702)
                  {
                    _elem701 = iprot.readString();
                    struct.success.add(_elem701);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter703 : struct.success)
            {
              oprot.writeString(_iter703);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityNames_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityNames_resultTupleScheme getScheme() {
        return new getEntityNames_resultTupleScheme();
      }
    }

    private static class getEntityNames_resultTupleScheme extends TupleScheme<getEntityNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter704 : struct.success)
            {
              oprot.writeString(_iter704);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list705 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list705.size);
            String _elem706;
            for (int _i707 = 0; _i707 < _list705.size; ++_i707)
            {
              _elem706 = iprot.readString();
              struct.success.add(_elem706);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getKeyNames_args implements org.apache.thrift.TBase<getKeyNames_args, getKeyNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getKeyNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeyNames_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeyNames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeyNames_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeyNames_args.class, metaDataMap);
    }

    public getKeyNames_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeyNames_args(getKeyNames_args other) {
    }

    public getKeyNames_args deepCopy() {
      return new getKeyNames_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeyNames_args)
        return this.equals((getKeyNames_args)that);
      return false;
    }

    public boolean equals(getKeyNames_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeyNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeyNames_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeyNames_argsStandardSchemeFactory implements SchemeFactory {
      public getKeyNames_argsStandardScheme getScheme() {
        return new getKeyNames_argsStandardScheme();
      }
    }

    private static class getKeyNames_argsStandardScheme extends StandardScheme<getKeyNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeyNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeyNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeyNames_argsTupleSchemeFactory implements SchemeFactory {
      public getKeyNames_argsTupleScheme getScheme() {
        return new getKeyNames_argsTupleScheme();
      }
    }

    private static class getKeyNames_argsTupleScheme extends TupleScheme<getKeyNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeyNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeyNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getKeyNames_result implements org.apache.thrift.TBase<getKeyNames_result, getKeyNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getKeyNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeyNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeyNames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeyNames_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeyNames_result.class, metaDataMap);
    }

    public getKeyNames_result() {
    }

    public getKeyNames_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeyNames_result(getKeyNames_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getKeyNames_result deepCopy() {
      return new getKeyNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getKeyNames_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeyNames_result)
        return this.equals((getKeyNames_result)that);
      return false;
    }

    public boolean equals(getKeyNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeyNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeyNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeyNames_resultStandardSchemeFactory implements SchemeFactory {
      public getKeyNames_resultStandardScheme getScheme() {
        return new getKeyNames_resultStandardScheme();
      }
    }

    private static class getKeyNames_resultStandardScheme extends StandardScheme<getKeyNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeyNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list708 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list708.size);
                  String _elem709;
                  for (int _i710 = 0; _i710 < _list708.size; ++_i710)
                  {
                    _elem709 = iprot.readString();
                    struct.success.add(_elem709);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeyNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter711 : struct.success)
            {
              oprot.writeString(_iter711);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeyNames_resultTupleSchemeFactory implements SchemeFactory {
      public getKeyNames_resultTupleScheme getScheme() {
        return new getKeyNames_resultTupleScheme();
      }
    }

    private static class getKeyNames_resultTupleScheme extends TupleScheme<getKeyNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeyNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter712 : struct.success)
            {
              oprot.writeString(_iter712);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeyNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list713 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list713.size);
            String _elem714;
            for (int _i715 = 0; _i715 < _list713.size; ++_i715)
            {
              _elem714 = iprot.readString();
              struct.success.add(_elem714);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getKeyMapping_args implements org.apache.thrift.TBase<getKeyMapping_args, getKeyMapping_args._Fields>, java.io.Serializable, Cloneable, Comparable<getKeyMapping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeyMapping_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField MINUTES_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("minutes_back", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeyMapping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeyMapping_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public long minutes_back; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      MINUTES_BACK((short)2, "minutes_back");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // MINUTES_BACK
            return MINUTES_BACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINUTES_BACK_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MINUTES_BACK, new org.apache.thrift.meta_data.FieldMetaData("minutes_back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeyMapping_args.class, metaDataMap);
    }

    public getKeyMapping_args() {
    }

    public getKeyMapping_args(
      List<String> entities,
      long minutes_back)
    {
      this();
      this.entities = entities;
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeyMapping_args(getKeyMapping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      this.minutes_back = other.minutes_back;
    }

    public getKeyMapping_args deepCopy() {
      return new getKeyMapping_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      setMinutes_backIsSet(false);
      this.minutes_back = 0;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getKeyMapping_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public long getMinutes_back() {
      return this.minutes_back;
    }

    public getKeyMapping_args setMinutes_back(long minutes_back) {
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      return this;
    }

    public void unsetMinutes_back() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    /** Returns true if field minutes_back is set (has been assigned a value) and false otherwise */
    public boolean isSetMinutes_back() {
      return EncodingUtils.testBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    public void setMinutes_backIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case MINUTES_BACK:
        if (value == null) {
          unsetMinutes_back();
        } else {
          setMinutes_back((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case MINUTES_BACK:
        return Long.valueOf(getMinutes_back());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case MINUTES_BACK:
        return isSetMinutes_back();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeyMapping_args)
        return this.equals((getKeyMapping_args)that);
      return false;
    }

    public boolean equals(getKeyMapping_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_minutes_back = true;
      boolean that_present_minutes_back = true;
      if (this_present_minutes_back || that_present_minutes_back) {
        if (!(this_present_minutes_back && that_present_minutes_back))
          return false;
        if (this.minutes_back != that.minutes_back)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_minutes_back = true;
      list.add(present_minutes_back);
      if (present_minutes_back)
        list.add(minutes_back);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeyMapping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinutes_back()).compareTo(other.isSetMinutes_back());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinutes_back()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minutes_back, other.minutes_back);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeyMapping_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minutes_back:");
      sb.append(this.minutes_back);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeyMapping_argsStandardSchemeFactory implements SchemeFactory {
      public getKeyMapping_argsStandardScheme getScheme() {
        return new getKeyMapping_argsStandardScheme();
      }
    }

    private static class getKeyMapping_argsStandardScheme extends StandardScheme<getKeyMapping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeyMapping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list716 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list716.size);
                  String _elem717;
                  for (int _i718 = 0; _i718 < _list716.size; ++_i718)
                  {
                    _elem717 = iprot.readString();
                    struct.entities.add(_elem717);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MINUTES_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.minutes_back = iprot.readI64();
                struct.setMinutes_backIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeyMapping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter719 : struct.entities)
            {
              oprot.writeString(_iter719);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MINUTES_BACK_FIELD_DESC);
        oprot.writeI64(struct.minutes_back);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeyMapping_argsTupleSchemeFactory implements SchemeFactory {
      public getKeyMapping_argsTupleScheme getScheme() {
        return new getKeyMapping_argsTupleScheme();
      }
    }

    private static class getKeyMapping_argsTupleScheme extends TupleScheme<getKeyMapping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeyMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetMinutes_back()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter720 : struct.entities)
            {
              oprot.writeString(_iter720);
            }
          }
        }
        if (struct.isSetMinutes_back()) {
          oprot.writeI64(struct.minutes_back);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeyMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list721 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list721.size);
            String _elem722;
            for (int _i723 = 0; _i723 < _list721.size; ++_i723)
            {
              _elem722 = iprot.readString();
              struct.entities.add(_elem722);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minutes_back = iprot.readI64();
          struct.setMinutes_backIsSet(true);
        }
      }
    }

  }

  public static class getKeyMapping_result implements org.apache.thrift.TBase<getKeyMapping_result, getKeyMapping_result._Fields>, java.io.Serializable, Cloneable, Comparable<getKeyMapping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeyMapping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeyMapping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeyMapping_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeyMapping_result.class, metaDataMap);
    }

    public getKeyMapping_result() {
    }

    public getKeyMapping_result(
      Map<String,List<String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeyMapping_result(getKeyMapping_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new HashMap<String,List<String>>(other.success.size());
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getKeyMapping_result deepCopy() {
      return new getKeyMapping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public getKeyMapping_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeyMapping_result)
        return this.equals((getKeyMapping_result)that);
      return false;
    }

    public boolean equals(getKeyMapping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeyMapping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeyMapping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeyMapping_resultStandardSchemeFactory implements SchemeFactory {
      public getKeyMapping_resultStandardScheme getScheme() {
        return new getKeyMapping_resultStandardScheme();
      }
    }

    private static class getKeyMapping_resultStandardScheme extends StandardScheme<getKeyMapping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeyMapping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map724 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<String>>(2*_map724.size);
                  String _key725;
                  List<String> _val726;
                  for (int _i727 = 0; _i727 < _map724.size; ++_i727)
                  {
                    _key725 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list728 = iprot.readListBegin();
                      _val726 = new ArrayList<String>(_list728.size);
                      String _elem729;
                      for (int _i730 = 0; _i730 < _list728.size; ++_i730)
                      {
                        _elem729 = iprot.readString();
                        _val726.add(_elem729);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key725, _val726);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeyMapping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter731 : struct.success.entrySet())
            {
              oprot.writeString(_iter731.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter731.getValue().size()));
                for (String _iter732 : _iter731.getValue())
                {
                  oprot.writeString(_iter732);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeyMapping_resultTupleSchemeFactory implements SchemeFactory {
      public getKeyMapping_resultTupleScheme getScheme() {
        return new getKeyMapping_resultTupleScheme();
      }
    }

    private static class getKeyMapping_resultTupleScheme extends TupleScheme<getKeyMapping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeyMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter733 : struct.success.entrySet())
            {
              oprot.writeString(_iter733.getKey());
              {
                oprot.writeI32(_iter733.getValue().size());
                for (String _iter734 : _iter733.getValue())
                {
                  oprot.writeString(_iter734);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeyMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map735 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<String>>(2*_map735.size);
            String _key736;
            List<String> _val737;
            for (int _i738 = 0; _i738 < _map735.size; ++_i738)
            {
              _key736 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list739 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val737 = new ArrayList<String>(_list739.size);
                String _elem740;
                for (int _i741 = 0; _i741 < _list739.size; ++_i741)
                {
                  _elem740 = iprot.readString();
                  _val737.add(_elem740);
                }
              }
              struct.success.put(_key736, _val737);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntityMapping_args implements org.apache.thrift.TBase<getEntityMapping_args, getEntityMapping_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityMapping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityMapping_args");

    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField MINUTES_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("minutes_back", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityMapping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityMapping_argsTupleSchemeFactory());
    }

    public List<String> keys; // required
    public long minutes_back; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYS((short)1, "keys"),
      MINUTES_BACK((short)2, "minutes_back");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYS
            return KEYS;
          case 2: // MINUTES_BACK
            return MINUTES_BACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINUTES_BACK_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MINUTES_BACK, new org.apache.thrift.meta_data.FieldMetaData("minutes_back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityMapping_args.class, metaDataMap);
    }

    public getEntityMapping_args() {
    }

    public getEntityMapping_args(
      List<String> keys,
      long minutes_back)
    {
      this();
      this.keys = keys;
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityMapping_args(getEntityMapping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.minutes_back = other.minutes_back;
    }

    public getEntityMapping_args deepCopy() {
      return new getEntityMapping_args(this);
    }

    @Override
    public void clear() {
      this.keys = null;
      setMinutes_backIsSet(false);
      this.minutes_back = 0;
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getEntityMapping_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public long getMinutes_back() {
      return this.minutes_back;
    }

    public getEntityMapping_args setMinutes_back(long minutes_back) {
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      return this;
    }

    public void unsetMinutes_back() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    /** Returns true if field minutes_back is set (has been assigned a value) and false otherwise */
    public boolean isSetMinutes_back() {
      return EncodingUtils.testBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    public void setMinutes_backIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case MINUTES_BACK:
        if (value == null) {
          unsetMinutes_back();
        } else {
          setMinutes_back((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYS:
        return getKeys();

      case MINUTES_BACK:
        return Long.valueOf(getMinutes_back());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYS:
        return isSetKeys();
      case MINUTES_BACK:
        return isSetMinutes_back();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityMapping_args)
        return this.equals((getEntityMapping_args)that);
      return false;
    }

    public boolean equals(getEntityMapping_args that) {
      if (that == null)
        return false;

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_minutes_back = true;
      boolean that_present_minutes_back = true;
      if (this_present_minutes_back || that_present_minutes_back) {
        if (!(this_present_minutes_back && that_present_minutes_back))
          return false;
        if (this.minutes_back != that.minutes_back)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_minutes_back = true;
      list.add(present_minutes_back);
      if (present_minutes_back)
        list.add(minutes_back);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityMapping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinutes_back()).compareTo(other.isSetMinutes_back());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinutes_back()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minutes_back, other.minutes_back);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityMapping_args(");
      boolean first = true;

      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minutes_back:");
      sb.append(this.minutes_back);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityMapping_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityMapping_argsStandardScheme getScheme() {
        return new getEntityMapping_argsStandardScheme();
      }
    }

    private static class getEntityMapping_argsStandardScheme extends StandardScheme<getEntityMapping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityMapping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list742 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list742.size);
                  String _elem743;
                  for (int _i744 = 0; _i744 < _list742.size; ++_i744)
                  {
                    _elem743 = iprot.readString();
                    struct.keys.add(_elem743);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MINUTES_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.minutes_back = iprot.readI64();
                struct.setMinutes_backIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityMapping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter745 : struct.keys)
            {
              oprot.writeString(_iter745);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MINUTES_BACK_FIELD_DESC);
        oprot.writeI64(struct.minutes_back);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityMapping_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityMapping_argsTupleScheme getScheme() {
        return new getEntityMapping_argsTupleScheme();
      }
    }

    private static class getEntityMapping_argsTupleScheme extends TupleScheme<getEntityMapping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeys()) {
          optionals.set(0);
        }
        if (struct.isSetMinutes_back()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter746 : struct.keys)
            {
              oprot.writeString(_iter746);
            }
          }
        }
        if (struct.isSetMinutes_back()) {
          oprot.writeI64(struct.minutes_back);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list747 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list747.size);
            String _elem748;
            for (int _i749 = 0; _i749 < _list747.size; ++_i749)
            {
              _elem748 = iprot.readString();
              struct.keys.add(_elem748);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minutes_back = iprot.readI64();
          struct.setMinutes_backIsSet(true);
        }
      }
    }

  }

  public static class getEntityMapping_result implements org.apache.thrift.TBase<getEntityMapping_result, getEntityMapping_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityMapping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityMapping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityMapping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityMapping_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityMapping_result.class, metaDataMap);
    }

    public getEntityMapping_result() {
    }

    public getEntityMapping_result(
      Map<String,List<String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityMapping_result(getEntityMapping_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new HashMap<String,List<String>>(other.success.size());
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getEntityMapping_result deepCopy() {
      return new getEntityMapping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public getEntityMapping_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityMapping_result)
        return this.equals((getEntityMapping_result)that);
      return false;
    }

    public boolean equals(getEntityMapping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityMapping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityMapping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityMapping_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityMapping_resultStandardScheme getScheme() {
        return new getEntityMapping_resultStandardScheme();
      }
    }

    private static class getEntityMapping_resultStandardScheme extends StandardScheme<getEntityMapping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityMapping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map750 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<String>>(2*_map750.size);
                  String _key751;
                  List<String> _val752;
                  for (int _i753 = 0; _i753 < _map750.size; ++_i753)
                  {
                    _key751 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list754 = iprot.readListBegin();
                      _val752 = new ArrayList<String>(_list754.size);
                      String _elem755;
                      for (int _i756 = 0; _i756 < _list754.size; ++_i756)
                      {
                        _elem755 = iprot.readString();
                        _val752.add(_elem755);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key751, _val752);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityMapping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter757 : struct.success.entrySet())
            {
              oprot.writeString(_iter757.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter757.getValue().size()));
                for (String _iter758 : _iter757.getValue())
                {
                  oprot.writeString(_iter758);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityMapping_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityMapping_resultTupleScheme getScheme() {
        return new getEntityMapping_resultTupleScheme();
      }
    }

    private static class getEntityMapping_resultTupleScheme extends TupleScheme<getEntityMapping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter759 : struct.success.entrySet())
            {
              oprot.writeString(_iter759.getKey());
              {
                oprot.writeI32(_iter759.getValue().size());
                for (String _iter760 : _iter759.getValue())
                {
                  oprot.writeString(_iter760);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map761 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<String>>(2*_map761.size);
            String _key762;
            List<String> _val763;
            for (int _i764 = 0; _i764 < _map761.size; ++_i764)
            {
              _key762 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val763 = new ArrayList<String>(_list765.size);
                String _elem766;
                for (int _i767 = 0; _i767 < _list765.size; ++_i767)
                {
                  _elem766 = iprot.readString();
                  _val763.add(_elem766);
                }
              }
              struct.success.put(_key762, _val763);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAggregateEntityNames_args implements org.apache.thrift.TBase<getAggregateEntityNames_args, getAggregateEntityNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAggregateEntityNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAggregateEntityNames_args");

    private static final org.apache.thrift.protocol.TField REGEXP_FIELD_DESC = new org.apache.thrift.protocol.TField("regexp", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAggregateEntityNames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAggregateEntityNames_argsTupleSchemeFactory());
    }

    public String regexp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGEXP((short)1, "regexp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGEXP
            return REGEXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGEXP, new org.apache.thrift.meta_data.FieldMetaData("regexp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAggregateEntityNames_args.class, metaDataMap);
    }

    public getAggregateEntityNames_args() {
    }

    public getAggregateEntityNames_args(
      String regexp)
    {
      this();
      this.regexp = regexp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAggregateEntityNames_args(getAggregateEntityNames_args other) {
      if (other.isSetRegexp()) {
        this.regexp = other.regexp;
      }
    }

    public getAggregateEntityNames_args deepCopy() {
      return new getAggregateEntityNames_args(this);
    }

    @Override
    public void clear() {
      this.regexp = null;
    }

    public String getRegexp() {
      return this.regexp;
    }

    public getAggregateEntityNames_args setRegexp(String regexp) {
      this.regexp = regexp;
      return this;
    }

    public void unsetRegexp() {
      this.regexp = null;
    }

    /** Returns true if field regexp is set (has been assigned a value) and false otherwise */
    public boolean isSetRegexp() {
      return this.regexp != null;
    }

    public void setRegexpIsSet(boolean value) {
      if (!value) {
        this.regexp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGEXP:
        if (value == null) {
          unsetRegexp();
        } else {
          setRegexp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGEXP:
        return getRegexp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGEXP:
        return isSetRegexp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAggregateEntityNames_args)
        return this.equals((getAggregateEntityNames_args)that);
      return false;
    }

    public boolean equals(getAggregateEntityNames_args that) {
      if (that == null)
        return false;

      boolean this_present_regexp = true && this.isSetRegexp();
      boolean that_present_regexp = true && that.isSetRegexp();
      if (this_present_regexp || that_present_regexp) {
        if (!(this_present_regexp && that_present_regexp))
          return false;
        if (!this.regexp.equals(that.regexp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_regexp = true && (isSetRegexp());
      list.add(present_regexp);
      if (present_regexp)
        list.add(regexp);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAggregateEntityNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegexp()).compareTo(other.isSetRegexp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegexp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regexp, other.regexp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAggregateEntityNames_args(");
      boolean first = true;

      sb.append("regexp:");
      if (this.regexp == null) {
        sb.append("null");
      } else {
        sb.append(this.regexp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAggregateEntityNames_argsStandardSchemeFactory implements SchemeFactory {
      public getAggregateEntityNames_argsStandardScheme getScheme() {
        return new getAggregateEntityNames_argsStandardScheme();
      }
    }

    private static class getAggregateEntityNames_argsStandardScheme extends StandardScheme<getAggregateEntityNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAggregateEntityNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGEXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regexp = iprot.readString();
                struct.setRegexpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAggregateEntityNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.regexp != null) {
          oprot.writeFieldBegin(REGEXP_FIELD_DESC);
          oprot.writeString(struct.regexp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAggregateEntityNames_argsTupleSchemeFactory implements SchemeFactory {
      public getAggregateEntityNames_argsTupleScheme getScheme() {
        return new getAggregateEntityNames_argsTupleScheme();
      }
    }

    private static class getAggregateEntityNames_argsTupleScheme extends TupleScheme<getAggregateEntityNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAggregateEntityNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegexp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegexp()) {
          oprot.writeString(struct.regexp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAggregateEntityNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.regexp = iprot.readString();
          struct.setRegexpIsSet(true);
        }
      }
    }

  }

  public static class getAggregateEntityNames_result implements org.apache.thrift.TBase<getAggregateEntityNames_result, getAggregateEntityNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAggregateEntityNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAggregateEntityNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAggregateEntityNames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAggregateEntityNames_resultTupleSchemeFactory());
    }

    public Set<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAggregateEntityNames_result.class, metaDataMap);
    }

    public getAggregateEntityNames_result() {
    }

    public getAggregateEntityNames_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAggregateEntityNames_result(getAggregateEntityNames_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>(other.success);
        this.success = __this__success;
      }
    }

    public getAggregateEntityNames_result deepCopy() {
      return new getAggregateEntityNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public getAggregateEntityNames_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAggregateEntityNames_result)
        return this.equals((getAggregateEntityNames_result)that);
      return false;
    }

    public boolean equals(getAggregateEntityNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAggregateEntityNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAggregateEntityNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAggregateEntityNames_resultStandardSchemeFactory implements SchemeFactory {
      public getAggregateEntityNames_resultStandardScheme getScheme() {
        return new getAggregateEntityNames_resultStandardScheme();
      }
    }

    private static class getAggregateEntityNames_resultStandardScheme extends StandardScheme<getAggregateEntityNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAggregateEntityNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set768 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set768.size);
                  String _elem769;
                  for (int _i770 = 0; _i770 < _set768.size; ++_i770)
                  {
                    _elem769 = iprot.readString();
                    struct.success.add(_elem769);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAggregateEntityNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter771 : struct.success)
            {
              oprot.writeString(_iter771);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAggregateEntityNames_resultTupleSchemeFactory implements SchemeFactory {
      public getAggregateEntityNames_resultTupleScheme getScheme() {
        return new getAggregateEntityNames_resultTupleScheme();
      }
    }

    private static class getAggregateEntityNames_resultTupleScheme extends TupleScheme<getAggregateEntityNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAggregateEntityNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter772 : struct.success)
            {
              oprot.writeString(_iter772);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAggregateEntityNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set773 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set773.size);
            String _elem774;
            for (int _i775 = 0; _i775 < _set773.size; ++_i775)
            {
              _elem774 = iprot.readString();
              struct.success.add(_elem774);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMapping_args implements org.apache.thrift.TBase<getMapping_args, getMapping_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMapping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMapping_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField MINUTES_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("minutes_back", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField GET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("get_key", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMapping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMapping_argsTupleSchemeFactory());
    }

    public List<String> entities; // required
    public long minutes_back; // required
    public boolean get_key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities"),
      MINUTES_BACK((short)2, "minutes_back"),
      GET_KEY((short)3, "get_key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          case 2: // MINUTES_BACK
            return MINUTES_BACK;
          case 3: // GET_KEY
            return GET_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINUTES_BACK_ISSET_ID = 0;
    private static final int __GET_KEY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MINUTES_BACK, new org.apache.thrift.meta_data.FieldMetaData("minutes_back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GET_KEY, new org.apache.thrift.meta_data.FieldMetaData("get_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMapping_args.class, metaDataMap);
    }

    public getMapping_args() {
    }

    public getMapping_args(
      List<String> entities,
      long minutes_back,
      boolean get_key)
    {
      this();
      this.entities = entities;
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      this.get_key = get_key;
      setGet_keyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMapping_args(getMapping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      this.minutes_back = other.minutes_back;
      this.get_key = other.get_key;
    }

    public getMapping_args deepCopy() {
      return new getMapping_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
      setMinutes_backIsSet(false);
      this.minutes_back = 0;
      setGet_keyIsSet(false);
      this.get_key = false;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getMapping_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public long getMinutes_back() {
      return this.minutes_back;
    }

    public getMapping_args setMinutes_back(long minutes_back) {
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      return this;
    }

    public void unsetMinutes_back() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    /** Returns true if field minutes_back is set (has been assigned a value) and false otherwise */
    public boolean isSetMinutes_back() {
      return EncodingUtils.testBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    public void setMinutes_backIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID, value);
    }

    public boolean isGet_key() {
      return this.get_key;
    }

    public getMapping_args setGet_key(boolean get_key) {
      this.get_key = get_key;
      setGet_keyIsSet(true);
      return this;
    }

    public void unsetGet_key() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GET_KEY_ISSET_ID);
    }

    /** Returns true if field get_key is set (has been assigned a value) and false otherwise */
    public boolean isSetGet_key() {
      return EncodingUtils.testBit(__isset_bitfield, __GET_KEY_ISSET_ID);
    }

    public void setGet_keyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GET_KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case MINUTES_BACK:
        if (value == null) {
          unsetMinutes_back();
        } else {
          setMinutes_back((Long)value);
        }
        break;

      case GET_KEY:
        if (value == null) {
          unsetGet_key();
        } else {
          setGet_key((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      case MINUTES_BACK:
        return Long.valueOf(getMinutes_back());

      case GET_KEY:
        return Boolean.valueOf(isGet_key());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      case MINUTES_BACK:
        return isSetMinutes_back();
      case GET_KEY:
        return isSetGet_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMapping_args)
        return this.equals((getMapping_args)that);
      return false;
    }

    public boolean equals(getMapping_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_minutes_back = true;
      boolean that_present_minutes_back = true;
      if (this_present_minutes_back || that_present_minutes_back) {
        if (!(this_present_minutes_back && that_present_minutes_back))
          return false;
        if (this.minutes_back != that.minutes_back)
          return false;
      }

      boolean this_present_get_key = true;
      boolean that_present_get_key = true;
      if (this_present_get_key || that_present_get_key) {
        if (!(this_present_get_key && that_present_get_key))
          return false;
        if (this.get_key != that.get_key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_minutes_back = true;
      list.add(present_minutes_back);
      if (present_minutes_back)
        list.add(minutes_back);

      boolean present_get_key = true;
      list.add(present_get_key);
      if (present_get_key)
        list.add(get_key);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMapping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinutes_back()).compareTo(other.isSetMinutes_back());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinutes_back()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minutes_back, other.minutes_back);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGet_key()).compareTo(other.isSetGet_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGet_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_key, other.get_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMapping_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minutes_back:");
      sb.append(this.minutes_back);
      first = false;
      if (!first) sb.append(", ");
      sb.append("get_key:");
      sb.append(this.get_key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMapping_argsStandardSchemeFactory implements SchemeFactory {
      public getMapping_argsStandardScheme getScheme() {
        return new getMapping_argsStandardScheme();
      }
    }

    private static class getMapping_argsStandardScheme extends StandardScheme<getMapping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMapping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list776 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list776.size);
                  String _elem777;
                  for (int _i778 = 0; _i778 < _list776.size; ++_i778)
                  {
                    _elem777 = iprot.readString();
                    struct.entities.add(_elem777);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MINUTES_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.minutes_back = iprot.readI64();
                struct.setMinutes_backIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.get_key = iprot.readBool();
                struct.setGet_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMapping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter779 : struct.entities)
            {
              oprot.writeString(_iter779);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MINUTES_BACK_FIELD_DESC);
        oprot.writeI64(struct.minutes_back);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GET_KEY_FIELD_DESC);
        oprot.writeBool(struct.get_key);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMapping_argsTupleSchemeFactory implements SchemeFactory {
      public getMapping_argsTupleScheme getScheme() {
        return new getMapping_argsTupleScheme();
      }
    }

    private static class getMapping_argsTupleScheme extends TupleScheme<getMapping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        if (struct.isSetMinutes_back()) {
          optionals.set(1);
        }
        if (struct.isSetGet_key()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter780 : struct.entities)
            {
              oprot.writeString(_iter780);
            }
          }
        }
        if (struct.isSetMinutes_back()) {
          oprot.writeI64(struct.minutes_back);
        }
        if (struct.isSetGet_key()) {
          oprot.writeBool(struct.get_key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list781.size);
            String _elem782;
            for (int _i783 = 0; _i783 < _list781.size; ++_i783)
            {
              _elem782 = iprot.readString();
              struct.entities.add(_elem782);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minutes_back = iprot.readI64();
          struct.setMinutes_backIsSet(true);
        }
        if (incoming.get(2)) {
          struct.get_key = iprot.readBool();
          struct.setGet_keyIsSet(true);
        }
      }
    }

  }

  public static class getMapping_result implements org.apache.thrift.TBase<getMapping_result, getMapping_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMapping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMapping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMapping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMapping_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMapping_result.class, metaDataMap);
    }

    public getMapping_result() {
    }

    public getMapping_result(
      Map<String,List<String>> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMapping_result(getMapping_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new HashMap<String,List<String>>(other.success.size());
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getMapping_result deepCopy() {
      return new getMapping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public getMapping_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getMapping_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMapping_result)
        return this.equals((getMapping_result)that);
      return false;
    }

    public boolean equals(getMapping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMapping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMapping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMapping_resultStandardSchemeFactory implements SchemeFactory {
      public getMapping_resultStandardScheme getScheme() {
        return new getMapping_resultStandardScheme();
      }
    }

    private static class getMapping_resultStandardScheme extends StandardScheme<getMapping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMapping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map784 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<String>>(2*_map784.size);
                  String _key785;
                  List<String> _val786;
                  for (int _i787 = 0; _i787 < _map784.size; ++_i787)
                  {
                    _key785 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list788 = iprot.readListBegin();
                      _val786 = new ArrayList<String>(_list788.size);
                      String _elem789;
                      for (int _i790 = 0; _i790 < _list788.size; ++_i790)
                      {
                        _elem789 = iprot.readString();
                        _val786.add(_elem789);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key785, _val786);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMapping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter791 : struct.success.entrySet())
            {
              oprot.writeString(_iter791.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter791.getValue().size()));
                for (String _iter792 : _iter791.getValue())
                {
                  oprot.writeString(_iter792);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMapping_resultTupleSchemeFactory implements SchemeFactory {
      public getMapping_resultTupleScheme getScheme() {
        return new getMapping_resultTupleScheme();
      }
    }

    private static class getMapping_resultTupleScheme extends TupleScheme<getMapping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter793 : struct.success.entrySet())
            {
              oprot.writeString(_iter793.getKey());
              {
                oprot.writeI32(_iter793.getValue().size());
                for (String _iter794 : _iter793.getValue())
                {
                  oprot.writeString(_iter794);
                }
              }
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map795 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<String>>(2*_map795.size);
            String _key796;
            List<String> _val797;
            for (int _i798 = 0; _i798 < _map795.size; ++_i798)
            {
              _key796 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list799 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val797 = new ArrayList<String>(_list799.size);
                String _elem800;
                for (int _i801 = 0; _i801 < _list799.size; ++_i801)
                {
                  _elem800 = iprot.readString();
                  _val797.add(_elem800);
                }
              }
              struct.success.put(_key796, _val797);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getCorrespondingKeys_args implements org.apache.thrift.TBase<getCorrespondingKeys_args, getCorrespondingKeys_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCorrespondingKeys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCorrespondingKeys_args");

    private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MINUTES_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("minutes_back", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCorrespondingKeys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCorrespondingKeys_argsTupleSchemeFactory());
    }

    public List<String> keywords; // required
    public List<String> entities; // required
    public int minutes_back; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORDS((short)1, "keywords"),
      ENTITIES((short)2, "entities"),
      MINUTES_BACK((short)3, "minutes_back"),
      LIMIT((short)4, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORDS
            return KEYWORDS;
          case 2: // ENTITIES
            return ENTITIES;
          case 3: // MINUTES_BACK
            return MINUTES_BACK;
          case 4: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINUTES_BACK_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MINUTES_BACK, new org.apache.thrift.meta_data.FieldMetaData("minutes_back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCorrespondingKeys_args.class, metaDataMap);
    }

    public getCorrespondingKeys_args() {
    }

    public getCorrespondingKeys_args(
      List<String> keywords,
      List<String> entities,
      int minutes_back,
      int limit)
    {
      this();
      this.keywords = keywords;
      this.entities = entities;
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCorrespondingKeys_args(getCorrespondingKeys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeywords()) {
        List<String> __this__keywords = new ArrayList<String>(other.keywords);
        this.keywords = __this__keywords;
      }
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      this.minutes_back = other.minutes_back;
      this.limit = other.limit;
    }

    public getCorrespondingKeys_args deepCopy() {
      return new getCorrespondingKeys_args(this);
    }

    @Override
    public void clear() {
      this.keywords = null;
      this.entities = null;
      setMinutes_backIsSet(false);
      this.minutes_back = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public int getKeywordsSize() {
      return (this.keywords == null) ? 0 : this.keywords.size();
    }

    public java.util.Iterator<String> getKeywordsIterator() {
      return (this.keywords == null) ? null : this.keywords.iterator();
    }

    public void addToKeywords(String elem) {
      if (this.keywords == null) {
        this.keywords = new ArrayList<String>();
      }
      this.keywords.add(elem);
    }

    public List<String> getKeywords() {
      return this.keywords;
    }

    public getCorrespondingKeys_args setKeywords(List<String> keywords) {
      this.keywords = keywords;
      return this;
    }

    public void unsetKeywords() {
      this.keywords = null;
    }

    /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
    public boolean isSetKeywords() {
      return this.keywords != null;
    }

    public void setKeywordsIsSet(boolean value) {
      if (!value) {
        this.keywords = null;
      }
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public getCorrespondingKeys_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getMinutes_back() {
      return this.minutes_back;
    }

    public getCorrespondingKeys_args setMinutes_back(int minutes_back) {
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      return this;
    }

    public void unsetMinutes_back() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    /** Returns true if field minutes_back is set (has been assigned a value) and false otherwise */
    public boolean isSetMinutes_back() {
      return EncodingUtils.testBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    public void setMinutes_backIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public getCorrespondingKeys_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORDS:
        if (value == null) {
          unsetKeywords();
        } else {
          setKeywords((List<String>)value);
        }
        break;

      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case MINUTES_BACK:
        if (value == null) {
          unsetMinutes_back();
        } else {
          setMinutes_back((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORDS:
        return getKeywords();

      case ENTITIES:
        return getEntities();

      case MINUTES_BACK:
        return Integer.valueOf(getMinutes_back());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORDS:
        return isSetKeywords();
      case ENTITIES:
        return isSetEntities();
      case MINUTES_BACK:
        return isSetMinutes_back();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCorrespondingKeys_args)
        return this.equals((getCorrespondingKeys_args)that);
      return false;
    }

    public boolean equals(getCorrespondingKeys_args that) {
      if (that == null)
        return false;

      boolean this_present_keywords = true && this.isSetKeywords();
      boolean that_present_keywords = true && that.isSetKeywords();
      if (this_present_keywords || that_present_keywords) {
        if (!(this_present_keywords && that_present_keywords))
          return false;
        if (!this.keywords.equals(that.keywords))
          return false;
      }

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_minutes_back = true;
      boolean that_present_minutes_back = true;
      if (this_present_minutes_back || that_present_minutes_back) {
        if (!(this_present_minutes_back && that_present_minutes_back))
          return false;
        if (this.minutes_back != that.minutes_back)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keywords = true && (isSetKeywords());
      list.add(present_keywords);
      if (present_keywords)
        list.add(keywords);

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_minutes_back = true;
      list.add(present_minutes_back);
      if (present_minutes_back)
        list.add(minutes_back);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCorrespondingKeys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeywords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinutes_back()).compareTo(other.isSetMinutes_back());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinutes_back()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minutes_back, other.minutes_back);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCorrespondingKeys_args(");
      boolean first = true;

      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minutes_back:");
      sb.append(this.minutes_back);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCorrespondingKeys_argsStandardSchemeFactory implements SchemeFactory {
      public getCorrespondingKeys_argsStandardScheme getScheme() {
        return new getCorrespondingKeys_argsStandardScheme();
      }
    }

    private static class getCorrespondingKeys_argsStandardScheme extends StandardScheme<getCorrespondingKeys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCorrespondingKeys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list802 = iprot.readListBegin();
                  struct.keywords = new ArrayList<String>(_list802.size);
                  String _elem803;
                  for (int _i804 = 0; _i804 < _list802.size; ++_i804)
                  {
                    _elem803 = iprot.readString();
                    struct.keywords.add(_elem803);
                  }
                  iprot.readListEnd();
                }
                struct.setKeywordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list805 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list805.size);
                  String _elem806;
                  for (int _i807 = 0; _i807 < _list805.size; ++_i807)
                  {
                    _elem806 = iprot.readString();
                    struct.entities.add(_elem806);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MINUTES_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.minutes_back = iprot.readI32();
                struct.setMinutes_backIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCorrespondingKeys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keywords != null) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keywords.size()));
            for (String _iter808 : struct.keywords)
            {
              oprot.writeString(_iter808);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter809 : struct.entities)
            {
              oprot.writeString(_iter809);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MINUTES_BACK_FIELD_DESC);
        oprot.writeI32(struct.minutes_back);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCorrespondingKeys_argsTupleSchemeFactory implements SchemeFactory {
      public getCorrespondingKeys_argsTupleScheme getScheme() {
        return new getCorrespondingKeys_argsTupleScheme();
      }
    }

    private static class getCorrespondingKeys_argsTupleScheme extends TupleScheme<getCorrespondingKeys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCorrespondingKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeywords()) {
          optionals.set(0);
        }
        if (struct.isSetEntities()) {
          optionals.set(1);
        }
        if (struct.isSetMinutes_back()) {
          optionals.set(2);
        }
        if (struct.isSetLimit()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKeywords()) {
          {
            oprot.writeI32(struct.keywords.size());
            for (String _iter810 : struct.keywords)
            {
              oprot.writeString(_iter810);
            }
          }
        }
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter811 : struct.entities)
            {
              oprot.writeString(_iter811);
            }
          }
        }
        if (struct.isSetMinutes_back()) {
          oprot.writeI32(struct.minutes_back);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCorrespondingKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list812 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keywords = new ArrayList<String>(_list812.size);
            String _elem813;
            for (int _i814 = 0; _i814 < _list812.size; ++_i814)
            {
              _elem813 = iprot.readString();
              struct.keywords.add(_elem813);
            }
          }
          struct.setKeywordsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list815 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list815.size);
            String _elem816;
            for (int _i817 = 0; _i817 < _list815.size; ++_i817)
            {
              _elem816 = iprot.readString();
              struct.entities.add(_elem816);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.minutes_back = iprot.readI32();
          struct.setMinutes_backIsSet(true);
        }
        if (incoming.get(3)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getCorrespondingKeys_result implements org.apache.thrift.TBase<getCorrespondingKeys_result, getCorrespondingKeys_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCorrespondingKeys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCorrespondingKeys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCorrespondingKeys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCorrespondingKeys_resultTupleSchemeFactory());
    }

    public OdsKeyEntityMapperResult success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsKeyEntityMapperResult.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCorrespondingKeys_result.class, metaDataMap);
    }

    public getCorrespondingKeys_result() {
    }

    public getCorrespondingKeys_result(
      OdsKeyEntityMapperResult success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCorrespondingKeys_result(getCorrespondingKeys_result other) {
      if (other.isSetSuccess()) {
        this.success = new OdsKeyEntityMapperResult(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getCorrespondingKeys_result deepCopy() {
      return new getCorrespondingKeys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public OdsKeyEntityMapperResult getSuccess() {
      return this.success;
    }

    public getCorrespondingKeys_result setSuccess(OdsKeyEntityMapperResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getCorrespondingKeys_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OdsKeyEntityMapperResult)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCorrespondingKeys_result)
        return this.equals((getCorrespondingKeys_result)that);
      return false;
    }

    public boolean equals(getCorrespondingKeys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCorrespondingKeys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCorrespondingKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCorrespondingKeys_resultStandardSchemeFactory implements SchemeFactory {
      public getCorrespondingKeys_resultStandardScheme getScheme() {
        return new getCorrespondingKeys_resultStandardScheme();
      }
    }

    private static class getCorrespondingKeys_resultStandardScheme extends StandardScheme<getCorrespondingKeys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCorrespondingKeys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OdsKeyEntityMapperResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCorrespondingKeys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCorrespondingKeys_resultTupleSchemeFactory implements SchemeFactory {
      public getCorrespondingKeys_resultTupleScheme getScheme() {
        return new getCorrespondingKeys_resultTupleScheme();
      }
    }

    private static class getCorrespondingKeys_resultTupleScheme extends TupleScheme<getCorrespondingKeys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCorrespondingKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCorrespondingKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OdsKeyEntityMapperResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getCorrespondingEntities_args implements org.apache.thrift.TBase<getCorrespondingEntities_args, getCorrespondingEntities_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCorrespondingEntities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCorrespondingEntities_args");

    private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MINUTES_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("minutes_back", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCorrespondingEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCorrespondingEntities_argsTupleSchemeFactory());
    }

    public List<String> keywords; // required
    public List<String> keys; // required
    public int minutes_back; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORDS((short)1, "keywords"),
      KEYS((short)2, "keys"),
      MINUTES_BACK((short)3, "minutes_back"),
      LIMIT((short)4, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORDS
            return KEYWORDS;
          case 2: // KEYS
            return KEYS;
          case 3: // MINUTES_BACK
            return MINUTES_BACK;
          case 4: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINUTES_BACK_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MINUTES_BACK, new org.apache.thrift.meta_data.FieldMetaData("minutes_back", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCorrespondingEntities_args.class, metaDataMap);
    }

    public getCorrespondingEntities_args() {
    }

    public getCorrespondingEntities_args(
      List<String> keywords,
      List<String> keys,
      int minutes_back,
      int limit)
    {
      this();
      this.keywords = keywords;
      this.keys = keys;
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCorrespondingEntities_args(getCorrespondingEntities_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeywords()) {
        List<String> __this__keywords = new ArrayList<String>(other.keywords);
        this.keywords = __this__keywords;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.minutes_back = other.minutes_back;
      this.limit = other.limit;
    }

    public getCorrespondingEntities_args deepCopy() {
      return new getCorrespondingEntities_args(this);
    }

    @Override
    public void clear() {
      this.keywords = null;
      this.keys = null;
      setMinutes_backIsSet(false);
      this.minutes_back = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public int getKeywordsSize() {
      return (this.keywords == null) ? 0 : this.keywords.size();
    }

    public java.util.Iterator<String> getKeywordsIterator() {
      return (this.keywords == null) ? null : this.keywords.iterator();
    }

    public void addToKeywords(String elem) {
      if (this.keywords == null) {
        this.keywords = new ArrayList<String>();
      }
      this.keywords.add(elem);
    }

    public List<String> getKeywords() {
      return this.keywords;
    }

    public getCorrespondingEntities_args setKeywords(List<String> keywords) {
      this.keywords = keywords;
      return this;
    }

    public void unsetKeywords() {
      this.keywords = null;
    }

    /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
    public boolean isSetKeywords() {
      return this.keywords != null;
    }

    public void setKeywordsIsSet(boolean value) {
      if (!value) {
        this.keywords = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public getCorrespondingEntities_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public int getMinutes_back() {
      return this.minutes_back;
    }

    public getCorrespondingEntities_args setMinutes_back(int minutes_back) {
      this.minutes_back = minutes_back;
      setMinutes_backIsSet(true);
      return this;
    }

    public void unsetMinutes_back() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    /** Returns true if field minutes_back is set (has been assigned a value) and false otherwise */
    public boolean isSetMinutes_back() {
      return EncodingUtils.testBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID);
    }

    public void setMinutes_backIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUTES_BACK_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public getCorrespondingEntities_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORDS:
        if (value == null) {
          unsetKeywords();
        } else {
          setKeywords((List<String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case MINUTES_BACK:
        if (value == null) {
          unsetMinutes_back();
        } else {
          setMinutes_back((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORDS:
        return getKeywords();

      case KEYS:
        return getKeys();

      case MINUTES_BACK:
        return Integer.valueOf(getMinutes_back());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORDS:
        return isSetKeywords();
      case KEYS:
        return isSetKeys();
      case MINUTES_BACK:
        return isSetMinutes_back();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCorrespondingEntities_args)
        return this.equals((getCorrespondingEntities_args)that);
      return false;
    }

    public boolean equals(getCorrespondingEntities_args that) {
      if (that == null)
        return false;

      boolean this_present_keywords = true && this.isSetKeywords();
      boolean that_present_keywords = true && that.isSetKeywords();
      if (this_present_keywords || that_present_keywords) {
        if (!(this_present_keywords && that_present_keywords))
          return false;
        if (!this.keywords.equals(that.keywords))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_minutes_back = true;
      boolean that_present_minutes_back = true;
      if (this_present_minutes_back || that_present_minutes_back) {
        if (!(this_present_minutes_back && that_present_minutes_back))
          return false;
        if (this.minutes_back != that.minutes_back)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keywords = true && (isSetKeywords());
      list.add(present_keywords);
      if (present_keywords)
        list.add(keywords);

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_minutes_back = true;
      list.add(present_minutes_back);
      if (present_minutes_back)
        list.add(minutes_back);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCorrespondingEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeywords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinutes_back()).compareTo(other.isSetMinutes_back());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinutes_back()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minutes_back, other.minutes_back);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCorrespondingEntities_args(");
      boolean first = true;

      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minutes_back:");
      sb.append(this.minutes_back);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCorrespondingEntities_argsStandardSchemeFactory implements SchemeFactory {
      public getCorrespondingEntities_argsStandardScheme getScheme() {
        return new getCorrespondingEntities_argsStandardScheme();
      }
    }

    private static class getCorrespondingEntities_argsStandardScheme extends StandardScheme<getCorrespondingEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCorrespondingEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list818 = iprot.readListBegin();
                  struct.keywords = new ArrayList<String>(_list818.size);
                  String _elem819;
                  for (int _i820 = 0; _i820 < _list818.size; ++_i820)
                  {
                    _elem819 = iprot.readString();
                    struct.keywords.add(_elem819);
                  }
                  iprot.readListEnd();
                }
                struct.setKeywordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list821 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list821.size);
                  String _elem822;
                  for (int _i823 = 0; _i823 < _list821.size; ++_i823)
                  {
                    _elem822 = iprot.readString();
                    struct.keys.add(_elem822);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MINUTES_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.minutes_back = iprot.readI32();
                struct.setMinutes_backIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCorrespondingEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keywords != null) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keywords.size()));
            for (String _iter824 : struct.keywords)
            {
              oprot.writeString(_iter824);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter825 : struct.keys)
            {
              oprot.writeString(_iter825);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MINUTES_BACK_FIELD_DESC);
        oprot.writeI32(struct.minutes_back);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCorrespondingEntities_argsTupleSchemeFactory implements SchemeFactory {
      public getCorrespondingEntities_argsTupleScheme getScheme() {
        return new getCorrespondingEntities_argsTupleScheme();
      }
    }

    private static class getCorrespondingEntities_argsTupleScheme extends TupleScheme<getCorrespondingEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCorrespondingEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeywords()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetMinutes_back()) {
          optionals.set(2);
        }
        if (struct.isSetLimit()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKeywords()) {
          {
            oprot.writeI32(struct.keywords.size());
            for (String _iter826 : struct.keywords)
            {
              oprot.writeString(_iter826);
            }
          }
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter827 : struct.keys)
            {
              oprot.writeString(_iter827);
            }
          }
        }
        if (struct.isSetMinutes_back()) {
          oprot.writeI32(struct.minutes_back);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCorrespondingEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list828 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keywords = new ArrayList<String>(_list828.size);
            String _elem829;
            for (int _i830 = 0; _i830 < _list828.size; ++_i830)
            {
              _elem829 = iprot.readString();
              struct.keywords.add(_elem829);
            }
          }
          struct.setKeywordsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list831 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list831.size);
            String _elem832;
            for (int _i833 = 0; _i833 < _list831.size; ++_i833)
            {
              _elem832 = iprot.readString();
              struct.keys.add(_elem832);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.minutes_back = iprot.readI32();
          struct.setMinutes_backIsSet(true);
        }
        if (incoming.get(3)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getCorrespondingEntities_result implements org.apache.thrift.TBase<getCorrespondingEntities_result, getCorrespondingEntities_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCorrespondingEntities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCorrespondingEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCorrespondingEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCorrespondingEntities_resultTupleSchemeFactory());
    }

    public OdsKeyEntityMapperResult success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsKeyEntityMapperResult.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCorrespondingEntities_result.class, metaDataMap);
    }

    public getCorrespondingEntities_result() {
    }

    public getCorrespondingEntities_result(
      OdsKeyEntityMapperResult success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCorrespondingEntities_result(getCorrespondingEntities_result other) {
      if (other.isSetSuccess()) {
        this.success = new OdsKeyEntityMapperResult(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getCorrespondingEntities_result deepCopy() {
      return new getCorrespondingEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public OdsKeyEntityMapperResult getSuccess() {
      return this.success;
    }

    public getCorrespondingEntities_result setSuccess(OdsKeyEntityMapperResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getCorrespondingEntities_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OdsKeyEntityMapperResult)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCorrespondingEntities_result)
        return this.equals((getCorrespondingEntities_result)that);
      return false;
    }

    public boolean equals(getCorrespondingEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCorrespondingEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCorrespondingEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCorrespondingEntities_resultStandardSchemeFactory implements SchemeFactory {
      public getCorrespondingEntities_resultStandardScheme getScheme() {
        return new getCorrespondingEntities_resultStandardScheme();
      }
    }

    private static class getCorrespondingEntities_resultStandardScheme extends StandardScheme<getCorrespondingEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCorrespondingEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OdsKeyEntityMapperResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCorrespondingEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCorrespondingEntities_resultTupleSchemeFactory implements SchemeFactory {
      public getCorrespondingEntities_resultTupleScheme getScheme() {
        return new getCorrespondingEntities_resultTupleScheme();
      }
    }

    private static class getCorrespondingEntities_resultTupleScheme extends TupleScheme<getCorrespondingEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCorrespondingEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCorrespondingEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OdsKeyEntityMapperResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getEntitiesByTypeAndRegexs_args implements org.apache.thrift.TBase<getEntitiesByTypeAndRegexs_args, getEntitiesByTypeAndRegexs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntitiesByTypeAndRegexs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntitiesByTypeAndRegexs_args");

    private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entity_type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)-1);
    private static final org.apache.thrift.protocol.TField ORDERING_FIELD_DESC = new org.apache.thrift.protocol.TField("ordering", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField REGEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("regexes", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntitiesByTypeAndRegexs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntitiesByTypeAndRegexs_argsTupleSchemeFactory());
    }

    public int entity_type; // required
    public int limit; // required
    /**
     * 
     * @see OdsEntityOrderByType
     */
    public OdsEntityOrderByType ordering; // required
    public List<String> regexes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_TYPE((short)1, "entity_type"),
      LIMIT((short)-1, "limit"),
      /**
       * 
       * @see OdsEntityOrderByType
       */
      ORDERING((short)3, "ordering"),
      REGEXES((short)4, "regexes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_TYPE
            return ENTITY_TYPE;
          case -1: // LIMIT
            return LIMIT;
          case 3: // ORDERING
            return ORDERING;
          case 4: // REGEXES
            return REGEXES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTITY_TYPE_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entity_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDERING, new org.apache.thrift.meta_data.FieldMetaData("ordering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsEntityOrderByType.class)));
      tmpMap.put(_Fields.REGEXES, new org.apache.thrift.meta_data.FieldMetaData("regexes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntitiesByTypeAndRegexs_args.class, metaDataMap);
    }

    public getEntitiesByTypeAndRegexs_args() {
    }

    public getEntitiesByTypeAndRegexs_args(
      int entity_type,
      int limit,
      OdsEntityOrderByType ordering,
      List<String> regexes)
    {
      this();
      this.entity_type = entity_type;
      setEntity_typeIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
      this.ordering = ordering;
      this.regexes = regexes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntitiesByTypeAndRegexs_args(getEntitiesByTypeAndRegexs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.entity_type = other.entity_type;
      this.limit = other.limit;
      if (other.isSetOrdering()) {
        this.ordering = other.ordering;
      }
      if (other.isSetRegexes()) {
        List<String> __this__regexes = new ArrayList<String>(other.regexes);
        this.regexes = __this__regexes;
      }
    }

    public getEntitiesByTypeAndRegexs_args deepCopy() {
      return new getEntitiesByTypeAndRegexs_args(this);
    }

    @Override
    public void clear() {
      setEntity_typeIsSet(false);
      this.entity_type = 0;
      setLimitIsSet(false);
      this.limit = 0;
      this.ordering = null;
      this.regexes = null;
    }

    public int getEntity_type() {
      return this.entity_type;
    }

    public getEntitiesByTypeAndRegexs_args setEntity_type(int entity_type) {
      this.entity_type = entity_type;
      setEntity_typeIsSet(true);
      return this;
    }

    public void unsetEntity_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITY_TYPE_ISSET_ID);
    }

    /** Returns true if field entity_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity_type() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTITY_TYPE_ISSET_ID);
    }

    public void setEntity_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITY_TYPE_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public getEntitiesByTypeAndRegexs_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    /**
     * 
     * @see OdsEntityOrderByType
     */
    public OdsEntityOrderByType getOrdering() {
      return this.ordering;
    }

    /**
     * 
     * @see OdsEntityOrderByType
     */
    public getEntitiesByTypeAndRegexs_args setOrdering(OdsEntityOrderByType ordering) {
      this.ordering = ordering;
      return this;
    }

    public void unsetOrdering() {
      this.ordering = null;
    }

    /** Returns true if field ordering is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdering() {
      return this.ordering != null;
    }

    public void setOrderingIsSet(boolean value) {
      if (!value) {
        this.ordering = null;
      }
    }

    public int getRegexesSize() {
      return (this.regexes == null) ? 0 : this.regexes.size();
    }

    public java.util.Iterator<String> getRegexesIterator() {
      return (this.regexes == null) ? null : this.regexes.iterator();
    }

    public void addToRegexes(String elem) {
      if (this.regexes == null) {
        this.regexes = new ArrayList<String>();
      }
      this.regexes.add(elem);
    }

    public List<String> getRegexes() {
      return this.regexes;
    }

    public getEntitiesByTypeAndRegexs_args setRegexes(List<String> regexes) {
      this.regexes = regexes;
      return this;
    }

    public void unsetRegexes() {
      this.regexes = null;
    }

    /** Returns true if field regexes is set (has been assigned a value) and false otherwise */
    public boolean isSetRegexes() {
      return this.regexes != null;
    }

    public void setRegexesIsSet(boolean value) {
      if (!value) {
        this.regexes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_TYPE:
        if (value == null) {
          unsetEntity_type();
        } else {
          setEntity_type((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case ORDERING:
        if (value == null) {
          unsetOrdering();
        } else {
          setOrdering((OdsEntityOrderByType)value);
        }
        break;

      case REGEXES:
        if (value == null) {
          unsetRegexes();
        } else {
          setRegexes((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_TYPE:
        return Integer.valueOf(getEntity_type());

      case LIMIT:
        return Integer.valueOf(getLimit());

      case ORDERING:
        return getOrdering();

      case REGEXES:
        return getRegexes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_TYPE:
        return isSetEntity_type();
      case LIMIT:
        return isSetLimit();
      case ORDERING:
        return isSetOrdering();
      case REGEXES:
        return isSetRegexes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntitiesByTypeAndRegexs_args)
        return this.equals((getEntitiesByTypeAndRegexs_args)that);
      return false;
    }

    public boolean equals(getEntitiesByTypeAndRegexs_args that) {
      if (that == null)
        return false;

      boolean this_present_entity_type = true;
      boolean that_present_entity_type = true;
      if (this_present_entity_type || that_present_entity_type) {
        if (!(this_present_entity_type && that_present_entity_type))
          return false;
        if (this.entity_type != that.entity_type)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_ordering = true && this.isSetOrdering();
      boolean that_present_ordering = true && that.isSetOrdering();
      if (this_present_ordering || that_present_ordering) {
        if (!(this_present_ordering && that_present_ordering))
          return false;
        if (!this.ordering.equals(that.ordering))
          return false;
      }

      boolean this_present_regexes = true && this.isSetRegexes();
      boolean that_present_regexes = true && that.isSetRegexes();
      if (this_present_regexes || that_present_regexes) {
        if (!(this_present_regexes && that_present_regexes))
          return false;
        if (!this.regexes.equals(that.regexes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity_type = true;
      list.add(present_entity_type);
      if (present_entity_type)
        list.add(entity_type);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      boolean present_ordering = true && (isSetOrdering());
      list.add(present_ordering);
      if (present_ordering)
        list.add(ordering.getValue());

      boolean present_regexes = true && (isSetRegexes());
      list.add(present_regexes);
      if (present_regexes)
        list.add(regexes);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntitiesByTypeAndRegexs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity_type()).compareTo(other.isSetEntity_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity_type, other.entity_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrdering()).compareTo(other.isSetOrdering());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdering()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordering, other.ordering);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegexes()).compareTo(other.isSetRegexes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegexes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regexes, other.regexes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntitiesByTypeAndRegexs_args(");
      boolean first = true;

      sb.append("entity_type:");
      sb.append(this.entity_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ordering:");
      if (this.ordering == null) {
        sb.append("null");
      } else {
        sb.append(this.ordering);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regexes:");
      if (this.regexes == null) {
        sb.append("null");
      } else {
        sb.append(this.regexes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntitiesByTypeAndRegexs_argsStandardSchemeFactory implements SchemeFactory {
      public getEntitiesByTypeAndRegexs_argsStandardScheme getScheme() {
        return new getEntitiesByTypeAndRegexs_argsStandardScheme();
      }
    }

    private static class getEntitiesByTypeAndRegexs_argsStandardScheme extends StandardScheme<getEntitiesByTypeAndRegexs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntitiesByTypeAndRegexs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entity_type = iprot.readI32();
                struct.setEntity_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDERING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ordering = com.facebook.maestro.OdsEntityOrderByType.findByValue(iprot.readI32());
                struct.setOrderingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REGEXES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list834 = iprot.readListBegin();
                  struct.regexes = new ArrayList<String>(_list834.size);
                  String _elem835;
                  for (int _i836 = 0; _i836 < _list834.size; ++_i836)
                  {
                    _elem835 = iprot.readString();
                    struct.regexes.add(_elem835);
                  }
                  iprot.readListEnd();
                }
                struct.setRegexesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntitiesByTypeAndRegexs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.entity_type);
        oprot.writeFieldEnd();
        if (struct.ordering != null) {
          oprot.writeFieldBegin(ORDERING_FIELD_DESC);
          oprot.writeI32(struct.ordering.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.regexes != null) {
          oprot.writeFieldBegin(REGEXES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.regexes.size()));
            for (String _iter837 : struct.regexes)
            {
              oprot.writeString(_iter837);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntitiesByTypeAndRegexs_argsTupleSchemeFactory implements SchemeFactory {
      public getEntitiesByTypeAndRegexs_argsTupleScheme getScheme() {
        return new getEntitiesByTypeAndRegexs_argsTupleScheme();
      }
    }

    private static class getEntitiesByTypeAndRegexs_argsTupleScheme extends TupleScheme<getEntitiesByTypeAndRegexs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntitiesByTypeAndRegexs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity_type()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        if (struct.isSetOrdering()) {
          optionals.set(2);
        }
        if (struct.isSetRegexes()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetEntity_type()) {
          oprot.writeI32(struct.entity_type);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetOrdering()) {
          oprot.writeI32(struct.ordering.getValue());
        }
        if (struct.isSetRegexes()) {
          {
            oprot.writeI32(struct.regexes.size());
            for (String _iter838 : struct.regexes)
            {
              oprot.writeString(_iter838);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntitiesByTypeAndRegexs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.entity_type = iprot.readI32();
          struct.setEntity_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ordering = com.facebook.maestro.OdsEntityOrderByType.findByValue(iprot.readI32());
          struct.setOrderingIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list839 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.regexes = new ArrayList<String>(_list839.size);
            String _elem840;
            for (int _i841 = 0; _i841 < _list839.size; ++_i841)
            {
              _elem840 = iprot.readString();
              struct.regexes.add(_elem840);
            }
          }
          struct.setRegexesIsSet(true);
        }
      }
    }

  }

  public static class getEntitiesByTypeAndRegexs_result implements org.apache.thrift.TBase<getEntitiesByTypeAndRegexs_result, getEntitiesByTypeAndRegexs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntitiesByTypeAndRegexs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntitiesByTypeAndRegexs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntitiesByTypeAndRegexs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntitiesByTypeAndRegexs_resultTupleSchemeFactory());
    }

    public OdsKeyEntityMapperResult success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsKeyEntityMapperResult.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntitiesByTypeAndRegexs_result.class, metaDataMap);
    }

    public getEntitiesByTypeAndRegexs_result() {
    }

    public getEntitiesByTypeAndRegexs_result(
      OdsKeyEntityMapperResult success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntitiesByTypeAndRegexs_result(getEntitiesByTypeAndRegexs_result other) {
      if (other.isSetSuccess()) {
        this.success = new OdsKeyEntityMapperResult(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getEntitiesByTypeAndRegexs_result deepCopy() {
      return new getEntitiesByTypeAndRegexs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public OdsKeyEntityMapperResult getSuccess() {
      return this.success;
    }

    public getEntitiesByTypeAndRegexs_result setSuccess(OdsKeyEntityMapperResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getEntitiesByTypeAndRegexs_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OdsKeyEntityMapperResult)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntitiesByTypeAndRegexs_result)
        return this.equals((getEntitiesByTypeAndRegexs_result)that);
      return false;
    }

    public boolean equals(getEntitiesByTypeAndRegexs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntitiesByTypeAndRegexs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntitiesByTypeAndRegexs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntitiesByTypeAndRegexs_resultStandardSchemeFactory implements SchemeFactory {
      public getEntitiesByTypeAndRegexs_resultStandardScheme getScheme() {
        return new getEntitiesByTypeAndRegexs_resultStandardScheme();
      }
    }

    private static class getEntitiesByTypeAndRegexs_resultStandardScheme extends StandardScheme<getEntitiesByTypeAndRegexs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntitiesByTypeAndRegexs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OdsKeyEntityMapperResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntitiesByTypeAndRegexs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntitiesByTypeAndRegexs_resultTupleSchemeFactory implements SchemeFactory {
      public getEntitiesByTypeAndRegexs_resultTupleScheme getScheme() {
        return new getEntitiesByTypeAndRegexs_resultTupleScheme();
      }
    }

    private static class getEntitiesByTypeAndRegexs_resultTupleScheme extends TupleScheme<getEntitiesByTypeAndRegexs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntitiesByTypeAndRegexs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntitiesByTypeAndRegexs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OdsKeyEntityMapperResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getKeysByRegexs_args implements org.apache.thrift.TBase<getKeysByRegexs_args, getKeysByRegexs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getKeysByRegexs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeysByRegexs_args");

    private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USE_CDBDAO_FIELD_DESC = new org.apache.thrift.protocol.TField("use_cdbdao", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeysByRegexs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeysByRegexs_argsTupleSchemeFactory());
    }

    public List<String> keywords; // required
    public int limit; // required
    public boolean use_cdbdao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORDS((short)1, "keywords"),
      LIMIT((short)2, "limit"),
      USE_CDBDAO((short)3, "use_cdbdao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORDS
            return KEYWORDS;
          case 2: // LIMIT
            return LIMIT;
          case 3: // USE_CDBDAO
            return USE_CDBDAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private static final int __USE_CDBDAO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USE_CDBDAO, new org.apache.thrift.meta_data.FieldMetaData("use_cdbdao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeysByRegexs_args.class, metaDataMap);
    }

    public getKeysByRegexs_args() {
    }

    public getKeysByRegexs_args(
      List<String> keywords,
      int limit,
      boolean use_cdbdao)
    {
      this();
      this.keywords = keywords;
      this.limit = limit;
      setLimitIsSet(true);
      this.use_cdbdao = use_cdbdao;
      setUse_cdbdaoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeysByRegexs_args(getKeysByRegexs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeywords()) {
        List<String> __this__keywords = new ArrayList<String>(other.keywords);
        this.keywords = __this__keywords;
      }
      this.limit = other.limit;
      this.use_cdbdao = other.use_cdbdao;
    }

    public getKeysByRegexs_args deepCopy() {
      return new getKeysByRegexs_args(this);
    }

    @Override
    public void clear() {
      this.keywords = null;
      setLimitIsSet(false);
      this.limit = 0;
      setUse_cdbdaoIsSet(false);
      this.use_cdbdao = false;
    }

    public int getKeywordsSize() {
      return (this.keywords == null) ? 0 : this.keywords.size();
    }

    public java.util.Iterator<String> getKeywordsIterator() {
      return (this.keywords == null) ? null : this.keywords.iterator();
    }

    public void addToKeywords(String elem) {
      if (this.keywords == null) {
        this.keywords = new ArrayList<String>();
      }
      this.keywords.add(elem);
    }

    public List<String> getKeywords() {
      return this.keywords;
    }

    public getKeysByRegexs_args setKeywords(List<String> keywords) {
      this.keywords = keywords;
      return this;
    }

    public void unsetKeywords() {
      this.keywords = null;
    }

    /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
    public boolean isSetKeywords() {
      return this.keywords != null;
    }

    public void setKeywordsIsSet(boolean value) {
      if (!value) {
        this.keywords = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public getKeysByRegexs_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public boolean isUse_cdbdao() {
      return this.use_cdbdao;
    }

    public getKeysByRegexs_args setUse_cdbdao(boolean use_cdbdao) {
      this.use_cdbdao = use_cdbdao;
      setUse_cdbdaoIsSet(true);
      return this;
    }

    public void unsetUse_cdbdao() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_CDBDAO_ISSET_ID);
    }

    /** Returns true if field use_cdbdao is set (has been assigned a value) and false otherwise */
    public boolean isSetUse_cdbdao() {
      return EncodingUtils.testBit(__isset_bitfield, __USE_CDBDAO_ISSET_ID);
    }

    public void setUse_cdbdaoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_CDBDAO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORDS:
        if (value == null) {
          unsetKeywords();
        } else {
          setKeywords((List<String>)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case USE_CDBDAO:
        if (value == null) {
          unsetUse_cdbdao();
        } else {
          setUse_cdbdao((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORDS:
        return getKeywords();

      case LIMIT:
        return Integer.valueOf(getLimit());

      case USE_CDBDAO:
        return Boolean.valueOf(isUse_cdbdao());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORDS:
        return isSetKeywords();
      case LIMIT:
        return isSetLimit();
      case USE_CDBDAO:
        return isSetUse_cdbdao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeysByRegexs_args)
        return this.equals((getKeysByRegexs_args)that);
      return false;
    }

    public boolean equals(getKeysByRegexs_args that) {
      if (that == null)
        return false;

      boolean this_present_keywords = true && this.isSetKeywords();
      boolean that_present_keywords = true && that.isSetKeywords();
      if (this_present_keywords || that_present_keywords) {
        if (!(this_present_keywords && that_present_keywords))
          return false;
        if (!this.keywords.equals(that.keywords))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_use_cdbdao = true;
      boolean that_present_use_cdbdao = true;
      if (this_present_use_cdbdao || that_present_use_cdbdao) {
        if (!(this_present_use_cdbdao && that_present_use_cdbdao))
          return false;
        if (this.use_cdbdao != that.use_cdbdao)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keywords = true && (isSetKeywords());
      list.add(present_keywords);
      if (present_keywords)
        list.add(keywords);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      boolean present_use_cdbdao = true;
      list.add(present_use_cdbdao);
      if (present_use_cdbdao)
        list.add(use_cdbdao);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeysByRegexs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeywords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUse_cdbdao()).compareTo(other.isSetUse_cdbdao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUse_cdbdao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_cdbdao, other.use_cdbdao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeysByRegexs_args(");
      boolean first = true;

      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("use_cdbdao:");
      sb.append(this.use_cdbdao);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeysByRegexs_argsStandardSchemeFactory implements SchemeFactory {
      public getKeysByRegexs_argsStandardScheme getScheme() {
        return new getKeysByRegexs_argsStandardScheme();
      }
    }

    private static class getKeysByRegexs_argsStandardScheme extends StandardScheme<getKeysByRegexs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeysByRegexs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list842 = iprot.readListBegin();
                  struct.keywords = new ArrayList<String>(_list842.size);
                  String _elem843;
                  for (int _i844 = 0; _i844 < _list842.size; ++_i844)
                  {
                    _elem843 = iprot.readString();
                    struct.keywords.add(_elem843);
                  }
                  iprot.readListEnd();
                }
                struct.setKeywordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USE_CDBDAO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.use_cdbdao = iprot.readBool();
                struct.setUse_cdbdaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeysByRegexs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keywords != null) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keywords.size()));
            for (String _iter845 : struct.keywords)
            {
              oprot.writeString(_iter845);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USE_CDBDAO_FIELD_DESC);
        oprot.writeBool(struct.use_cdbdao);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeysByRegexs_argsTupleSchemeFactory implements SchemeFactory {
      public getKeysByRegexs_argsTupleScheme getScheme() {
        return new getKeysByRegexs_argsTupleScheme();
      }
    }

    private static class getKeysByRegexs_argsTupleScheme extends TupleScheme<getKeysByRegexs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeysByRegexs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeywords()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        if (struct.isSetUse_cdbdao()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKeywords()) {
          {
            oprot.writeI32(struct.keywords.size());
            for (String _iter846 : struct.keywords)
            {
              oprot.writeString(_iter846);
            }
          }
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetUse_cdbdao()) {
          oprot.writeBool(struct.use_cdbdao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeysByRegexs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list847 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keywords = new ArrayList<String>(_list847.size);
            String _elem848;
            for (int _i849 = 0; _i849 < _list847.size; ++_i849)
            {
              _elem848 = iprot.readString();
              struct.keywords.add(_elem848);
            }
          }
          struct.setKeywordsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(2)) {
          struct.use_cdbdao = iprot.readBool();
          struct.setUse_cdbdaoIsSet(true);
        }
      }
    }

  }

  public static class getKeysByRegexs_result implements org.apache.thrift.TBase<getKeysByRegexs_result, getKeysByRegexs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getKeysByRegexs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeysByRegexs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeysByRegexs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeysByRegexs_resultTupleSchemeFactory());
    }

    public OdsKeyEntityMapperResult success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsKeyEntityMapperResult.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeysByRegexs_result.class, metaDataMap);
    }

    public getKeysByRegexs_result() {
    }

    public getKeysByRegexs_result(
      OdsKeyEntityMapperResult success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeysByRegexs_result(getKeysByRegexs_result other) {
      if (other.isSetSuccess()) {
        this.success = new OdsKeyEntityMapperResult(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getKeysByRegexs_result deepCopy() {
      return new getKeysByRegexs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public OdsKeyEntityMapperResult getSuccess() {
      return this.success;
    }

    public getKeysByRegexs_result setSuccess(OdsKeyEntityMapperResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getKeysByRegexs_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OdsKeyEntityMapperResult)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeysByRegexs_result)
        return this.equals((getKeysByRegexs_result)that);
      return false;
    }

    public boolean equals(getKeysByRegexs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeysByRegexs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeysByRegexs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeysByRegexs_resultStandardSchemeFactory implements SchemeFactory {
      public getKeysByRegexs_resultStandardScheme getScheme() {
        return new getKeysByRegexs_resultStandardScheme();
      }
    }

    private static class getKeysByRegexs_resultStandardScheme extends StandardScheme<getKeysByRegexs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeysByRegexs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OdsKeyEntityMapperResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeysByRegexs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeysByRegexs_resultTupleSchemeFactory implements SchemeFactory {
      public getKeysByRegexs_resultTupleScheme getScheme() {
        return new getKeysByRegexs_resultTupleScheme();
      }
    }

    private static class getKeysByRegexs_resultTupleScheme extends TupleScheme<getKeysByRegexs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeysByRegexs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeysByRegexs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OdsKeyEntityMapperResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getAllAliveNumericKeyPrefixes_args implements org.apache.thrift.TBase<getAllAliveNumericKeyPrefixes_args, getAllAliveNumericKeyPrefixes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAliveNumericKeyPrefixes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAliveNumericKeyPrefixes_args");

    private static final org.apache.thrift.protocol.TField RETURN_KEYS_WITH_NO_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("returnKeysWithNoDelimiter", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAliveNumericKeyPrefixes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAliveNumericKeyPrefixes_argsTupleSchemeFactory());
    }

    public boolean returnKeysWithNoDelimiter; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETURN_KEYS_WITH_NO_DELIMITER((short)1, "returnKeysWithNoDelimiter"),
      LIMIT((short)2, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETURN_KEYS_WITH_NO_DELIMITER
            return RETURN_KEYS_WITH_NO_DELIMITER;
          case 2: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RETURNKEYSWITHNODELIMITER_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETURN_KEYS_WITH_NO_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("returnKeysWithNoDelimiter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAliveNumericKeyPrefixes_args.class, metaDataMap);
    }

    public getAllAliveNumericKeyPrefixes_args() {
    }

    public getAllAliveNumericKeyPrefixes_args(
      boolean returnKeysWithNoDelimiter,
      int limit)
    {
      this();
      this.returnKeysWithNoDelimiter = returnKeysWithNoDelimiter;
      setReturnKeysWithNoDelimiterIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAliveNumericKeyPrefixes_args(getAllAliveNumericKeyPrefixes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.returnKeysWithNoDelimiter = other.returnKeysWithNoDelimiter;
      this.limit = other.limit;
    }

    public getAllAliveNumericKeyPrefixes_args deepCopy() {
      return new getAllAliveNumericKeyPrefixes_args(this);
    }

    @Override
    public void clear() {
      setReturnKeysWithNoDelimiterIsSet(false);
      this.returnKeysWithNoDelimiter = false;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public boolean isReturnKeysWithNoDelimiter() {
      return this.returnKeysWithNoDelimiter;
    }

    public getAllAliveNumericKeyPrefixes_args setReturnKeysWithNoDelimiter(boolean returnKeysWithNoDelimiter) {
      this.returnKeysWithNoDelimiter = returnKeysWithNoDelimiter;
      setReturnKeysWithNoDelimiterIsSet(true);
      return this;
    }

    public void unsetReturnKeysWithNoDelimiter() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNKEYSWITHNODELIMITER_ISSET_ID);
    }

    /** Returns true if field returnKeysWithNoDelimiter is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnKeysWithNoDelimiter() {
      return EncodingUtils.testBit(__isset_bitfield, __RETURNKEYSWITHNODELIMITER_ISSET_ID);
    }

    public void setReturnKeysWithNoDelimiterIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNKEYSWITHNODELIMITER_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public getAllAliveNumericKeyPrefixes_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETURN_KEYS_WITH_NO_DELIMITER:
        if (value == null) {
          unsetReturnKeysWithNoDelimiter();
        } else {
          setReturnKeysWithNoDelimiter((Boolean)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETURN_KEYS_WITH_NO_DELIMITER:
        return Boolean.valueOf(isReturnKeysWithNoDelimiter());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETURN_KEYS_WITH_NO_DELIMITER:
        return isSetReturnKeysWithNoDelimiter();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAliveNumericKeyPrefixes_args)
        return this.equals((getAllAliveNumericKeyPrefixes_args)that);
      return false;
    }

    public boolean equals(getAllAliveNumericKeyPrefixes_args that) {
      if (that == null)
        return false;

      boolean this_present_returnKeysWithNoDelimiter = true;
      boolean that_present_returnKeysWithNoDelimiter = true;
      if (this_present_returnKeysWithNoDelimiter || that_present_returnKeysWithNoDelimiter) {
        if (!(this_present_returnKeysWithNoDelimiter && that_present_returnKeysWithNoDelimiter))
          return false;
        if (this.returnKeysWithNoDelimiter != that.returnKeysWithNoDelimiter)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_returnKeysWithNoDelimiter = true;
      list.add(present_returnKeysWithNoDelimiter);
      if (present_returnKeysWithNoDelimiter)
        list.add(returnKeysWithNoDelimiter);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllAliveNumericKeyPrefixes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReturnKeysWithNoDelimiter()).compareTo(other.isSetReturnKeysWithNoDelimiter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnKeysWithNoDelimiter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnKeysWithNoDelimiter, other.returnKeysWithNoDelimiter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAliveNumericKeyPrefixes_args(");
      boolean first = true;

      sb.append("returnKeysWithNoDelimiter:");
      sb.append(this.returnKeysWithNoDelimiter);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAliveNumericKeyPrefixes_argsStandardSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeyPrefixes_argsStandardScheme getScheme() {
        return new getAllAliveNumericKeyPrefixes_argsStandardScheme();
      }
    }

    private static class getAllAliveNumericKeyPrefixes_argsStandardScheme extends StandardScheme<getAllAliveNumericKeyPrefixes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAliveNumericKeyPrefixes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETURN_KEYS_WITH_NO_DELIMITER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.returnKeysWithNoDelimiter = iprot.readBool();
                struct.setReturnKeysWithNoDelimiterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAliveNumericKeyPrefixes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RETURN_KEYS_WITH_NO_DELIMITER_FIELD_DESC);
        oprot.writeBool(struct.returnKeysWithNoDelimiter);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAliveNumericKeyPrefixes_argsTupleSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeyPrefixes_argsTupleScheme getScheme() {
        return new getAllAliveNumericKeyPrefixes_argsTupleScheme();
      }
    }

    private static class getAllAliveNumericKeyPrefixes_argsTupleScheme extends TupleScheme<getAllAliveNumericKeyPrefixes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeyPrefixes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReturnKeysWithNoDelimiter()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReturnKeysWithNoDelimiter()) {
          oprot.writeBool(struct.returnKeysWithNoDelimiter);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeyPrefixes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.returnKeysWithNoDelimiter = iprot.readBool();
          struct.setReturnKeysWithNoDelimiterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getAllAliveNumericKeyPrefixes_result implements org.apache.thrift.TBase<getAllAliveNumericKeyPrefixes_result, getAllAliveNumericKeyPrefixes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAliveNumericKeyPrefixes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAliveNumericKeyPrefixes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAliveNumericKeyPrefixes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAliveNumericKeyPrefixes_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAliveNumericKeyPrefixes_result.class, metaDataMap);
    }

    public getAllAliveNumericKeyPrefixes_result() {
    }

    public getAllAliveNumericKeyPrefixes_result(
      List<String> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAliveNumericKeyPrefixes_result(getAllAliveNumericKeyPrefixes_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getAllAliveNumericKeyPrefixes_result deepCopy() {
      return new getAllAliveNumericKeyPrefixes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAllAliveNumericKeyPrefixes_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getAllAliveNumericKeyPrefixes_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAliveNumericKeyPrefixes_result)
        return this.equals((getAllAliveNumericKeyPrefixes_result)that);
      return false;
    }

    public boolean equals(getAllAliveNumericKeyPrefixes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllAliveNumericKeyPrefixes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAliveNumericKeyPrefixes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAliveNumericKeyPrefixes_resultStandardSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeyPrefixes_resultStandardScheme getScheme() {
        return new getAllAliveNumericKeyPrefixes_resultStandardScheme();
      }
    }

    private static class getAllAliveNumericKeyPrefixes_resultStandardScheme extends StandardScheme<getAllAliveNumericKeyPrefixes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAliveNumericKeyPrefixes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list850 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list850.size);
                  String _elem851;
                  for (int _i852 = 0; _i852 < _list850.size; ++_i852)
                  {
                    _elem851 = iprot.readString();
                    struct.success.add(_elem851);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAliveNumericKeyPrefixes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter853 : struct.success)
            {
              oprot.writeString(_iter853);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAliveNumericKeyPrefixes_resultTupleSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeyPrefixes_resultTupleScheme getScheme() {
        return new getAllAliveNumericKeyPrefixes_resultTupleScheme();
      }
    }

    private static class getAllAliveNumericKeyPrefixes_resultTupleScheme extends TupleScheme<getAllAliveNumericKeyPrefixes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeyPrefixes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter854 : struct.success)
            {
              oprot.writeString(_iter854);
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeyPrefixes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list855 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list855.size);
            String _elem856;
            for (int _i857 = 0; _i857 < _list855.size; ++_i857)
            {
              _elem856 = iprot.readString();
              struct.success.add(_elem856);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getAllAliveNumericKeys_args implements org.apache.thrift.TBase<getAllAliveNumericKeys_args, getAllAliveNumericKeys_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAliveNumericKeys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAliveNumericKeys_args");

    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAliveNumericKeys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAliveNumericKeys_argsTupleSchemeFactory());
    }

    public String prefix; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREFIX((short)1, "prefix"),
      LIMIT((short)2, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREFIX
            return PREFIX;
          case 2: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAliveNumericKeys_args.class, metaDataMap);
    }

    public getAllAliveNumericKeys_args() {
    }

    public getAllAliveNumericKeys_args(
      String prefix,
      int limit)
    {
      this();
      this.prefix = prefix;
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAliveNumericKeys_args(getAllAliveNumericKeys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPrefix()) {
        this.prefix = other.prefix;
      }
      this.limit = other.limit;
    }

    public getAllAliveNumericKeys_args deepCopy() {
      return new getAllAliveNumericKeys_args(this);
    }

    @Override
    public void clear() {
      this.prefix = null;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public String getPrefix() {
      return this.prefix;
    }

    public getAllAliveNumericKeys_args setPrefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public void unsetPrefix() {
      this.prefix = null;
    }

    /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetPrefix() {
      return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
      if (!value) {
        this.prefix = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public getAllAliveNumericKeys_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREFIX:
        if (value == null) {
          unsetPrefix();
        } else {
          setPrefix((String)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREFIX:
        return getPrefix();

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREFIX:
        return isSetPrefix();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAliveNumericKeys_args)
        return this.equals((getAllAliveNumericKeys_args)that);
      return false;
    }

    public boolean equals(getAllAliveNumericKeys_args that) {
      if (that == null)
        return false;

      boolean this_present_prefix = true && this.isSetPrefix();
      boolean that_present_prefix = true && that.isSetPrefix();
      if (this_present_prefix || that_present_prefix) {
        if (!(this_present_prefix && that_present_prefix))
          return false;
        if (!this.prefix.equals(that.prefix))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_prefix = true && (isSetPrefix());
      list.add(present_prefix);
      if (present_prefix)
        list.add(prefix);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllAliveNumericKeys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(other.isSetPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, other.prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAliveNumericKeys_args(");
      boolean first = true;

      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAliveNumericKeys_argsStandardSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeys_argsStandardScheme getScheme() {
        return new getAllAliveNumericKeys_argsStandardScheme();
      }
    }

    private static class getAllAliveNumericKeys_argsStandardScheme extends StandardScheme<getAllAliveNumericKeys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAliveNumericKeys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAliveNumericKeys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prefix != null) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAliveNumericKeys_argsTupleSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeys_argsTupleScheme getScheme() {
        return new getAllAliveNumericKeys_argsTupleScheme();
      }
    }

    private static class getAllAliveNumericKeys_argsTupleScheme extends TupleScheme<getAllAliveNumericKeys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPrefix()) {
          oprot.writeString(struct.prefix);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.prefix = iprot.readString();
          struct.setPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getAllAliveNumericKeys_result implements org.apache.thrift.TBase<getAllAliveNumericKeys_result, getAllAliveNumericKeys_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAliveNumericKeys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAliveNumericKeys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAliveNumericKeys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAliveNumericKeys_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAliveNumericKeys_result.class, metaDataMap);
    }

    public getAllAliveNumericKeys_result() {
    }

    public getAllAliveNumericKeys_result(
      List<String> success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAliveNumericKeys_result(getAllAliveNumericKeys_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getAllAliveNumericKeys_result deepCopy() {
      return new getAllAliveNumericKeys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAllAliveNumericKeys_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getAllAliveNumericKeys_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAliveNumericKeys_result)
        return this.equals((getAllAliveNumericKeys_result)that);
      return false;
    }

    public boolean equals(getAllAliveNumericKeys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllAliveNumericKeys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAliveNumericKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAliveNumericKeys_resultStandardSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeys_resultStandardScheme getScheme() {
        return new getAllAliveNumericKeys_resultStandardScheme();
      }
    }

    private static class getAllAliveNumericKeys_resultStandardScheme extends StandardScheme<getAllAliveNumericKeys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAliveNumericKeys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list858 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list858.size);
                  String _elem859;
                  for (int _i860 = 0; _i860 < _list858.size; ++_i860)
                  {
                    _elem859 = iprot.readString();
                    struct.success.add(_elem859);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAliveNumericKeys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter861 : struct.success)
            {
              oprot.writeString(_iter861);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAliveNumericKeys_resultTupleSchemeFactory implements SchemeFactory {
      public getAllAliveNumericKeys_resultTupleScheme getScheme() {
        return new getAllAliveNumericKeys_resultTupleScheme();
      }
    }

    private static class getAllAliveNumericKeys_resultTupleScheme extends TupleScheme<getAllAliveNumericKeys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter862 : struct.success)
            {
              oprot.writeString(_iter862);
            }
          }
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAliveNumericKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list863 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list863.size);
            String _elem864;
            for (int _i865 = 0; _i865 < _list863.size; ++_i865)
            {
              _elem864 = iprot.readString();
              struct.success.add(_elem864);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getAllKeys_args implements org.apache.thrift.TBase<getAllKeys_args, getAllKeys_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllKeys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllKeys_args");

    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_type", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllKeys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllKeys_argsTupleSchemeFactory());
    }

    public String prefix; // required
    public int key_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREFIX((short)1, "prefix"),
      KEY_TYPE((short)2, "key_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREFIX
            return PREFIX;
          case 2: // KEY_TYPE
            return KEY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("key_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllKeys_args.class, metaDataMap);
    }

    public getAllKeys_args() {
    }

    public getAllKeys_args(
      String prefix,
      int key_type)
    {
      this();
      this.prefix = prefix;
      this.key_type = key_type;
      setKey_typeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllKeys_args(getAllKeys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPrefix()) {
        this.prefix = other.prefix;
      }
      this.key_type = other.key_type;
    }

    public getAllKeys_args deepCopy() {
      return new getAllKeys_args(this);
    }

    @Override
    public void clear() {
      this.prefix = null;
      setKey_typeIsSet(false);
      this.key_type = 0;
    }

    public String getPrefix() {
      return this.prefix;
    }

    public getAllKeys_args setPrefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public void unsetPrefix() {
      this.prefix = null;
    }

    /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetPrefix() {
      return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
      if (!value) {
        this.prefix = null;
      }
    }

    public int getKey_type() {
      return this.key_type;
    }

    public getAllKeys_args setKey_type(int key_type) {
      this.key_type = key_type;
      setKey_typeIsSet(true);
      return this;
    }

    public void unsetKey_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_TYPE_ISSET_ID);
    }

    /** Returns true if field key_type is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_type() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_TYPE_ISSET_ID);
    }

    public void setKey_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREFIX:
        if (value == null) {
          unsetPrefix();
        } else {
          setPrefix((String)value);
        }
        break;

      case KEY_TYPE:
        if (value == null) {
          unsetKey_type();
        } else {
          setKey_type((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREFIX:
        return getPrefix();

      case KEY_TYPE:
        return Integer.valueOf(getKey_type());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREFIX:
        return isSetPrefix();
      case KEY_TYPE:
        return isSetKey_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllKeys_args)
        return this.equals((getAllKeys_args)that);
      return false;
    }

    public boolean equals(getAllKeys_args that) {
      if (that == null)
        return false;

      boolean this_present_prefix = true && this.isSetPrefix();
      boolean that_present_prefix = true && that.isSetPrefix();
      if (this_present_prefix || that_present_prefix) {
        if (!(this_present_prefix && that_present_prefix))
          return false;
        if (!this.prefix.equals(that.prefix))
          return false;
      }

      boolean this_present_key_type = true;
      boolean that_present_key_type = true;
      if (this_present_key_type || that_present_key_type) {
        if (!(this_present_key_type && that_present_key_type))
          return false;
        if (this.key_type != that.key_type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_prefix = true && (isSetPrefix());
      list.add(present_prefix);
      if (present_prefix)
        list.add(prefix);

      boolean present_key_type = true;
      list.add(present_key_type);
      if (present_key_type)
        list.add(key_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllKeys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(other.isSetPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, other.prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey_type()).compareTo(other.isSetKey_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_type, other.key_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllKeys_args(");
      boolean first = true;

      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_type:");
      sb.append(this.key_type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllKeys_argsStandardSchemeFactory implements SchemeFactory {
      public getAllKeys_argsStandardScheme getScheme() {
        return new getAllKeys_argsStandardScheme();
      }
    }

    private static class getAllKeys_argsStandardScheme extends StandardScheme<getAllKeys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllKeys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.key_type = iprot.readI32();
                struct.setKey_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllKeys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prefix != null) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(KEY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.key_type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllKeys_argsTupleSchemeFactory implements SchemeFactory {
      public getAllKeys_argsTupleScheme getScheme() {
        return new getAllKeys_argsTupleScheme();
      }
    }

    private static class getAllKeys_argsTupleScheme extends TupleScheme<getAllKeys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetKey_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPrefix()) {
          oprot.writeString(struct.prefix);
        }
        if (struct.isSetKey_type()) {
          oprot.writeI32(struct.key_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.prefix = iprot.readString();
          struct.setPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key_type = iprot.readI32();
          struct.setKey_typeIsSet(true);
        }
      }
    }

  }

  public static class getAllKeys_result implements org.apache.thrift.TBase<getAllKeys_result, getAllKeys_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllKeys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllKeys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllKeys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllKeys_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllKeys_result.class, metaDataMap);
    }

    public getAllKeys_result() {
    }

    public getAllKeys_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllKeys_result(getAllKeys_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getAllKeys_result deepCopy() {
      return new getAllKeys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAllKeys_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllKeys_result)
        return this.equals((getAllKeys_result)that);
      return false;
    }

    public boolean equals(getAllKeys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllKeys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllKeys_resultStandardSchemeFactory implements SchemeFactory {
      public getAllKeys_resultStandardScheme getScheme() {
        return new getAllKeys_resultStandardScheme();
      }
    }

    private static class getAllKeys_resultStandardScheme extends StandardScheme<getAllKeys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllKeys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list866 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list866.size);
                  String _elem867;
                  for (int _i868 = 0; _i868 < _list866.size; ++_i868)
                  {
                    _elem867 = iprot.readString();
                    struct.success.add(_elem867);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllKeys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter869 : struct.success)
            {
              oprot.writeString(_iter869);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllKeys_resultTupleSchemeFactory implements SchemeFactory {
      public getAllKeys_resultTupleScheme getScheme() {
        return new getAllKeys_resultTupleScheme();
      }
    }

    private static class getAllKeys_resultTupleScheme extends TupleScheme<getAllKeys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter870 : struct.success)
            {
              oprot.writeString(_iter870);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list871 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list871.size);
            String _elem872;
            for (int _i873 = 0; _i873 < _list871.size; ++_i873)
            {
              _elem872 = iprot.readString();
              struct.success.add(_elem872);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGlobalAggregationEntities_args implements org.apache.thrift.TBase<getGlobalAggregationEntities_args, getGlobalAggregationEntities_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGlobalAggregationEntities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGlobalAggregationEntities_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGlobalAggregationEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGlobalAggregationEntities_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGlobalAggregationEntities_args.class, metaDataMap);
    }

    public getGlobalAggregationEntities_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGlobalAggregationEntities_args(getGlobalAggregationEntities_args other) {
    }

    public getGlobalAggregationEntities_args deepCopy() {
      return new getGlobalAggregationEntities_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGlobalAggregationEntities_args)
        return this.equals((getGlobalAggregationEntities_args)that);
      return false;
    }

    public boolean equals(getGlobalAggregationEntities_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getGlobalAggregationEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGlobalAggregationEntities_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGlobalAggregationEntities_argsStandardSchemeFactory implements SchemeFactory {
      public getGlobalAggregationEntities_argsStandardScheme getScheme() {
        return new getGlobalAggregationEntities_argsStandardScheme();
      }
    }

    private static class getGlobalAggregationEntities_argsStandardScheme extends StandardScheme<getGlobalAggregationEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGlobalAggregationEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGlobalAggregationEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGlobalAggregationEntities_argsTupleSchemeFactory implements SchemeFactory {
      public getGlobalAggregationEntities_argsTupleScheme getScheme() {
        return new getGlobalAggregationEntities_argsTupleScheme();
      }
    }

    private static class getGlobalAggregationEntities_argsTupleScheme extends TupleScheme<getGlobalAggregationEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGlobalAggregationEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGlobalAggregationEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getGlobalAggregationEntities_result implements org.apache.thrift.TBase<getGlobalAggregationEntities_result, getGlobalAggregationEntities_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGlobalAggregationEntities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGlobalAggregationEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGlobalAggregationEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGlobalAggregationEntities_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGlobalAggregationEntities_result.class, metaDataMap);
    }

    public getGlobalAggregationEntities_result() {
    }

    public getGlobalAggregationEntities_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGlobalAggregationEntities_result(getGlobalAggregationEntities_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getGlobalAggregationEntities_result deepCopy() {
      return new getGlobalAggregationEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getGlobalAggregationEntities_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGlobalAggregationEntities_result)
        return this.equals((getGlobalAggregationEntities_result)that);
      return false;
    }

    public boolean equals(getGlobalAggregationEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGlobalAggregationEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGlobalAggregationEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGlobalAggregationEntities_resultStandardSchemeFactory implements SchemeFactory {
      public getGlobalAggregationEntities_resultStandardScheme getScheme() {
        return new getGlobalAggregationEntities_resultStandardScheme();
      }
    }

    private static class getGlobalAggregationEntities_resultStandardScheme extends StandardScheme<getGlobalAggregationEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGlobalAggregationEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list874 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list874.size);
                  String _elem875;
                  for (int _i876 = 0; _i876 < _list874.size; ++_i876)
                  {
                    _elem875 = iprot.readString();
                    struct.success.add(_elem875);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGlobalAggregationEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter877 : struct.success)
            {
              oprot.writeString(_iter877);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGlobalAggregationEntities_resultTupleSchemeFactory implements SchemeFactory {
      public getGlobalAggregationEntities_resultTupleScheme getScheme() {
        return new getGlobalAggregationEntities_resultTupleScheme();
      }
    }

    private static class getGlobalAggregationEntities_resultTupleScheme extends TupleScheme<getGlobalAggregationEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGlobalAggregationEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter878 : struct.success)
            {
              oprot.writeString(_iter878);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGlobalAggregationEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list879 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list879.size);
            String _elem880;
            for (int _i881 = 0; _i881 < _list879.size; ++_i881)
            {
              _elem880 = iprot.readString();
              struct.success.add(_elem880);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findExactMatch_args implements org.apache.thrift.TBase<findExactMatch_args, findExactMatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<findExactMatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findExactMatch_args");

    private static final org.apache.thrift.protocol.TField KEYWORD_TO_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword_to_search", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_entity", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findExactMatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findExactMatch_argsTupleSchemeFactory());
    }

    public String keyword_to_search; // required
    public boolean is_entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORD_TO_SEARCH((short)1, "keyword_to_search"),
      IS_ENTITY((short)2, "is_entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORD_TO_SEARCH
            return KEYWORD_TO_SEARCH;
          case 2: // IS_ENTITY
            return IS_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IS_ENTITY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORD_TO_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("keyword_to_search", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("is_entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findExactMatch_args.class, metaDataMap);
    }

    public findExactMatch_args() {
    }

    public findExactMatch_args(
      String keyword_to_search,
      boolean is_entity)
    {
      this();
      this.keyword_to_search = keyword_to_search;
      this.is_entity = is_entity;
      setIs_entityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findExactMatch_args(findExactMatch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeyword_to_search()) {
        this.keyword_to_search = other.keyword_to_search;
      }
      this.is_entity = other.is_entity;
    }

    public findExactMatch_args deepCopy() {
      return new findExactMatch_args(this);
    }

    @Override
    public void clear() {
      this.keyword_to_search = null;
      setIs_entityIsSet(false);
      this.is_entity = false;
    }

    public String getKeyword_to_search() {
      return this.keyword_to_search;
    }

    public findExactMatch_args setKeyword_to_search(String keyword_to_search) {
      this.keyword_to_search = keyword_to_search;
      return this;
    }

    public void unsetKeyword_to_search() {
      this.keyword_to_search = null;
    }

    /** Returns true if field keyword_to_search is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyword_to_search() {
      return this.keyword_to_search != null;
    }

    public void setKeyword_to_searchIsSet(boolean value) {
      if (!value) {
        this.keyword_to_search = null;
      }
    }

    public boolean isIs_entity() {
      return this.is_entity;
    }

    public findExactMatch_args setIs_entity(boolean is_entity) {
      this.is_entity = is_entity;
      setIs_entityIsSet(true);
      return this;
    }

    public void unsetIs_entity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_ENTITY_ISSET_ID);
    }

    /** Returns true if field is_entity is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_entity() {
      return EncodingUtils.testBit(__isset_bitfield, __IS_ENTITY_ISSET_ID);
    }

    public void setIs_entityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_ENTITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORD_TO_SEARCH:
        if (value == null) {
          unsetKeyword_to_search();
        } else {
          setKeyword_to_search((String)value);
        }
        break;

      case IS_ENTITY:
        if (value == null) {
          unsetIs_entity();
        } else {
          setIs_entity((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORD_TO_SEARCH:
        return getKeyword_to_search();

      case IS_ENTITY:
        return Boolean.valueOf(isIs_entity());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORD_TO_SEARCH:
        return isSetKeyword_to_search();
      case IS_ENTITY:
        return isSetIs_entity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findExactMatch_args)
        return this.equals((findExactMatch_args)that);
      return false;
    }

    public boolean equals(findExactMatch_args that) {
      if (that == null)
        return false;

      boolean this_present_keyword_to_search = true && this.isSetKeyword_to_search();
      boolean that_present_keyword_to_search = true && that.isSetKeyword_to_search();
      if (this_present_keyword_to_search || that_present_keyword_to_search) {
        if (!(this_present_keyword_to_search && that_present_keyword_to_search))
          return false;
        if (!this.keyword_to_search.equals(that.keyword_to_search))
          return false;
      }

      boolean this_present_is_entity = true;
      boolean that_present_is_entity = true;
      if (this_present_is_entity || that_present_is_entity) {
        if (!(this_present_is_entity && that_present_is_entity))
          return false;
        if (this.is_entity != that.is_entity)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keyword_to_search = true && (isSetKeyword_to_search());
      list.add(present_keyword_to_search);
      if (present_keyword_to_search)
        list.add(keyword_to_search);

      boolean present_is_entity = true;
      list.add(present_is_entity);
      if (present_is_entity)
        list.add(is_entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(findExactMatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyword_to_search()).compareTo(other.isSetKeyword_to_search());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyword_to_search()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword_to_search, other.keyword_to_search);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_entity()).compareTo(other.isSetIs_entity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_entity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_entity, other.is_entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findExactMatch_args(");
      boolean first = true;

      sb.append("keyword_to_search:");
      if (this.keyword_to_search == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword_to_search);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_entity:");
      sb.append(this.is_entity);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findExactMatch_argsStandardSchemeFactory implements SchemeFactory {
      public findExactMatch_argsStandardScheme getScheme() {
        return new findExactMatch_argsStandardScheme();
      }
    }

    private static class findExactMatch_argsStandardScheme extends StandardScheme<findExactMatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findExactMatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORD_TO_SEARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyword_to_search = iprot.readString();
                struct.setKeyword_to_searchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.is_entity = iprot.readBool();
                struct.setIs_entityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findExactMatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyword_to_search != null) {
          oprot.writeFieldBegin(KEYWORD_TO_SEARCH_FIELD_DESC);
          oprot.writeString(struct.keyword_to_search);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_ENTITY_FIELD_DESC);
        oprot.writeBool(struct.is_entity);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findExactMatch_argsTupleSchemeFactory implements SchemeFactory {
      public findExactMatch_argsTupleScheme getScheme() {
        return new findExactMatch_argsTupleScheme();
      }
    }

    private static class findExactMatch_argsTupleScheme extends TupleScheme<findExactMatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findExactMatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyword_to_search()) {
          optionals.set(0);
        }
        if (struct.isSetIs_entity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKeyword_to_search()) {
          oprot.writeString(struct.keyword_to_search);
        }
        if (struct.isSetIs_entity()) {
          oprot.writeBool(struct.is_entity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findExactMatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.keyword_to_search = iprot.readString();
          struct.setKeyword_to_searchIsSet(true);
        }
        if (incoming.get(1)) {
          struct.is_entity = iprot.readBool();
          struct.setIs_entityIsSet(true);
        }
      }
    }

  }

  public static class findExactMatch_result implements org.apache.thrift.TBase<findExactMatch_result, findExactMatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<findExactMatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findExactMatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findExactMatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findExactMatch_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findExactMatch_result.class, metaDataMap);
    }

    public findExactMatch_result() {
    }

    public findExactMatch_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findExactMatch_result(findExactMatch_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findExactMatch_result deepCopy() {
      return new findExactMatch_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public findExactMatch_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findExactMatch_result)
        return this.equals((findExactMatch_result)that);
      return false;
    }

    public boolean equals(findExactMatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findExactMatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findExactMatch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findExactMatch_resultStandardSchemeFactory implements SchemeFactory {
      public findExactMatch_resultStandardScheme getScheme() {
        return new findExactMatch_resultStandardScheme();
      }
    }

    private static class findExactMatch_resultStandardScheme extends StandardScheme<findExactMatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findExactMatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findExactMatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findExactMatch_resultTupleSchemeFactory implements SchemeFactory {
      public findExactMatch_resultTupleScheme getScheme() {
        return new findExactMatch_resultTupleScheme();
      }
    }

    private static class findExactMatch_resultTupleScheme extends TupleScheme<findExactMatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findExactMatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findExactMatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchEntityOrKey_args implements org.apache.thrift.TBase<searchEntityOrKey_args, searchEntityOrKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchEntityOrKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchEntityOrKey_args");

    private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField IS_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_entity", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchEntityOrKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchEntityOrKey_argsTupleSchemeFactory());
    }

    public List<String> keywords; // required
    public int limit; // required
    public boolean is_entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORDS((short)1, "keywords"),
      LIMIT((short)2, "limit"),
      IS_ENTITY((short)3, "is_entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORDS
            return KEYWORDS;
          case 2: // LIMIT
            return LIMIT;
          case 3: // IS_ENTITY
            return IS_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private static final int __IS_ENTITY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("is_entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchEntityOrKey_args.class, metaDataMap);
    }

    public searchEntityOrKey_args() {
    }

    public searchEntityOrKey_args(
      List<String> keywords,
      int limit,
      boolean is_entity)
    {
      this();
      this.keywords = keywords;
      this.limit = limit;
      setLimitIsSet(true);
      this.is_entity = is_entity;
      setIs_entityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchEntityOrKey_args(searchEntityOrKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeywords()) {
        List<String> __this__keywords = new ArrayList<String>(other.keywords);
        this.keywords = __this__keywords;
      }
      this.limit = other.limit;
      this.is_entity = other.is_entity;
    }

    public searchEntityOrKey_args deepCopy() {
      return new searchEntityOrKey_args(this);
    }

    @Override
    public void clear() {
      this.keywords = null;
      setLimitIsSet(false);
      this.limit = 0;
      setIs_entityIsSet(false);
      this.is_entity = false;
    }

    public int getKeywordsSize() {
      return (this.keywords == null) ? 0 : this.keywords.size();
    }

    public java.util.Iterator<String> getKeywordsIterator() {
      return (this.keywords == null) ? null : this.keywords.iterator();
    }

    public void addToKeywords(String elem) {
      if (this.keywords == null) {
        this.keywords = new ArrayList<String>();
      }
      this.keywords.add(elem);
    }

    public List<String> getKeywords() {
      return this.keywords;
    }

    public searchEntityOrKey_args setKeywords(List<String> keywords) {
      this.keywords = keywords;
      return this;
    }

    public void unsetKeywords() {
      this.keywords = null;
    }

    /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
    public boolean isSetKeywords() {
      return this.keywords != null;
    }

    public void setKeywordsIsSet(boolean value) {
      if (!value) {
        this.keywords = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public searchEntityOrKey_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public boolean isIs_entity() {
      return this.is_entity;
    }

    public searchEntityOrKey_args setIs_entity(boolean is_entity) {
      this.is_entity = is_entity;
      setIs_entityIsSet(true);
      return this;
    }

    public void unsetIs_entity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_ENTITY_ISSET_ID);
    }

    /** Returns true if field is_entity is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_entity() {
      return EncodingUtils.testBit(__isset_bitfield, __IS_ENTITY_ISSET_ID);
    }

    public void setIs_entityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_ENTITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORDS:
        if (value == null) {
          unsetKeywords();
        } else {
          setKeywords((List<String>)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case IS_ENTITY:
        if (value == null) {
          unsetIs_entity();
        } else {
          setIs_entity((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORDS:
        return getKeywords();

      case LIMIT:
        return Integer.valueOf(getLimit());

      case IS_ENTITY:
        return Boolean.valueOf(isIs_entity());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORDS:
        return isSetKeywords();
      case LIMIT:
        return isSetLimit();
      case IS_ENTITY:
        return isSetIs_entity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchEntityOrKey_args)
        return this.equals((searchEntityOrKey_args)that);
      return false;
    }

    public boolean equals(searchEntityOrKey_args that) {
      if (that == null)
        return false;

      boolean this_present_keywords = true && this.isSetKeywords();
      boolean that_present_keywords = true && that.isSetKeywords();
      if (this_present_keywords || that_present_keywords) {
        if (!(this_present_keywords && that_present_keywords))
          return false;
        if (!this.keywords.equals(that.keywords))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_is_entity = true;
      boolean that_present_is_entity = true;
      if (this_present_is_entity || that_present_is_entity) {
        if (!(this_present_is_entity && that_present_is_entity))
          return false;
        if (this.is_entity != that.is_entity)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keywords = true && (isSetKeywords());
      list.add(present_keywords);
      if (present_keywords)
        list.add(keywords);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      boolean present_is_entity = true;
      list.add(present_is_entity);
      if (present_is_entity)
        list.add(is_entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchEntityOrKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeywords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_entity()).compareTo(other.isSetIs_entity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_entity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_entity, other.is_entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchEntityOrKey_args(");
      boolean first = true;

      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_entity:");
      sb.append(this.is_entity);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchEntityOrKey_argsStandardSchemeFactory implements SchemeFactory {
      public searchEntityOrKey_argsStandardScheme getScheme() {
        return new searchEntityOrKey_argsStandardScheme();
      }
    }

    private static class searchEntityOrKey_argsStandardScheme extends StandardScheme<searchEntityOrKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchEntityOrKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list882 = iprot.readListBegin();
                  struct.keywords = new ArrayList<String>(_list882.size);
                  String _elem883;
                  for (int _i884 = 0; _i884 < _list882.size; ++_i884)
                  {
                    _elem883 = iprot.readString();
                    struct.keywords.add(_elem883);
                  }
                  iprot.readListEnd();
                }
                struct.setKeywordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.is_entity = iprot.readBool();
                struct.setIs_entityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchEntityOrKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keywords != null) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keywords.size()));
            for (String _iter885 : struct.keywords)
            {
              oprot.writeString(_iter885);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_ENTITY_FIELD_DESC);
        oprot.writeBool(struct.is_entity);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchEntityOrKey_argsTupleSchemeFactory implements SchemeFactory {
      public searchEntityOrKey_argsTupleScheme getScheme() {
        return new searchEntityOrKey_argsTupleScheme();
      }
    }

    private static class searchEntityOrKey_argsTupleScheme extends TupleScheme<searchEntityOrKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchEntityOrKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeywords()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        if (struct.isSetIs_entity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKeywords()) {
          {
            oprot.writeI32(struct.keywords.size());
            for (String _iter886 : struct.keywords)
            {
              oprot.writeString(_iter886);
            }
          }
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetIs_entity()) {
          oprot.writeBool(struct.is_entity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchEntityOrKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list887 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keywords = new ArrayList<String>(_list887.size);
            String _elem888;
            for (int _i889 = 0; _i889 < _list887.size; ++_i889)
            {
              _elem888 = iprot.readString();
              struct.keywords.add(_elem888);
            }
          }
          struct.setKeywordsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(2)) {
          struct.is_entity = iprot.readBool();
          struct.setIs_entityIsSet(true);
        }
      }
    }

  }

  public static class searchEntityOrKey_result implements org.apache.thrift.TBase<searchEntityOrKey_result, searchEntityOrKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchEntityOrKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchEntityOrKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchEntityOrKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchEntityOrKey_resultTupleSchemeFactory());
    }

    public OdsKeyEntityMapperResult success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)-1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OdsKeyEntityMapperResult.class)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchEntityOrKey_result.class, metaDataMap);
    }

    public searchEntityOrKey_result() {
    }

    public searchEntityOrKey_result(
      OdsKeyEntityMapperResult success,
      OdsException oe)
    {
      this();
      this.success = success;
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchEntityOrKey_result(searchEntityOrKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new OdsKeyEntityMapperResult(other.success);
      }
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public searchEntityOrKey_result deepCopy() {
      return new searchEntityOrKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oe = null;
    }

    public OdsKeyEntityMapperResult getSuccess() {
      return this.success;
    }

    public searchEntityOrKey_result setSuccess(OdsKeyEntityMapperResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OdsException getOe() {
      return this.oe;
    }

    public searchEntityOrKey_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OdsKeyEntityMapperResult)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchEntityOrKey_result)
        return this.equals((searchEntityOrKey_result)that);
      return false;
    }

    public boolean equals(searchEntityOrKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchEntityOrKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchEntityOrKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchEntityOrKey_resultStandardSchemeFactory implements SchemeFactory {
      public searchEntityOrKey_resultStandardScheme getScheme() {
        return new searchEntityOrKey_resultStandardScheme();
      }
    }

    private static class searchEntityOrKey_resultStandardScheme extends StandardScheme<searchEntityOrKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchEntityOrKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OdsKeyEntityMapperResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchEntityOrKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchEntityOrKey_resultTupleSchemeFactory implements SchemeFactory {
      public searchEntityOrKey_resultTupleScheme getScheme() {
        return new searchEntityOrKey_resultTupleScheme();
      }
    }

    private static class searchEntityOrKey_resultTupleScheme extends TupleScheme<searchEntityOrKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchEntityOrKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchEntityOrKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OdsKeyEntityMapperResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getRecentEntities_args implements org.apache.thrift.TBase<getRecentEntities_args, getRecentEntities_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentEntities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentEntities_args");

    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entity_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecentEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecentEntities_argsTupleSchemeFactory());
    }

    public int entity_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_ID((short)1, "entity_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_ID
            return ENTITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTITY_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entity_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentEntities_args.class, metaDataMap);
    }

    public getRecentEntities_args() {
    }

    public getRecentEntities_args(
      int entity_id)
    {
      this();
      this.entity_id = entity_id;
      setEntity_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentEntities_args(getRecentEntities_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.entity_id = other.entity_id;
    }

    public getRecentEntities_args deepCopy() {
      return new getRecentEntities_args(this);
    }

    @Override
    public void clear() {
      setEntity_idIsSet(false);
      this.entity_id = 0;
    }

    public int getEntity_id() {
      return this.entity_id;
    }

    public getRecentEntities_args setEntity_id(int entity_id) {
      this.entity_id = entity_id;
      setEntity_idIsSet(true);
      return this;
    }

    public void unsetEntity_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITY_ID_ISSET_ID);
    }

    /** Returns true if field entity_id is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity_id() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTITY_ID_ISSET_ID);
    }

    public void setEntity_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_ID:
        if (value == null) {
          unsetEntity_id();
        } else {
          setEntity_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_ID:
        return Integer.valueOf(getEntity_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_ID:
        return isSetEntity_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentEntities_args)
        return this.equals((getRecentEntities_args)that);
      return false;
    }

    public boolean equals(getRecentEntities_args that) {
      if (that == null)
        return false;

      boolean this_present_entity_id = true;
      boolean that_present_entity_id = true;
      if (this_present_entity_id || that_present_entity_id) {
        if (!(this_present_entity_id && that_present_entity_id))
          return false;
        if (this.entity_id != that.entity_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entity_id = true;
      list.add(present_entity_id);
      if (present_entity_id)
        list.add(entity_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecentEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntity_id()).compareTo(other.isSetEntity_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity_id, other.entity_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecentEntities_args(");
      boolean first = true;

      sb.append("entity_id:");
      sb.append(this.entity_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecentEntities_argsStandardSchemeFactory implements SchemeFactory {
      public getRecentEntities_argsStandardScheme getScheme() {
        return new getRecentEntities_argsStandardScheme();
      }
    }

    private static class getRecentEntities_argsStandardScheme extends StandardScheme<getRecentEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entity_id = iprot.readI32();
                struct.setEntity_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeI32(struct.entity_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentEntities_argsTupleSchemeFactory implements SchemeFactory {
      public getRecentEntities_argsTupleScheme getScheme() {
        return new getRecentEntities_argsTupleScheme();
      }
    }

    private static class getRecentEntities_argsTupleScheme extends TupleScheme<getRecentEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntity_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntity_id()) {
          oprot.writeI32(struct.entity_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entity_id = iprot.readI32();
          struct.setEntity_idIsSet(true);
        }
      }
    }

  }

  public static class getRecentEntities_result implements org.apache.thrift.TBase<getRecentEntities_result, getRecentEntities_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentEntities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecentEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecentEntities_resultTupleSchemeFactory());
    }

    public RecentEntitiesOrKeys success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecentEntitiesOrKeys.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentEntities_result.class, metaDataMap);
    }

    public getRecentEntities_result() {
    }

    public getRecentEntities_result(
      RecentEntitiesOrKeys success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentEntities_result(getRecentEntities_result other) {
      if (other.isSetSuccess()) {
        this.success = new RecentEntitiesOrKeys(other.success);
      }
    }

    public getRecentEntities_result deepCopy() {
      return new getRecentEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RecentEntitiesOrKeys getSuccess() {
      return this.success;
    }

    public getRecentEntities_result setSuccess(RecentEntitiesOrKeys success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RecentEntitiesOrKeys)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentEntities_result)
        return this.equals((getRecentEntities_result)that);
      return false;
    }

    public boolean equals(getRecentEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecentEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecentEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecentEntities_resultStandardSchemeFactory implements SchemeFactory {
      public getRecentEntities_resultStandardScheme getScheme() {
        return new getRecentEntities_resultStandardScheme();
      }
    }

    private static class getRecentEntities_resultStandardScheme extends StandardScheme<getRecentEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RecentEntitiesOrKeys();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentEntities_resultTupleSchemeFactory implements SchemeFactory {
      public getRecentEntities_resultTupleScheme getScheme() {
        return new getRecentEntities_resultTupleScheme();
      }
    }

    private static class getRecentEntities_resultTupleScheme extends TupleScheme<getRecentEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RecentEntitiesOrKeys();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecentKeys_args implements org.apache.thrift.TBase<getRecentKeys_args, getRecentKeys_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentKeys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentKeys_args");

    private static final org.apache.thrift.protocol.TField KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("key_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecentKeys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecentKeys_argsTupleSchemeFactory());
    }

    public int key_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY_ID((short)1, "key_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY_ID
            return KEY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("key_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentKeys_args.class, metaDataMap);
    }

    public getRecentKeys_args() {
    }

    public getRecentKeys_args(
      int key_id)
    {
      this();
      this.key_id = key_id;
      setKey_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentKeys_args(getRecentKeys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key_id = other.key_id;
    }

    public getRecentKeys_args deepCopy() {
      return new getRecentKeys_args(this);
    }

    @Override
    public void clear() {
      setKey_idIsSet(false);
      this.key_id = 0;
    }

    public int getKey_id() {
      return this.key_id;
    }

    public getRecentKeys_args setKey_id(int key_id) {
      this.key_id = key_id;
      setKey_idIsSet(true);
      return this;
    }

    public void unsetKey_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ID_ISSET_ID);
    }

    /** Returns true if field key_id is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_id() {
      return EncodingUtils.testBit(__isset_bitfield, __KEY_ID_ISSET_ID);
    }

    public void setKey_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY_ID:
        if (value == null) {
          unsetKey_id();
        } else {
          setKey_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY_ID:
        return Integer.valueOf(getKey_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY_ID:
        return isSetKey_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentKeys_args)
        return this.equals((getRecentKeys_args)that);
      return false;
    }

    public boolean equals(getRecentKeys_args that) {
      if (that == null)
        return false;

      boolean this_present_key_id = true;
      boolean that_present_key_id = true;
      if (this_present_key_id || that_present_key_id) {
        if (!(this_present_key_id && that_present_key_id))
          return false;
        if (this.key_id != that.key_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key_id = true;
      list.add(present_key_id);
      if (present_key_id)
        list.add(key_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecentKeys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey_id()).compareTo(other.isSetKey_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_id, other.key_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecentKeys_args(");
      boolean first = true;

      sb.append("key_id:");
      sb.append(this.key_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecentKeys_argsStandardSchemeFactory implements SchemeFactory {
      public getRecentKeys_argsStandardScheme getScheme() {
        return new getRecentKeys_argsStandardScheme();
      }
    }

    private static class getRecentKeys_argsStandardScheme extends StandardScheme<getRecentKeys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentKeys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.key_id = iprot.readI32();
                struct.setKey_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentKeys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_ID_FIELD_DESC);
        oprot.writeI32(struct.key_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentKeys_argsTupleSchemeFactory implements SchemeFactory {
      public getRecentKeys_argsTupleScheme getScheme() {
        return new getRecentKeys_argsTupleScheme();
      }
    }

    private static class getRecentKeys_argsTupleScheme extends TupleScheme<getRecentKeys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey_id()) {
          oprot.writeI32(struct.key_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key_id = iprot.readI32();
          struct.setKey_idIsSet(true);
        }
      }
    }

  }

  public static class getRecentKeys_result implements org.apache.thrift.TBase<getRecentKeys_result, getRecentKeys_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecentKeys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecentKeys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecentKeys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecentKeys_resultTupleSchemeFactory());
    }

    public RecentEntitiesOrKeys success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecentEntitiesOrKeys.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecentKeys_result.class, metaDataMap);
    }

    public getRecentKeys_result() {
    }

    public getRecentKeys_result(
      RecentEntitiesOrKeys success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentKeys_result(getRecentKeys_result other) {
      if (other.isSetSuccess()) {
        this.success = new RecentEntitiesOrKeys(other.success);
      }
    }

    public getRecentKeys_result deepCopy() {
      return new getRecentKeys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RecentEntitiesOrKeys getSuccess() {
      return this.success;
    }

    public getRecentKeys_result setSuccess(RecentEntitiesOrKeys success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RecentEntitiesOrKeys)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentKeys_result)
        return this.equals((getRecentKeys_result)that);
      return false;
    }

    public boolean equals(getRecentKeys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecentKeys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecentKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecentKeys_resultStandardSchemeFactory implements SchemeFactory {
      public getRecentKeys_resultStandardScheme getScheme() {
        return new getRecentKeys_resultStandardScheme();
      }
    }

    private static class getRecentKeys_resultStandardScheme extends StandardScheme<getRecentKeys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecentKeys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RecentEntitiesOrKeys();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecentKeys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecentKeys_resultTupleSchemeFactory implements SchemeFactory {
      public getRecentKeys_resultTupleScheme getScheme() {
        return new getRecentKeys_resultTupleScheme();
      }
    }

    private static class getRecentKeys_resultTupleScheme extends TupleScheme<getRecentKeys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecentKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecentKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RecentEntitiesOrKeys();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntityIdByName_args implements org.apache.thrift.TBase<getEntityIdByName_args, getEntityIdByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityIdByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityIdByName_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityIdByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityIdByName_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityIdByName_args.class, metaDataMap);
    }

    public getEntityIdByName_args() {
    }

    public getEntityIdByName_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityIdByName_args(getEntityIdByName_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getEntityIdByName_args deepCopy() {
      return new getEntityIdByName_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public getEntityIdByName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityIdByName_args)
        return this.equals((getEntityIdByName_args)that);
      return false;
    }

    public boolean equals(getEntityIdByName_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityIdByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityIdByName_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityIdByName_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityIdByName_argsStandardScheme getScheme() {
        return new getEntityIdByName_argsStandardScheme();
      }
    }

    private static class getEntityIdByName_argsStandardScheme extends StandardScheme<getEntityIdByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityIdByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityIdByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityIdByName_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityIdByName_argsTupleScheme getScheme() {
        return new getEntityIdByName_argsTupleScheme();
      }
    }

    private static class getEntityIdByName_argsTupleScheme extends TupleScheme<getEntityIdByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityIdByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityIdByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getEntityIdByName_result implements org.apache.thrift.TBase<getEntityIdByName_result, getEntityIdByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityIdByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityIdByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityIdByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityIdByName_resultTupleSchemeFactory());
    }

    public long success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityIdByName_result.class, metaDataMap);
    }

    public getEntityIdByName_result() {
    }

    public getEntityIdByName_result(
      long success,
      OdsException oe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityIdByName_result(getEntityIdByName_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getEntityIdByName_result deepCopy() {
      return new getEntityIdByName_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.oe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getEntityIdByName_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getEntityIdByName_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityIdByName_result)
        return this.equals((getEntityIdByName_result)that);
      return false;
    }

    public boolean equals(getEntityIdByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityIdByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityIdByName_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityIdByName_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityIdByName_resultStandardScheme getScheme() {
        return new getEntityIdByName_resultStandardScheme();
      }
    }

    private static class getEntityIdByName_resultStandardScheme extends StandardScheme<getEntityIdByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityIdByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityIdByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityIdByName_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityIdByName_resultTupleScheme getScheme() {
        return new getEntityIdByName_resultTupleScheme();
      }
    }

    private static class getEntityIdByName_resultTupleScheme extends TupleScheme<getEntityIdByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityIdByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityIdByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getMaxEntityId_args implements org.apache.thrift.TBase<getMaxEntityId_args, getMaxEntityId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMaxEntityId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxEntityId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxEntityId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxEntityId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxEntityId_args.class, metaDataMap);
    }

    public getMaxEntityId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxEntityId_args(getMaxEntityId_args other) {
    }

    public getMaxEntityId_args deepCopy() {
      return new getMaxEntityId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxEntityId_args)
        return this.equals((getMaxEntityId_args)that);
      return false;
    }

    public boolean equals(getMaxEntityId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getMaxEntityId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxEntityId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxEntityId_argsStandardSchemeFactory implements SchemeFactory {
      public getMaxEntityId_argsStandardScheme getScheme() {
        return new getMaxEntityId_argsStandardScheme();
      }
    }

    private static class getMaxEntityId_argsStandardScheme extends StandardScheme<getMaxEntityId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxEntityId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxEntityId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxEntityId_argsTupleSchemeFactory implements SchemeFactory {
      public getMaxEntityId_argsTupleScheme getScheme() {
        return new getMaxEntityId_argsTupleScheme();
      }
    }

    private static class getMaxEntityId_argsTupleScheme extends TupleScheme<getMaxEntityId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxEntityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxEntityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMaxEntityId_result implements org.apache.thrift.TBase<getMaxEntityId_result, getMaxEntityId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMaxEntityId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxEntityId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxEntityId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxEntityId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxEntityId_result.class, metaDataMap);
    }

    public getMaxEntityId_result() {
    }

    public getMaxEntityId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxEntityId_result(getMaxEntityId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getMaxEntityId_result deepCopy() {
      return new getMaxEntityId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getMaxEntityId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxEntityId_result)
        return this.equals((getMaxEntityId_result)that);
      return false;
    }

    public boolean equals(getMaxEntityId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMaxEntityId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxEntityId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxEntityId_resultStandardSchemeFactory implements SchemeFactory {
      public getMaxEntityId_resultStandardScheme getScheme() {
        return new getMaxEntityId_resultStandardScheme();
      }
    }

    private static class getMaxEntityId_resultStandardScheme extends StandardScheme<getMaxEntityId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxEntityId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxEntityId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxEntityId_resultTupleSchemeFactory implements SchemeFactory {
      public getMaxEntityId_resultTupleScheme getScheme() {
        return new getMaxEntityId_resultTupleScheme();
      }
    }

    private static class getMaxEntityId_resultTupleScheme extends TupleScheme<getMaxEntityId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxEntityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxEntityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getKeyIdByName_args implements org.apache.thrift.TBase<getKeyIdByName_args, getKeyIdByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getKeyIdByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeyIdByName_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeyIdByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeyIdByName_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeyIdByName_args.class, metaDataMap);
    }

    public getKeyIdByName_args() {
    }

    public getKeyIdByName_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeyIdByName_args(getKeyIdByName_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getKeyIdByName_args deepCopy() {
      return new getKeyIdByName_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public getKeyIdByName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeyIdByName_args)
        return this.equals((getKeyIdByName_args)that);
      return false;
    }

    public boolean equals(getKeyIdByName_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeyIdByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeyIdByName_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeyIdByName_argsStandardSchemeFactory implements SchemeFactory {
      public getKeyIdByName_argsStandardScheme getScheme() {
        return new getKeyIdByName_argsStandardScheme();
      }
    }

    private static class getKeyIdByName_argsStandardScheme extends StandardScheme<getKeyIdByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeyIdByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeyIdByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeyIdByName_argsTupleSchemeFactory implements SchemeFactory {
      public getKeyIdByName_argsTupleScheme getScheme() {
        return new getKeyIdByName_argsTupleScheme();
      }
    }

    private static class getKeyIdByName_argsTupleScheme extends TupleScheme<getKeyIdByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeyIdByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeyIdByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getKeyIdByName_result implements org.apache.thrift.TBase<getKeyIdByName_result, getKeyIdByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getKeyIdByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKeyIdByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKeyIdByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKeyIdByName_resultTupleSchemeFactory());
    }

    public long success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKeyIdByName_result.class, metaDataMap);
    }

    public getKeyIdByName_result() {
    }

    public getKeyIdByName_result(
      long success,
      OdsException oe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKeyIdByName_result(getKeyIdByName_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getKeyIdByName_result deepCopy() {
      return new getKeyIdByName_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.oe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getKeyIdByName_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getKeyIdByName_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKeyIdByName_result)
        return this.equals((getKeyIdByName_result)that);
      return false;
    }

    public boolean equals(getKeyIdByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKeyIdByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKeyIdByName_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKeyIdByName_resultStandardSchemeFactory implements SchemeFactory {
      public getKeyIdByName_resultStandardScheme getScheme() {
        return new getKeyIdByName_resultStandardScheme();
      }
    }

    private static class getKeyIdByName_resultStandardScheme extends StandardScheme<getKeyIdByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKeyIdByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKeyIdByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKeyIdByName_resultTupleSchemeFactory implements SchemeFactory {
      public getKeyIdByName_resultTupleScheme getScheme() {
        return new getKeyIdByName_resultTupleScheme();
      }
    }

    private static class getKeyIdByName_resultTupleScheme extends TupleScheme<getKeyIdByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKeyIdByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKeyIdByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getMaxKeyId_args implements org.apache.thrift.TBase<getMaxKeyId_args, getMaxKeyId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMaxKeyId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxKeyId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxKeyId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxKeyId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxKeyId_args.class, metaDataMap);
    }

    public getMaxKeyId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxKeyId_args(getMaxKeyId_args other) {
    }

    public getMaxKeyId_args deepCopy() {
      return new getMaxKeyId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxKeyId_args)
        return this.equals((getMaxKeyId_args)that);
      return false;
    }

    public boolean equals(getMaxKeyId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getMaxKeyId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxKeyId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxKeyId_argsStandardSchemeFactory implements SchemeFactory {
      public getMaxKeyId_argsStandardScheme getScheme() {
        return new getMaxKeyId_argsStandardScheme();
      }
    }

    private static class getMaxKeyId_argsStandardScheme extends StandardScheme<getMaxKeyId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxKeyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxKeyId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxKeyId_argsTupleSchemeFactory implements SchemeFactory {
      public getMaxKeyId_argsTupleScheme getScheme() {
        return new getMaxKeyId_argsTupleScheme();
      }
    }

    private static class getMaxKeyId_argsTupleScheme extends TupleScheme<getMaxKeyId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxKeyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxKeyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMaxKeyId_result implements org.apache.thrift.TBase<getMaxKeyId_result, getMaxKeyId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMaxKeyId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxKeyId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxKeyId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxKeyId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxKeyId_result.class, metaDataMap);
    }

    public getMaxKeyId_result() {
    }

    public getMaxKeyId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxKeyId_result(getMaxKeyId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getMaxKeyId_result deepCopy() {
      return new getMaxKeyId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getMaxKeyId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxKeyId_result)
        return this.equals((getMaxKeyId_result)that);
      return false;
    }

    public boolean equals(getMaxKeyId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMaxKeyId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxKeyId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxKeyId_resultStandardSchemeFactory implements SchemeFactory {
      public getMaxKeyId_resultStandardScheme getScheme() {
        return new getMaxKeyId_resultStandardScheme();
      }
    }

    private static class getMaxKeyId_resultStandardScheme extends StandardScheme<getMaxKeyId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxKeyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxKeyId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxKeyId_resultTupleSchemeFactory implements SchemeFactory {
      public getMaxKeyId_resultTupleScheme getScheme() {
        return new getMaxKeyId_resultTupleScheme();
      }
    }

    private static class getMaxKeyId_resultTupleScheme extends TupleScheme<getMaxKeyId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxKeyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxKeyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDdbIdByEntityId_args implements org.apache.thrift.TBase<getDdbIdByEntityId_args, getDdbIdByEntityId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDdbIdByEntityId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDdbIdByEntityId_args");

    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDdbIdByEntityId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDdbIdByEntityId_argsTupleSchemeFactory());
    }

    public long entityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_ID((short)1, "entityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_ID
            return ENTITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDdbIdByEntityId_args.class, metaDataMap);
    }

    public getDdbIdByEntityId_args() {
    }

    public getDdbIdByEntityId_args(
      long entityId)
    {
      this();
      this.entityId = entityId;
      setEntityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDdbIdByEntityId_args(getDdbIdByEntityId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.entityId = other.entityId;
    }

    public getDdbIdByEntityId_args deepCopy() {
      return new getDdbIdByEntityId_args(this);
    }

    @Override
    public void clear() {
      setEntityIdIsSet(false);
      this.entityId = 0;
    }

    public long getEntityId() {
      return this.entityId;
    }

    public getDdbIdByEntityId_args setEntityId(long entityId) {
      this.entityId = entityId;
      setEntityIdIsSet(true);
      return this;
    }

    public void unsetEntityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITYID_ISSET_ID);
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTITYID_ISSET_ID);
    }

    public void setEntityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_ID:
        return Long.valueOf(getEntityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_ID:
        return isSetEntityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDdbIdByEntityId_args)
        return this.equals((getDdbIdByEntityId_args)that);
      return false;
    }

    public boolean equals(getDdbIdByEntityId_args that) {
      if (that == null)
        return false;

      boolean this_present_entityId = true;
      boolean that_present_entityId = true;
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (this.entityId != that.entityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entityId = true;
      list.add(present_entityId);
      if (present_entityId)
        list.add(entityId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDdbIdByEntityId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(other.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, other.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDdbIdByEntityId_args(");
      boolean first = true;

      sb.append("entityId:");
      sb.append(this.entityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDdbIdByEntityId_argsStandardSchemeFactory implements SchemeFactory {
      public getDdbIdByEntityId_argsStandardScheme getScheme() {
        return new getDdbIdByEntityId_argsStandardScheme();
      }
    }

    private static class getDdbIdByEntityId_argsStandardScheme extends StandardScheme<getDdbIdByEntityId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entityId = iprot.readI64();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeI64(struct.entityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDdbIdByEntityId_argsTupleSchemeFactory implements SchemeFactory {
      public getDdbIdByEntityId_argsTupleScheme getScheme() {
        return new getDdbIdByEntityId_argsTupleScheme();
      }
    }

    private static class getDdbIdByEntityId_argsTupleScheme extends TupleScheme<getDdbIdByEntityId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntityId()) {
          oprot.writeI64(struct.entityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entityId = iprot.readI64();
          struct.setEntityIdIsSet(true);
        }
      }
    }

  }

  public static class getDdbIdByEntityId_result implements org.apache.thrift.TBase<getDdbIdByEntityId_result, getDdbIdByEntityId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDdbIdByEntityId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDdbIdByEntityId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDdbIdByEntityId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDdbIdByEntityId_resultTupleSchemeFactory());
    }

    public long success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDdbIdByEntityId_result.class, metaDataMap);
    }

    public getDdbIdByEntityId_result() {
    }

    public getDdbIdByEntityId_result(
      long success,
      OdsException oe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDdbIdByEntityId_result(getDdbIdByEntityId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getDdbIdByEntityId_result deepCopy() {
      return new getDdbIdByEntityId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.oe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getDdbIdByEntityId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getDdbIdByEntityId_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDdbIdByEntityId_result)
        return this.equals((getDdbIdByEntityId_result)that);
      return false;
    }

    public boolean equals(getDdbIdByEntityId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDdbIdByEntityId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDdbIdByEntityId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDdbIdByEntityId_resultStandardSchemeFactory implements SchemeFactory {
      public getDdbIdByEntityId_resultStandardScheme getScheme() {
        return new getDdbIdByEntityId_resultStandardScheme();
      }
    }

    private static class getDdbIdByEntityId_resultStandardScheme extends StandardScheme<getDdbIdByEntityId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDdbIdByEntityId_resultTupleSchemeFactory implements SchemeFactory {
      public getDdbIdByEntityId_resultTupleScheme getScheme() {
        return new getDdbIdByEntityId_resultTupleScheme();
      }
    }

    private static class getDdbIdByEntityId_resultTupleScheme extends TupleScheme<getDdbIdByEntityId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

  public static class getAggregateDdbIdByEntityId_args implements org.apache.thrift.TBase<getAggregateDdbIdByEntityId_args, getAggregateDdbIdByEntityId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAggregateDdbIdByEntityId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAggregateDdbIdByEntityId_args");

    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAggregateDdbIdByEntityId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAggregateDdbIdByEntityId_argsTupleSchemeFactory());
    }

    public long entityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_ID((short)1, "entityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_ID
            return ENTITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAggregateDdbIdByEntityId_args.class, metaDataMap);
    }

    public getAggregateDdbIdByEntityId_args() {
    }

    public getAggregateDdbIdByEntityId_args(
      long entityId)
    {
      this();
      this.entityId = entityId;
      setEntityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAggregateDdbIdByEntityId_args(getAggregateDdbIdByEntityId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.entityId = other.entityId;
    }

    public getAggregateDdbIdByEntityId_args deepCopy() {
      return new getAggregateDdbIdByEntityId_args(this);
    }

    @Override
    public void clear() {
      setEntityIdIsSet(false);
      this.entityId = 0;
    }

    public long getEntityId() {
      return this.entityId;
    }

    public getAggregateDdbIdByEntityId_args setEntityId(long entityId) {
      this.entityId = entityId;
      setEntityIdIsSet(true);
      return this;
    }

    public void unsetEntityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITYID_ISSET_ID);
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTITYID_ISSET_ID);
    }

    public void setEntityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_ID:
        return Long.valueOf(getEntityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_ID:
        return isSetEntityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAggregateDdbIdByEntityId_args)
        return this.equals((getAggregateDdbIdByEntityId_args)that);
      return false;
    }

    public boolean equals(getAggregateDdbIdByEntityId_args that) {
      if (that == null)
        return false;

      boolean this_present_entityId = true;
      boolean that_present_entityId = true;
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (this.entityId != that.entityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entityId = true;
      list.add(present_entityId);
      if (present_entityId)
        list.add(entityId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAggregateDdbIdByEntityId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(other.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, other.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAggregateDdbIdByEntityId_args(");
      boolean first = true;

      sb.append("entityId:");
      sb.append(this.entityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAggregateDdbIdByEntityId_argsStandardSchemeFactory implements SchemeFactory {
      public getAggregateDdbIdByEntityId_argsStandardScheme getScheme() {
        return new getAggregateDdbIdByEntityId_argsStandardScheme();
      }
    }

    private static class getAggregateDdbIdByEntityId_argsStandardScheme extends StandardScheme<getAggregateDdbIdByEntityId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAggregateDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entityId = iprot.readI64();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAggregateDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeI64(struct.entityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAggregateDdbIdByEntityId_argsTupleSchemeFactory implements SchemeFactory {
      public getAggregateDdbIdByEntityId_argsTupleScheme getScheme() {
        return new getAggregateDdbIdByEntityId_argsTupleScheme();
      }
    }

    private static class getAggregateDdbIdByEntityId_argsTupleScheme extends TupleScheme<getAggregateDdbIdByEntityId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAggregateDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntityId()) {
          oprot.writeI64(struct.entityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAggregateDdbIdByEntityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entityId = iprot.readI64();
          struct.setEntityIdIsSet(true);
        }
      }
    }

  }

  public static class getAggregateDdbIdByEntityId_result implements org.apache.thrift.TBase<getAggregateDdbIdByEntityId_result, getAggregateDdbIdByEntityId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAggregateDdbIdByEntityId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAggregateDdbIdByEntityId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OE_FIELD_DESC = new org.apache.thrift.protocol.TField("oe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAggregateDdbIdByEntityId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAggregateDdbIdByEntityId_resultTupleSchemeFactory());
    }

    public long success; // required
    public OdsException oe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OE((short)1, "oe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OE
            return OE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OE, new org.apache.thrift.meta_data.FieldMetaData("oe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAggregateDdbIdByEntityId_result.class, metaDataMap);
    }

    public getAggregateDdbIdByEntityId_result() {
    }

    public getAggregateDdbIdByEntityId_result(
      long success,
      OdsException oe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.oe = oe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAggregateDdbIdByEntityId_result(getAggregateDdbIdByEntityId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOe()) {
        this.oe = new OdsException(other.oe);
      }
    }

    public getAggregateDdbIdByEntityId_result deepCopy() {
      return new getAggregateDdbIdByEntityId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.oe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getAggregateDdbIdByEntityId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public OdsException getOe() {
      return this.oe;
    }

    public getAggregateDdbIdByEntityId_result setOe(OdsException oe) {
      this.oe = oe;
      return this;
    }

    public void unsetOe() {
      this.oe = null;
    }

    /** Returns true if field oe is set (has been assigned a value) and false otherwise */
    public boolean isSetOe() {
      return this.oe != null;
    }

    public void setOeIsSet(boolean value) {
      if (!value) {
        this.oe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OE:
        if (value == null) {
          unsetOe();
        } else {
          setOe((OdsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case OE:
        return getOe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OE:
        return isSetOe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAggregateDdbIdByEntityId_result)
        return this.equals((getAggregateDdbIdByEntityId_result)that);
      return false;
    }

    public boolean equals(getAggregateDdbIdByEntityId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_oe = true && this.isSetOe();
      boolean that_present_oe = true && that.isSetOe();
      if (this_present_oe || that_present_oe) {
        if (!(this_present_oe && that_present_oe))
          return false;
        if (!this.oe.equals(that.oe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_oe = true && (isSetOe());
      list.add(present_oe);
      if (present_oe)
        list.add(oe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAggregateDdbIdByEntityId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOe()).compareTo(other.isSetOe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oe, other.oe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAggregateDdbIdByEntityId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oe:");
      if (this.oe == null) {
        sb.append("null");
      } else {
        sb.append(this.oe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAggregateDdbIdByEntityId_resultStandardSchemeFactory implements SchemeFactory {
      public getAggregateDdbIdByEntityId_resultStandardScheme getScheme() {
        return new getAggregateDdbIdByEntityId_resultStandardScheme();
      }
    }

    private static class getAggregateDdbIdByEntityId_resultStandardScheme extends StandardScheme<getAggregateDdbIdByEntityId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAggregateDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oe = new OdsException();
                struct.oe.read(iprot);
                struct.setOeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAggregateDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.oe != null) {
          oprot.writeFieldBegin(OE_FIELD_DESC);
          struct.oe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAggregateDdbIdByEntityId_resultTupleSchemeFactory implements SchemeFactory {
      public getAggregateDdbIdByEntityId_resultTupleScheme getScheme() {
        return new getAggregateDdbIdByEntityId_resultTupleScheme();
      }
    }

    private static class getAggregateDdbIdByEntityId_resultTupleScheme extends TupleScheme<getAggregateDdbIdByEntityId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAggregateDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOe()) {
          struct.oe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAggregateDdbIdByEntityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oe = new OdsException();
          struct.oe.read(iprot);
          struct.setOeIsSet(true);
        }
      }
    }

  }

}
