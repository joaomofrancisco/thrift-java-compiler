/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.maestro;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-22")
public class ODSRateOfChangeKeyInfo implements org.apache.thrift.TBase<ODSRateOfChangeKeyInfo, ODSRateOfChangeKeyInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ODSRateOfChangeKeyInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ODSRateOfChangeKeyInfo");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UNIX_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("unixTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ALLOWABLE_TIME_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("allowable_time_diff", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_rate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_rate", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ODSRateOfChangeKeyInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ODSRateOfChangeKeyInfoTupleSchemeFactory());
  }

  public String key; // required
  public long unixTime; // required
  public long allowable_time_diff; // required
  public long value; // required
  public long min_rate; // required
  public long max_rate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    UNIX_TIME((short)2, "unixTime"),
    ALLOWABLE_TIME_DIFF((short)3, "allowable_time_diff"),
    VALUE((short)4, "value"),
    MIN_RATE((short)5, "min_rate"),
    MAX_RATE((short)6, "max_rate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // UNIX_TIME
          return UNIX_TIME;
        case 3: // ALLOWABLE_TIME_DIFF
          return ALLOWABLE_TIME_DIFF;
        case 4: // VALUE
          return VALUE;
        case 5: // MIN_RATE
          return MIN_RATE;
        case 6: // MAX_RATE
          return MAX_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNIXTIME_ISSET_ID = 0;
  private static final int __ALLOWABLE_TIME_DIFF_ISSET_ID = 1;
  private static final int __VALUE_ISSET_ID = 2;
  private static final int __MIN_RATE_ISSET_ID = 3;
  private static final int __MAX_RATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIX_TIME, new org.apache.thrift.meta_data.FieldMetaData("unixTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALLOWABLE_TIME_DIFF, new org.apache.thrift.meta_data.FieldMetaData("allowable_time_diff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("min_rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_RATE, new org.apache.thrift.meta_data.FieldMetaData("max_rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ODSRateOfChangeKeyInfo.class, metaDataMap);
  }

  public ODSRateOfChangeKeyInfo() {
  }

  public ODSRateOfChangeKeyInfo(
    String key,
    long unixTime,
    long allowable_time_diff,
    long value,
    long min_rate,
    long max_rate)
  {
    this();
    this.key = key;
    this.unixTime = unixTime;
    setUnixTimeIsSet(true);
    this.allowable_time_diff = allowable_time_diff;
    setAllowable_time_diffIsSet(true);
    this.value = value;
    setValueIsSet(true);
    this.min_rate = min_rate;
    setMin_rateIsSet(true);
    this.max_rate = max_rate;
    setMax_rateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ODSRateOfChangeKeyInfo(ODSRateOfChangeKeyInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKey()) {
      this.key = other.key;
    }
    this.unixTime = other.unixTime;
    this.allowable_time_diff = other.allowable_time_diff;
    this.value = other.value;
    this.min_rate = other.min_rate;
    this.max_rate = other.max_rate;
  }

  public ODSRateOfChangeKeyInfo deepCopy() {
    return new ODSRateOfChangeKeyInfo(this);
  }

  @Override
  public void clear() {
    this.key = null;
    setUnixTimeIsSet(false);
    this.unixTime = 0;
    setAllowable_time_diffIsSet(false);
    this.allowable_time_diff = 0;
    setValueIsSet(false);
    this.value = 0;
    setMin_rateIsSet(false);
    this.min_rate = 0;
    setMax_rateIsSet(false);
    this.max_rate = 0;
  }

  public String getKey() {
    return this.key;
  }

  public ODSRateOfChangeKeyInfo setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public long getUnixTime() {
    return this.unixTime;
  }

  public ODSRateOfChangeKeyInfo setUnixTime(long unixTime) {
    this.unixTime = unixTime;
    setUnixTimeIsSet(true);
    return this;
  }

  public void unsetUnixTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIXTIME_ISSET_ID);
  }

  /** Returns true if field unixTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUnixTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UNIXTIME_ISSET_ID);
  }

  public void setUnixTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIXTIME_ISSET_ID, value);
  }

  public long getAllowable_time_diff() {
    return this.allowable_time_diff;
  }

  public ODSRateOfChangeKeyInfo setAllowable_time_diff(long allowable_time_diff) {
    this.allowable_time_diff = allowable_time_diff;
    setAllowable_time_diffIsSet(true);
    return this;
  }

  public void unsetAllowable_time_diff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWABLE_TIME_DIFF_ISSET_ID);
  }

  /** Returns true if field allowable_time_diff is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowable_time_diff() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWABLE_TIME_DIFF_ISSET_ID);
  }

  public void setAllowable_time_diffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWABLE_TIME_DIFF_ISSET_ID, value);
  }

  public long getValue() {
    return this.value;
  }

  public ODSRateOfChangeKeyInfo setValue(long value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public long getMin_rate() {
    return this.min_rate;
  }

  public ODSRateOfChangeKeyInfo setMin_rate(long min_rate) {
    this.min_rate = min_rate;
    setMin_rateIsSet(true);
    return this;
  }

  public void unsetMin_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_RATE_ISSET_ID);
  }

  /** Returns true if field min_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_RATE_ISSET_ID);
  }

  public void setMin_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_RATE_ISSET_ID, value);
  }

  public long getMax_rate() {
    return this.max_rate;
  }

  public ODSRateOfChangeKeyInfo setMax_rate(long max_rate) {
    this.max_rate = max_rate;
    setMax_rateIsSet(true);
    return this;
  }

  public void unsetMax_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_RATE_ISSET_ID);
  }

  /** Returns true if field max_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_RATE_ISSET_ID);
  }

  public void setMax_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_RATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case UNIX_TIME:
      if (value == null) {
        unsetUnixTime();
      } else {
        setUnixTime((Long)value);
      }
      break;

    case ALLOWABLE_TIME_DIFF:
      if (value == null) {
        unsetAllowable_time_diff();
      } else {
        setAllowable_time_diff((Long)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Long)value);
      }
      break;

    case MIN_RATE:
      if (value == null) {
        unsetMin_rate();
      } else {
        setMin_rate((Long)value);
      }
      break;

    case MAX_RATE:
      if (value == null) {
        unsetMax_rate();
      } else {
        setMax_rate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case UNIX_TIME:
      return Long.valueOf(getUnixTime());

    case ALLOWABLE_TIME_DIFF:
      return Long.valueOf(getAllowable_time_diff());

    case VALUE:
      return Long.valueOf(getValue());

    case MIN_RATE:
      return Long.valueOf(getMin_rate());

    case MAX_RATE:
      return Long.valueOf(getMax_rate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case UNIX_TIME:
      return isSetUnixTime();
    case ALLOWABLE_TIME_DIFF:
      return isSetAllowable_time_diff();
    case VALUE:
      return isSetValue();
    case MIN_RATE:
      return isSetMin_rate();
    case MAX_RATE:
      return isSetMax_rate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ODSRateOfChangeKeyInfo)
      return this.equals((ODSRateOfChangeKeyInfo)that);
    return false;
  }

  public boolean equals(ODSRateOfChangeKeyInfo that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_unixTime = true;
    boolean that_present_unixTime = true;
    if (this_present_unixTime || that_present_unixTime) {
      if (!(this_present_unixTime && that_present_unixTime))
        return false;
      if (this.unixTime != that.unixTime)
        return false;
    }

    boolean this_present_allowable_time_diff = true;
    boolean that_present_allowable_time_diff = true;
    if (this_present_allowable_time_diff || that_present_allowable_time_diff) {
      if (!(this_present_allowable_time_diff && that_present_allowable_time_diff))
        return false;
      if (this.allowable_time_diff != that.allowable_time_diff)
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_min_rate = true;
    boolean that_present_min_rate = true;
    if (this_present_min_rate || that_present_min_rate) {
      if (!(this_present_min_rate && that_present_min_rate))
        return false;
      if (this.min_rate != that.min_rate)
        return false;
    }

    boolean this_present_max_rate = true;
    boolean that_present_max_rate = true;
    if (this_present_max_rate || that_present_max_rate) {
      if (!(this_present_max_rate && that_present_max_rate))
        return false;
      if (this.max_rate != that.max_rate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_key = true && (isSetKey());
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_unixTime = true;
    list.add(present_unixTime);
    if (present_unixTime)
      list.add(unixTime);

    boolean present_allowable_time_diff = true;
    list.add(present_allowable_time_diff);
    if (present_allowable_time_diff)
      list.add(allowable_time_diff);

    boolean present_value = true;
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_min_rate = true;
    list.add(present_min_rate);
    if (present_min_rate)
      list.add(min_rate);

    boolean present_max_rate = true;
    list.add(present_max_rate);
    if (present_max_rate)
      list.add(max_rate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ODSRateOfChangeKeyInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnixTime()).compareTo(other.isSetUnixTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnixTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unixTime, other.unixTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowable_time_diff()).compareTo(other.isSetAllowable_time_diff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowable_time_diff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowable_time_diff, other.allowable_time_diff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_rate()).compareTo(other.isSetMin_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_rate, other.min_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_rate()).compareTo(other.isSetMax_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_rate, other.max_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ODSRateOfChangeKeyInfo(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unixTime:");
    sb.append(this.unixTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowable_time_diff:");
    sb.append(this.allowable_time_diff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_rate:");
    sb.append(this.min_rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_rate:");
    sb.append(this.max_rate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ODSRateOfChangeKeyInfoStandardSchemeFactory implements SchemeFactory {
    public ODSRateOfChangeKeyInfoStandardScheme getScheme() {
      return new ODSRateOfChangeKeyInfoStandardScheme();
    }
  }

  private static class ODSRateOfChangeKeyInfoStandardScheme extends StandardScheme<ODSRateOfChangeKeyInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ODSRateOfChangeKeyInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNIX_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unixTime = iprot.readI64();
              struct.setUnixTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALLOWABLE_TIME_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.allowable_time_diff = iprot.readI64();
              struct.setAllowable_time_diffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.value = iprot.readI64();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_rate = iprot.readI64();
              struct.setMin_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_rate = iprot.readI64();
              struct.setMax_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ODSRateOfChangeKeyInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNIX_TIME_FIELD_DESC);
      oprot.writeI64(struct.unixTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALLOWABLE_TIME_DIFF_FIELD_DESC);
      oprot.writeI64(struct.allowable_time_diff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeI64(struct.value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_RATE_FIELD_DESC);
      oprot.writeI64(struct.min_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RATE_FIELD_DESC);
      oprot.writeI64(struct.max_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ODSRateOfChangeKeyInfoTupleSchemeFactory implements SchemeFactory {
    public ODSRateOfChangeKeyInfoTupleScheme getScheme() {
      return new ODSRateOfChangeKeyInfoTupleScheme();
    }
  }

  private static class ODSRateOfChangeKeyInfoTupleScheme extends TupleScheme<ODSRateOfChangeKeyInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ODSRateOfChangeKeyInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetUnixTime()) {
        optionals.set(1);
      }
      if (struct.isSetAllowable_time_diff()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      if (struct.isSetMin_rate()) {
        optionals.set(4);
      }
      if (struct.isSetMax_rate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetKey()) {
        oprot.writeString(struct.key);
      }
      if (struct.isSetUnixTime()) {
        oprot.writeI64(struct.unixTime);
      }
      if (struct.isSetAllowable_time_diff()) {
        oprot.writeI64(struct.allowable_time_diff);
      }
      if (struct.isSetValue()) {
        oprot.writeI64(struct.value);
      }
      if (struct.isSetMin_rate()) {
        oprot.writeI64(struct.min_rate);
      }
      if (struct.isSetMax_rate()) {
        oprot.writeI64(struct.max_rate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ODSRateOfChangeKeyInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.key = iprot.readString();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.unixTime = iprot.readI64();
        struct.setUnixTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.allowable_time_diff = iprot.readI64();
        struct.setAllowable_time_diffIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = iprot.readI64();
        struct.setValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.min_rate = iprot.readI64();
        struct.setMin_rateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_rate = iprot.readI64();
        struct.setMax_rateIsSet(true);
      }
    }
  }

}

