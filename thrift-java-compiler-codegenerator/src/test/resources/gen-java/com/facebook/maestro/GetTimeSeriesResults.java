/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.maestro;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This is a results holder structure for getTimeSeries.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-22")
public class GetTimeSeriesResults implements org.apache.thrift.TBase<GetTimeSeriesResults, GetTimeSeriesResults._Fields>, java.io.Serializable, Cloneable, Comparable<GetTimeSeriesResults> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTimeSeriesResults");

  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetTimeSeriesResultsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetTimeSeriesResultsTupleSchemeFactory());
  }

  public Map<String,Map<String,List<TimeValue>>> data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA((short)1, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeValue.class))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTimeSeriesResults.class, metaDataMap);
  }

  public GetTimeSeriesResults() {
  }

  public GetTimeSeriesResults(
    Map<String,Map<String,List<TimeValue>>> data)
  {
    this();
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTimeSeriesResults(GetTimeSeriesResults other) {
    if (other.isSetData()) {
      Map<String,Map<String,List<TimeValue>>> __this__data = new HashMap<String,Map<String,List<TimeValue>>>(other.data.size());
      for (Map.Entry<String, Map<String,List<TimeValue>>> other_element : other.data.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,List<TimeValue>> other_element_value = other_element.getValue();

        String __this__data_copy_key = other_element_key;

        Map<String,List<TimeValue>> __this__data_copy_value = new HashMap<String,List<TimeValue>>(other_element_value.size());
        for (Map.Entry<String, List<TimeValue>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          List<TimeValue> other_element_value_element_value = other_element_value_element.getValue();

          String __this__data_copy_value_copy_key = other_element_value_element_key;

          List<TimeValue> __this__data_copy_value_copy_value = new ArrayList<TimeValue>(other_element_value_element_value.size());
          for (TimeValue other_element_value_element_value_element : other_element_value_element_value) {
            __this__data_copy_value_copy_value.add(new TimeValue(other_element_value_element_value_element));
          }

          __this__data_copy_value.put(__this__data_copy_value_copy_key, __this__data_copy_value_copy_value);
        }

        __this__data.put(__this__data_copy_key, __this__data_copy_value);
      }
      this.data = __this__data;
    }
  }

  public GetTimeSeriesResults deepCopy() {
    return new GetTimeSeriesResults(this);
  }

  @Override
  public void clear() {
    this.data = null;
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public void putToData(String key, Map<String,List<TimeValue>> val) {
    if (this.data == null) {
      this.data = new HashMap<String,Map<String,List<TimeValue>>>();
    }
    this.data.put(key, val);
  }

  public Map<String,Map<String,List<TimeValue>>> getData() {
    return this.data;
  }

  public GetTimeSeriesResults setData(Map<String,Map<String,List<TimeValue>>> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((Map<String,Map<String,List<TimeValue>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTimeSeriesResults)
      return this.equals((GetTimeSeriesResults)that);
    return false;
  }

  public boolean equals(GetTimeSeriesResults that) {
    if (that == null)
      return false;

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetTimeSeriesResults other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetTimeSeriesResults(");
    boolean first = true;

    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetTimeSeriesResultsStandardSchemeFactory implements SchemeFactory {
    public GetTimeSeriesResultsStandardScheme getScheme() {
      return new GetTimeSeriesResultsStandardScheme();
    }
  }

  private static class GetTimeSeriesResultsStandardScheme extends StandardScheme<GetTimeSeriesResults> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetTimeSeriesResults struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map162 = iprot.readMapBegin();
                struct.data = new HashMap<String,Map<String,List<TimeValue>>>(2*_map162.size);
                String _key163;
                Map<String,List<TimeValue>> _val164;
                for (int _i165 = 0; _i165 < _map162.size; ++_i165)
                {
                  _key163 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map166 = iprot.readMapBegin();
                    _val164 = new HashMap<String,List<TimeValue>>(2*_map166.size);
                    String _key167;
                    List<TimeValue> _val168;
                    for (int _i169 = 0; _i169 < _map166.size; ++_i169)
                    {
                      _key167 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                        _val168 = new ArrayList<TimeValue>(_list170.size);
                        TimeValue _elem171;
                        for (int _i172 = 0; _i172 < _list170.size; ++_i172)
                        {
                          _elem171 = new TimeValue();
                          _elem171.read(iprot);
                          _val168.add(_elem171);
                        }
                        iprot.readListEnd();
                      }
                      _val164.put(_key167, _val168);
                    }
                    iprot.readMapEnd();
                  }
                  struct.data.put(_key163, _val164);
                }
                iprot.readMapEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetTimeSeriesResults struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.data.size()));
          for (Map.Entry<String, Map<String,List<TimeValue>>> _iter173 : struct.data.entrySet())
          {
            oprot.writeString(_iter173.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter173.getValue().size()));
              for (Map.Entry<String, List<TimeValue>> _iter174 : _iter173.getValue().entrySet())
              {
                oprot.writeString(_iter174.getKey());
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter174.getValue().size()));
                  for (TimeValue _iter175 : _iter174.getValue())
                  {
                    _iter175.write(oprot);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetTimeSeriesResultsTupleSchemeFactory implements SchemeFactory {
    public GetTimeSeriesResultsTupleScheme getScheme() {
      return new GetTimeSeriesResultsTupleScheme();
    }
  }

  private static class GetTimeSeriesResultsTupleScheme extends TupleScheme<GetTimeSeriesResults> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetTimeSeriesResults struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (Map.Entry<String, Map<String,List<TimeValue>>> _iter176 : struct.data.entrySet())
          {
            oprot.writeString(_iter176.getKey());
            {
              oprot.writeI32(_iter176.getValue().size());
              for (Map.Entry<String, List<TimeValue>> _iter177 : _iter176.getValue().entrySet())
              {
                oprot.writeString(_iter177.getKey());
                {
                  oprot.writeI32(_iter177.getValue().size());
                  for (TimeValue _iter178 : _iter177.getValue())
                  {
                    _iter178.write(oprot);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetTimeSeriesResults struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map179 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.data = new HashMap<String,Map<String,List<TimeValue>>>(2*_map179.size);
          String _key180;
          Map<String,List<TimeValue>> _val181;
          for (int _i182 = 0; _i182 < _map179.size; ++_i182)
          {
            _key180 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map183 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _val181 = new HashMap<String,List<TimeValue>>(2*_map183.size);
              String _key184;
              List<TimeValue> _val185;
              for (int _i186 = 0; _i186 < _map183.size; ++_i186)
              {
                _key184 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                  _val185 = new ArrayList<TimeValue>(_list187.size);
                  TimeValue _elem188;
                  for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                  {
                    _elem188 = new TimeValue();
                    _elem188.read(iprot);
                    _val185.add(_elem188);
                  }
                }
                _val181.put(_key184, _val185);
              }
            }
            struct.data.put(_key180, _val181);
          }
        }
        struct.setDataIsSet(true);
      }
    }
  }

}

