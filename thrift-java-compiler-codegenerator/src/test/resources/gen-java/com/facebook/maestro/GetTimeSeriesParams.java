/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.maestro;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This is parameter structure for getTimeSeries.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-22")
public class GetTimeSeriesParams implements org.apache.thrift.TBase<GetTimeSeriesParams, GetTimeSeriesParams._Fields>, java.io.Serializable, Cloneable, Comparable<GetTimeSeriesParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTimeSeriesParams");

  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TRACE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("traceData", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetTimeSeriesParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetTimeSeriesParamsTupleSchemeFactory());
  }

  public List<String> entities; // required
  public List<String> keys; // required
  public long startTime; // required
  public long endTime; // required
  /**
   * 
   * @see OdsDataTable
   */
  public OdsDataTable table; // required
  public int window; // required
  /**
   * 
   * @see OdsAggregationType
   */
  public OdsAggregationType aggregationType; // required
  public String traceData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENTITIES((short)1, "entities"),
    KEYS((short)2, "keys"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    /**
     * 
     * @see OdsDataTable
     */
    TABLE((short)5, "table"),
    WINDOW((short)6, "window"),
    /**
     * 
     * @see OdsAggregationType
     */
    AGGREGATION_TYPE((short)7, "aggregationType"),
    TRACE_DATA((short)8, "traceData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTITIES
          return ENTITIES;
        case 2: // KEYS
          return KEYS;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // TABLE
          return TABLE;
        case 6: // WINDOW
          return WINDOW;
        case 7: // AGGREGATION_TYPE
          return AGGREGATION_TYPE;
        case 8: // TRACE_DATA
          return TRACE_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private static final int __WINDOW_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsDataTable.class)));
    tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OdsAggregationType.class)));
    tmpMap.put(_Fields.TRACE_DATA, new org.apache.thrift.meta_data.FieldMetaData("traceData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTimeSeriesParams.class, metaDataMap);
  }

  public GetTimeSeriesParams() {
  }

  public GetTimeSeriesParams(
    List<String> entities,
    List<String> keys,
    long startTime,
    long endTime,
    OdsDataTable table,
    int window,
    OdsAggregationType aggregationType,
    String traceData)
  {
    this();
    this.entities = entities;
    this.keys = keys;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.table = table;
    this.window = window;
    setWindowIsSet(true);
    this.aggregationType = aggregationType;
    this.traceData = traceData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTimeSeriesParams(GetTimeSeriesParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEntities()) {
      List<String> __this__entities = new ArrayList<String>(other.entities);
      this.entities = __this__entities;
    }
    if (other.isSetKeys()) {
      List<String> __this__keys = new ArrayList<String>(other.keys);
      this.keys = __this__keys;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetTable()) {
      this.table = other.table;
    }
    this.window = other.window;
    if (other.isSetAggregationType()) {
      this.aggregationType = other.aggregationType;
    }
    if (other.isSetTraceData()) {
      this.traceData = other.traceData;
    }
  }

  public GetTimeSeriesParams deepCopy() {
    return new GetTimeSeriesParams(this);
  }

  @Override
  public void clear() {
    this.entities = null;
    this.keys = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.table = null;
    setWindowIsSet(false);
    this.window = 0;
    this.aggregationType = null;
    this.traceData = null;
  }

  public int getEntitiesSize() {
    return (this.entities == null) ? 0 : this.entities.size();
  }

  public java.util.Iterator<String> getEntitiesIterator() {
    return (this.entities == null) ? null : this.entities.iterator();
  }

  public void addToEntities(String elem) {
    if (this.entities == null) {
      this.entities = new ArrayList<String>();
    }
    this.entities.add(elem);
  }

  public List<String> getEntities() {
    return this.entities;
  }

  public GetTimeSeriesParams setEntities(List<String> entities) {
    this.entities = entities;
    return this;
  }

  public void unsetEntities() {
    this.entities = null;
  }

  /** Returns true if field entities is set (has been assigned a value) and false otherwise */
  public boolean isSetEntities() {
    return this.entities != null;
  }

  public void setEntitiesIsSet(boolean value) {
    if (!value) {
      this.entities = null;
    }
  }

  public int getKeysSize() {
    return (this.keys == null) ? 0 : this.keys.size();
  }

  public java.util.Iterator<String> getKeysIterator() {
    return (this.keys == null) ? null : this.keys.iterator();
  }

  public void addToKeys(String elem) {
    if (this.keys == null) {
      this.keys = new ArrayList<String>();
    }
    this.keys.add(elem);
  }

  public List<String> getKeys() {
    return this.keys;
  }

  public GetTimeSeriesParams setKeys(List<String> keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  /** Returns true if field keys is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public GetTimeSeriesParams setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public GetTimeSeriesParams setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 
   * @see OdsDataTable
   */
  public OdsDataTable getTable() {
    return this.table;
  }

  /**
   * 
   * @see OdsDataTable
   */
  public GetTimeSeriesParams setTable(OdsDataTable table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  public int getWindow() {
    return this.window;
  }

  public GetTimeSeriesParams setWindow(int window) {
    this.window = window;
    setWindowIsSet(true);
    return this;
  }

  public void unsetWindow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
  }

  /** Returns true if field window is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow() {
    return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
  }

  public void setWindowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
  }

  /**
   * 
   * @see OdsAggregationType
   */
  public OdsAggregationType getAggregationType() {
    return this.aggregationType;
  }

  /**
   * 
   * @see OdsAggregationType
   */
  public GetTimeSeriesParams setAggregationType(OdsAggregationType aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  public void unsetAggregationType() {
    this.aggregationType = null;
  }

  /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregationType() {
    return this.aggregationType != null;
  }

  public void setAggregationTypeIsSet(boolean value) {
    if (!value) {
      this.aggregationType = null;
    }
  }

  public String getTraceData() {
    return this.traceData;
  }

  public GetTimeSeriesParams setTraceData(String traceData) {
    this.traceData = traceData;
    return this;
  }

  public void unsetTraceData() {
    this.traceData = null;
  }

  /** Returns true if field traceData is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceData() {
    return this.traceData != null;
  }

  public void setTraceDataIsSet(boolean value) {
    if (!value) {
      this.traceData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTITIES:
      if (value == null) {
        unsetEntities();
      } else {
        setEntities((List<String>)value);
      }
      break;

    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((List<String>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((OdsDataTable)value);
      }
      break;

    case WINDOW:
      if (value == null) {
        unsetWindow();
      } else {
        setWindow((Integer)value);
      }
      break;

    case AGGREGATION_TYPE:
      if (value == null) {
        unsetAggregationType();
      } else {
        setAggregationType((OdsAggregationType)value);
      }
      break;

    case TRACE_DATA:
      if (value == null) {
        unsetTraceData();
      } else {
        setTraceData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTITIES:
      return getEntities();

    case KEYS:
      return getKeys();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case TABLE:
      return getTable();

    case WINDOW:
      return Integer.valueOf(getWindow());

    case AGGREGATION_TYPE:
      return getAggregationType();

    case TRACE_DATA:
      return getTraceData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTITIES:
      return isSetEntities();
    case KEYS:
      return isSetKeys();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TABLE:
      return isSetTable();
    case WINDOW:
      return isSetWindow();
    case AGGREGATION_TYPE:
      return isSetAggregationType();
    case TRACE_DATA:
      return isSetTraceData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTimeSeriesParams)
      return this.equals((GetTimeSeriesParams)that);
    return false;
  }

  public boolean equals(GetTimeSeriesParams that) {
    if (that == null)
      return false;

    boolean this_present_entities = true && this.isSetEntities();
    boolean that_present_entities = true && that.isSetEntities();
    if (this_present_entities || that_present_entities) {
      if (!(this_present_entities && that_present_entities))
        return false;
      if (!this.entities.equals(that.entities))
        return false;
    }

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!this.keys.equals(that.keys))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_window = true;
    boolean that_present_window = true;
    if (this_present_window || that_present_window) {
      if (!(this_present_window && that_present_window))
        return false;
      if (this.window != that.window)
        return false;
    }

    boolean this_present_aggregationType = true && this.isSetAggregationType();
    boolean that_present_aggregationType = true && that.isSetAggregationType();
    if (this_present_aggregationType || that_present_aggregationType) {
      if (!(this_present_aggregationType && that_present_aggregationType))
        return false;
      if (!this.aggregationType.equals(that.aggregationType))
        return false;
    }

    boolean this_present_traceData = true && this.isSetTraceData();
    boolean that_present_traceData = true && that.isSetTraceData();
    if (this_present_traceData || that_present_traceData) {
      if (!(this_present_traceData && that_present_traceData))
        return false;
      if (!this.traceData.equals(that.traceData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_entities = true && (isSetEntities());
    list.add(present_entities);
    if (present_entities)
      list.add(entities);

    boolean present_keys = true && (isSetKeys());
    list.add(present_keys);
    if (present_keys)
      list.add(keys);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_table = true && (isSetTable());
    list.add(present_table);
    if (present_table)
      list.add(table.getValue());

    boolean present_window = true;
    list.add(present_window);
    if (present_window)
      list.add(window);

    boolean present_aggregationType = true && (isSetAggregationType());
    list.add(present_aggregationType);
    if (present_aggregationType)
      list.add(aggregationType.getValue());

    boolean present_traceData = true && (isSetTraceData());
    list.add(present_traceData);
    if (present_traceData)
      list.add(traceData);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetTimeSeriesParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceData()).compareTo(other.isSetTraceData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceData, other.traceData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetTimeSeriesParams(");
    boolean first = true;

    sb.append("entities:");
    if (this.entities == null) {
      sb.append("null");
    } else {
      sb.append(this.entities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys:");
    if (this.keys == null) {
      sb.append("null");
    } else {
      sb.append(this.keys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("window:");
    sb.append(this.window);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregationType:");
    if (this.aggregationType == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceData:");
    if (this.traceData == null) {
      sb.append("null");
    } else {
      sb.append(this.traceData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetTimeSeriesParamsStandardSchemeFactory implements SchemeFactory {
    public GetTimeSeriesParamsStandardScheme getScheme() {
      return new GetTimeSeriesParamsStandardScheme();
    }
  }

  private static class GetTimeSeriesParamsStandardScheme extends StandardScheme<GetTimeSeriesParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetTimeSeriesParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                struct.entities = new ArrayList<String>(_list146.size);
                String _elem147;
                for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                {
                  _elem147 = iprot.readString();
                  struct.entities.add(_elem147);
                }
                iprot.readListEnd();
              }
              struct.setEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list149 = iprot.readListBegin();
                struct.keys = new ArrayList<String>(_list149.size);
                String _elem150;
                for (int _i151 = 0; _i151 < _list149.size; ++_i151)
                {
                  _elem150 = iprot.readString();
                  struct.keys.add(_elem150);
                }
                iprot.readListEnd();
              }
              struct.setKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
              struct.setTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WINDOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.window = iprot.readI32();
              struct.setWindowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AGGREGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aggregationType = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
              struct.setAggregationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRACE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceData = iprot.readString();
              struct.setTraceDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetTimeSeriesParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entities != null) {
        oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
          for (String _iter152 : struct.entities)
          {
            oprot.writeString(_iter152);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
          for (String _iter153 : struct.keys)
          {
            oprot.writeString(_iter153);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeI32(struct.table.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINDOW_FIELD_DESC);
      oprot.writeI32(struct.window);
      oprot.writeFieldEnd();
      if (struct.aggregationType != null) {
        oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregationType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.traceData != null) {
        oprot.writeFieldBegin(TRACE_DATA_FIELD_DESC);
        oprot.writeString(struct.traceData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetTimeSeriesParamsTupleSchemeFactory implements SchemeFactory {
    public GetTimeSeriesParamsTupleScheme getScheme() {
      return new GetTimeSeriesParamsTupleScheme();
    }
  }

  private static class GetTimeSeriesParamsTupleScheme extends TupleScheme<GetTimeSeriesParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetTimeSeriesParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEntities()) {
        optionals.set(0);
      }
      if (struct.isSetKeys()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetTable()) {
        optionals.set(4);
      }
      if (struct.isSetWindow()) {
        optionals.set(5);
      }
      if (struct.isSetAggregationType()) {
        optionals.set(6);
      }
      if (struct.isSetTraceData()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetEntities()) {
        {
          oprot.writeI32(struct.entities.size());
          for (String _iter154 : struct.entities)
          {
            oprot.writeString(_iter154);
          }
        }
      }
      if (struct.isSetKeys()) {
        {
          oprot.writeI32(struct.keys.size());
          for (String _iter155 : struct.keys)
          {
            oprot.writeString(_iter155);
          }
        }
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetTable()) {
        oprot.writeI32(struct.table.getValue());
      }
      if (struct.isSetWindow()) {
        oprot.writeI32(struct.window);
      }
      if (struct.isSetAggregationType()) {
        oprot.writeI32(struct.aggregationType.getValue());
      }
      if (struct.isSetTraceData()) {
        oprot.writeString(struct.traceData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetTimeSeriesParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list156 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.entities = new ArrayList<String>(_list156.size);
          String _elem157;
          for (int _i158 = 0; _i158 < _list156.size; ++_i158)
          {
            _elem157 = iprot.readString();
            struct.entities.add(_elem157);
          }
        }
        struct.setEntitiesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keys = new ArrayList<String>(_list159.size);
          String _elem160;
          for (int _i161 = 0; _i161 < _list159.size; ++_i161)
          {
            _elem160 = iprot.readString();
            struct.keys.add(_elem160);
          }
        }
        struct.setKeysIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.table = com.facebook.maestro.OdsDataTable.findByValue(iprot.readI32());
        struct.setTableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.window = iprot.readI32();
        struct.setWindowIsSet(true);
      }
      if (incoming.get(6)) {
        struct.aggregationType = com.facebook.maestro.OdsAggregationType.findByValue(iprot.readI32());
        struct.setAggregationTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.traceData = iprot.readString();
        struct.setTraceDataIsSet(true);
      }
    }
  }

}

